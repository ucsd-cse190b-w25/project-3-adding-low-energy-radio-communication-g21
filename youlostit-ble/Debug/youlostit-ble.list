
youlostit-ble.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005098  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08005228  08005228  00006228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052f4  080052f4  000071b0  2**0
                  CONTENTS
  4 .ARM          00000008  080052f4  080052f4  000062f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052fc  080052fc  000071b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052fc  080052fc  000062fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005300  08005300  00006300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b0  20000000  08005304  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  200001b0  080054b4  000071b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  080054b4  000074bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000071b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a9ea  00000000  00000000  000071e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002032  00000000  00000000  00011bca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c8  00000000  00000000  00013c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000740  00000000  00000000  000145c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002744d  00000000  00000000  00014d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b441  00000000  00000000  0003c155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f172b  00000000  00000000  00047596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00138cc1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ff4  00000000  00000000  00138d04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a3  00000000  00000000  0013bcf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001b0 	.word	0x200001b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005210 	.word	0x08005210

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001b4 	.word	0x200001b4
 80001cc:	08005210 	.word	0x08005210

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	@ 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2iz>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000854:	d215      	bcs.n	8000882 <__aeabi_d2iz+0x36>
 8000856:	d511      	bpl.n	800087c <__aeabi_d2iz+0x30>
 8000858:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d912      	bls.n	8000888 <__aeabi_d2iz+0x3c>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000872:	fa23 f002 	lsr.w	r0, r3, r2
 8000876:	bf18      	it	ne
 8000878:	4240      	negne	r0, r0
 800087a:	4770      	bx	lr
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	4770      	bx	lr
 8000882:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000886:	d105      	bne.n	8000894 <__aeabi_d2iz+0x48>
 8000888:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800088c:	bf08      	it	eq
 800088e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000892:	4770      	bx	lr
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop

0800089c <ble_init>:
int16_t connectionHandler[2] = {-1, -1}; // Little Endian Format for connection handler

/**
 * Initializes the BLE module with appropriate settings
 */
void ble_init(){
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af02      	add	r7, sp, #8
	//fetching the reset event
	rxEvent=(uint8_t*)malloc(EVENT_STARTUP_SIZE);
 80008a2:	2006      	movs	r0, #6
 80008a4:	f003 fb9e 	bl	8003fe4 <malloc>
 80008a8:	4603      	mov	r3, r0
 80008aa:	461a      	mov	r2, r3
 80008ac:	4b70      	ldr	r3, [pc, #448]	@ (8000a70 <ble_init+0x1d4>)
 80008ae:	601a      	str	r2, [r3, #0]
	int res;

	while(!dataAvailable);
 80008b0:	bf00      	nop
 80008b2:	4b70      	ldr	r3, [pc, #448]	@ (8000a74 <ble_init+0x1d8>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d0fb      	beq.n	80008b2 <ble_init+0x16>
	res=fetchBleEvent(rxEvent,EVENT_STARTUP_SIZE);
 80008ba:	4b6d      	ldr	r3, [pc, #436]	@ (8000a70 <ble_init+0x1d4>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	2106      	movs	r1, #6
 80008c0:	4618      	mov	r0, r3
 80008c2:	f000 f905 	bl	8000ad0 <fetchBleEvent>
 80008c6:	6078      	str	r0, [r7, #4]

	if(res==BLE_OK){
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d111      	bne.n	80008f2 <ble_init+0x56>
	res=checkEventResp(rxEvent,EVENT_STATUP_DATA,EVENT_STARTUP_SIZE);
 80008ce:	4b68      	ldr	r3, [pc, #416]	@ (8000a70 <ble_init+0x1d4>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2206      	movs	r2, #6
 80008d4:	4968      	ldr	r1, [pc, #416]	@ (8000a78 <ble_init+0x1dc>)
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 f984 	bl	8000be4 <checkEventResp>
 80008dc:	6078      	str	r0, [r7, #4]
	if(res==BLE_OK){
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d106      	bne.n	80008f2 <ble_init+0x56>
	   stackInitCompleteFlag|=0x01;
 80008e4:	4b65      	ldr	r3, [pc, #404]	@ (8000a7c <ble_init+0x1e0>)
 80008e6:	881b      	ldrh	r3, [r3, #0]
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	b29a      	uxth	r2, r3
 80008ee:	4b63      	ldr	r3, [pc, #396]	@ (8000a7c <ble_init+0x1e0>)
 80008f0:	801a      	strh	r2, [r3, #0]
	}
	}
	HAL_Delay(10);
 80008f2:	200a      	movs	r0, #10
 80008f4:	f001 fc78 	bl	80021e8 <HAL_Delay>
	free(rxEvent);
 80008f8:	4b5d      	ldr	r3, [pc, #372]	@ (8000a70 <ble_init+0x1d4>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f003 fb79 	bl	8003ff4 <free>

	//INIT GATT
	if(BLE_command(ACI_GATT_INIT,sizeof(ACI_GATT_INIT),ACI_GATT_INIT_COMPLETE,sizeof(ACI_GATT_INIT_COMPLETE),0)==BLE_OK){
 8000902:	2300      	movs	r3, #0
 8000904:	9300      	str	r3, [sp, #0]
 8000906:	2307      	movs	r3, #7
 8000908:	4a5d      	ldr	r2, [pc, #372]	@ (8000a80 <ble_init+0x1e4>)
 800090a:	2104      	movs	r1, #4
 800090c:	485d      	ldr	r0, [pc, #372]	@ (8000a84 <ble_init+0x1e8>)
 800090e:	f000 faa1 	bl	8000e54 <BLE_command>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d106      	bne.n	8000926 <ble_init+0x8a>
	   stackInitCompleteFlag|=0x02;
 8000918:	4b58      	ldr	r3, [pc, #352]	@ (8000a7c <ble_init+0x1e0>)
 800091a:	881b      	ldrh	r3, [r3, #0]
 800091c:	f043 0302 	orr.w	r3, r3, #2
 8000920:	b29a      	uxth	r2, r3
 8000922:	4b56      	ldr	r3, [pc, #344]	@ (8000a7c <ble_init+0x1e0>)
 8000924:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 8000926:	4b52      	ldr	r3, [pc, #328]	@ (8000a70 <ble_init+0x1d4>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4618      	mov	r0, r3
 800092c:	f003 fb62 	bl	8003ff4 <free>

	//INIT GAP, actually the handle that i get is a GATT handle of a service, will change the name later
	if(BLE_command(ACI_GAP_INIT,sizeof(ACI_GAP_INIT),ACI_GAP_INIT_COMPLETE,sizeof(ACI_GAP_INIT_COMPLETE),3)==BLE_OK){
 8000930:	2303      	movs	r3, #3
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	2307      	movs	r3, #7
 8000936:	4a54      	ldr	r2, [pc, #336]	@ (8000a88 <ble_init+0x1ec>)
 8000938:	2107      	movs	r1, #7
 800093a:	4854      	ldr	r0, [pc, #336]	@ (8000a8c <ble_init+0x1f0>)
 800093c:	f000 fa8a 	bl	8000e54 <BLE_command>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d11b      	bne.n	800097e <ble_init+0xe2>
	   stackInitCompleteFlag|=0x04;
 8000946:	4b4d      	ldr	r3, [pc, #308]	@ (8000a7c <ble_init+0x1e0>)
 8000948:	881b      	ldrh	r3, [r3, #0]
 800094a:	f043 0304 	orr.w	r3, r3, #4
 800094e:	b29a      	uxth	r2, r3
 8000950:	4b4a      	ldr	r3, [pc, #296]	@ (8000a7c <ble_init+0x1e0>)
 8000952:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_SERVICE_HANDLE,rxEvent+7,2);
 8000954:	4b46      	ldr	r3, [pc, #280]	@ (8000a70 <ble_init+0x1d4>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	3307      	adds	r3, #7
 800095a:	881b      	ldrh	r3, [r3, #0]
 800095c:	b29a      	uxth	r2, r3
 800095e:	4b4c      	ldr	r3, [pc, #304]	@ (8000a90 <ble_init+0x1f4>)
 8000960:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_CHAR_NAME_HANDLE,rxEvent+9,2);
 8000962:	4b43      	ldr	r3, [pc, #268]	@ (8000a70 <ble_init+0x1d4>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	3309      	adds	r3, #9
 8000968:	881b      	ldrh	r3, [r3, #0]
 800096a:	b29a      	uxth	r2, r3
 800096c:	4b49      	ldr	r3, [pc, #292]	@ (8000a94 <ble_init+0x1f8>)
 800096e:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_CHAR_APP_HANDLE,rxEvent+11,2);
 8000970:	4b3f      	ldr	r3, [pc, #252]	@ (8000a70 <ble_init+0x1d4>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	330b      	adds	r3, #11
 8000976:	881b      	ldrh	r3, [r3, #0]
 8000978:	b29a      	uxth	r2, r3
 800097a:	4b47      	ldr	r3, [pc, #284]	@ (8000a98 <ble_init+0x1fc>)
 800097c:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 800097e:	4b3c      	ldr	r3, [pc, #240]	@ (8000a70 <ble_init+0x1d4>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4618      	mov	r0, r3
 8000984:	f003 fb36 	bl	8003ff4 <free>

	//SET THE NAME OF THE BOARD IN THE SERVICE CREATED AUTOMATICALLY
	updateCharValue(GAP_SERVICE_HANDLE,GAP_CHAR_NAME_HANDLE,0,sizeof(deviceName),deviceName);
 8000988:	4b44      	ldr	r3, [pc, #272]	@ (8000a9c <ble_init+0x200>)
 800098a:	9300      	str	r3, [sp, #0]
 800098c:	2307      	movs	r3, #7
 800098e:	2200      	movs	r2, #0
 8000990:	4940      	ldr	r1, [pc, #256]	@ (8000a94 <ble_init+0x1f8>)
 8000992:	483f      	ldr	r0, [pc, #252]	@ (8000a90 <ble_init+0x1f4>)
 8000994:	f000 fb24 	bl	8000fe0 <updateCharValue>
	stackInitCompleteFlag|=0x08;
 8000998:	4b38      	ldr	r3, [pc, #224]	@ (8000a7c <ble_init+0x1e0>)
 800099a:	881b      	ldrh	r3, [r3, #0]
 800099c:	f043 0308 	orr.w	r3, r3, #8
 80009a0:	b29a      	uxth	r2, r3
 80009a2:	4b36      	ldr	r3, [pc, #216]	@ (8000a7c <ble_init+0x1e0>)
 80009a4:	801a      	strh	r2, [r3, #0]
	free(rxEvent);
 80009a6:	4b32      	ldr	r3, [pc, #200]	@ (8000a70 <ble_init+0x1d4>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4618      	mov	r0, r3
 80009ac:	f003 fb22 	bl	8003ff4 <free>

	//INIT AUTH
	if(BLE_command(ACI_GAP_SET_AUTH,sizeof(ACI_GAP_SET_AUTH),ACI_GAP_SET_AUTH_RESP,sizeof(ACI_GAP_SET_AUTH_RESP),0)==BLE_OK){
 80009b0:	2300      	movs	r3, #0
 80009b2:	9300      	str	r3, [sp, #0]
 80009b4:	2307      	movs	r3, #7
 80009b6:	4a3a      	ldr	r2, [pc, #232]	@ (8000aa0 <ble_init+0x204>)
 80009b8:	2110      	movs	r1, #16
 80009ba:	483a      	ldr	r0, [pc, #232]	@ (8000aa4 <ble_init+0x208>)
 80009bc:	f000 fa4a 	bl	8000e54 <BLE_command>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d106      	bne.n	80009d4 <ble_init+0x138>
	   stackInitCompleteFlag|=0x10;
 80009c6:	4b2d      	ldr	r3, [pc, #180]	@ (8000a7c <ble_init+0x1e0>)
 80009c8:	881b      	ldrh	r3, [r3, #0]
 80009ca:	f043 0310 	orr.w	r3, r3, #16
 80009ce:	b29a      	uxth	r2, r3
 80009d0:	4b2a      	ldr	r3, [pc, #168]	@ (8000a7c <ble_init+0x1e0>)
 80009d2:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 80009d4:	4b26      	ldr	r3, [pc, #152]	@ (8000a70 <ble_init+0x1d4>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4618      	mov	r0, r3
 80009da:	f003 fb0b 	bl	8003ff4 <free>

	//SET_TX_LEVEL
	if(BLE_command(ACI_HAL_SET_TX_POWER_LEVEL,sizeof(ACI_HAL_SET_TX_POWER_LEVEL),ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE,sizeof(ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE),0)==BLE_OK){
 80009de:	2300      	movs	r3, #0
 80009e0:	9300      	str	r3, [sp, #0]
 80009e2:	2307      	movs	r3, #7
 80009e4:	4a30      	ldr	r2, [pc, #192]	@ (8000aa8 <ble_init+0x20c>)
 80009e6:	2106      	movs	r1, #6
 80009e8:	4830      	ldr	r0, [pc, #192]	@ (8000aac <ble_init+0x210>)
 80009ea:	f000 fa33 	bl	8000e54 <BLE_command>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d106      	bne.n	8000a02 <ble_init+0x166>
	   stackInitCompleteFlag|=0x20;
 80009f4:	4b21      	ldr	r3, [pc, #132]	@ (8000a7c <ble_init+0x1e0>)
 80009f6:	881b      	ldrh	r3, [r3, #0]
 80009f8:	f043 0320 	orr.w	r3, r3, #32
 80009fc:	b29a      	uxth	r2, r3
 80009fe:	4b1f      	ldr	r3, [pc, #124]	@ (8000a7c <ble_init+0x1e0>)
 8000a00:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 8000a02:	4b1b      	ldr	r3, [pc, #108]	@ (8000a70 <ble_init+0x1d4>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f003 faf4 	bl	8003ff4 <free>

	//SET SCAN RESPONSE DATA
	if(BLE_command(HCI_LE_SET_SCAN_RESPONSE_DATA,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA),HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE),0)==BLE_OK){
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	9300      	str	r3, [sp, #0]
 8000a10:	2307      	movs	r3, #7
 8000a12:	4a27      	ldr	r2, [pc, #156]	@ (8000ab0 <ble_init+0x214>)
 8000a14:	2124      	movs	r1, #36	@ 0x24
 8000a16:	4827      	ldr	r0, [pc, #156]	@ (8000ab4 <ble_init+0x218>)
 8000a18:	f000 fa1c 	bl	8000e54 <BLE_command>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d106      	bne.n	8000a30 <ble_init+0x194>
	   stackInitCompleteFlag|=0x40;
 8000a22:	4b16      	ldr	r3, [pc, #88]	@ (8000a7c <ble_init+0x1e0>)
 8000a24:	881b      	ldrh	r3, [r3, #0]
 8000a26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a2a:	b29a      	uxth	r2, r3
 8000a2c:	4b13      	ldr	r3, [pc, #76]	@ (8000a7c <ble_init+0x1e0>)
 8000a2e:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 8000a30:	4b0f      	ldr	r3, [pc, #60]	@ (8000a70 <ble_init+0x1d4>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4618      	mov	r0, r3
 8000a36:	f003 fadd 	bl	8003ff4 <free>

	//This will start the advertisment,
	setConnectable();
 8000a3a:	f000 f98b 	bl	8000d54 <setConnectable>

	//add the nordic UART service
	addService(UUID_NORDIC_UART_SERVICE,NORDIC_UART_SERVICE_HANDLE,SET_ATTRIBUTES(7)); //SET_ATTRIBUTES(1+2+3*2+3+3));//1 atribute service +2 attribute char readable+3*(2 NOTIFYABLE READABLE charachteristics)
 8000a3e:	2207      	movs	r2, #7
 8000a40:	491d      	ldr	r1, [pc, #116]	@ (8000ab8 <ble_init+0x21c>)
 8000a42:	481e      	ldr	r0, [pc, #120]	@ (8000abc <ble_init+0x220>)
 8000a44:	f000 fa52 	bl	8000eec <addService>

	//add the nordic UART charachteristics
	addCharacteristic(UUID_CHAR_READ,READ_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),NOTIFIBLE);
 8000a48:	2310      	movs	r3, #16
 8000a4a:	9300      	str	r3, [sp, #0]
 8000a4c:	2314      	movs	r3, #20
 8000a4e:	4a1a      	ldr	r2, [pc, #104]	@ (8000ab8 <ble_init+0x21c>)
 8000a50:	491b      	ldr	r1, [pc, #108]	@ (8000ac0 <ble_init+0x224>)
 8000a52:	481c      	ldr	r0, [pc, #112]	@ (8000ac4 <ble_init+0x228>)
 8000a54:	f000 fa82 	bl	8000f5c <addCharacteristic>
	addCharacteristic(UUID_CHAR_WRITE,WRITE_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),WRITABLE);
 8000a58:	2304      	movs	r3, #4
 8000a5a:	9300      	str	r3, [sp, #0]
 8000a5c:	2314      	movs	r3, #20
 8000a5e:	4a16      	ldr	r2, [pc, #88]	@ (8000ab8 <ble_init+0x21c>)
 8000a60:	4919      	ldr	r1, [pc, #100]	@ (8000ac8 <ble_init+0x22c>)
 8000a62:	481a      	ldr	r0, [pc, #104]	@ (8000acc <ble_init+0x230>)
 8000a64:	f000 fa7a 	bl	8000f5c <addCharacteristic>

	if(stackInitCompleteFlag==255){
	  //turn on led blue if everything was fine
	//  HAL_GPIO_WritePin(CPU_LED_GPIO_Port,CPU_LED_Pin,GPIO_PIN_SET);
	}
	return;
 8000a68:	bf00      	nop
}
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	200002e4 	.word	0x200002e4
 8000a74:	20000300 	.word	0x20000300
 8000a78:	20000000 	.word	0x20000000
 8000a7c:	200002e2 	.word	0x200002e2
 8000a80:	2000000c 	.word	0x2000000c
 8000a84:	20000008 	.word	0x20000008
 8000a88:	2000001c 	.word	0x2000001c
 8000a8c:	20000014 	.word	0x20000014
 8000a90:	200001cc 	.word	0x200001cc
 8000a94:	200001d0 	.word	0x200001d0
 8000a98:	200001d4 	.word	0x200001d4
 8000a9c:	2000010c 	.word	0x2000010c
 8000aa0:	20000034 	.word	0x20000034
 8000aa4:	20000024 	.word	0x20000024
 8000aa8:	20000044 	.word	0x20000044
 8000aac:	2000003c 	.word	0x2000003c
 8000ab0:	20000070 	.word	0x20000070
 8000ab4:	2000004c 	.word	0x2000004c
 8000ab8:	200002d8 	.word	0x200002d8
 8000abc:	20000114 	.word	0x20000114
 8000ac0:	200002e0 	.word	0x200002e0
 8000ac4:	20000134 	.word	0x20000134
 8000ac8:	200002dc 	.word	0x200002dc
 8000acc:	20000124 	.word	0x20000124

08000ad0 <fetchBleEvent>:
	 if(BLE_command(ACI_HAL_SET_STANDBY,sizeof(ACI_HAL_SET_STANDBY),ACI_HAL_SET_STANDBY_COMPLETE,sizeof(ACI_HAL_SET_STANDBY_COMPLETE),0)==BLE_OK){
	 }
	 free(rxEvent);
}

int fetchBleEvent(uint8_t *container, int size){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08c      	sub	sp, #48	@ 0x30
 8000ad4:	af02      	add	r7, sp, #8
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	6039      	str	r1, [r7, #0]

  uint8_t master_header[]={0x0b,0x00,0x00,0x00,0x00};
 8000ada:	4a3d      	ldr	r2, [pc, #244]	@ (8000bd0 <fetchBleEvent+0x100>)
 8000adc:	f107 0318 	add.w	r3, r7, #24
 8000ae0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ae4:	6018      	str	r0, [r3, #0]
 8000ae6:	3304      	adds	r3, #4
 8000ae8:	7019      	strb	r1, [r3, #0]
  uint8_t slave_header[5];

  //Wait until it is available an event coming from the BLE module (GPIO PIN COULD CHANGE ACCORDING TO THE BOARD)
  if(HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000aea:	2140      	movs	r1, #64	@ 0x40
 8000aec:	4839      	ldr	r0, [pc, #228]	@ (8000bd4 <fetchBleEvent+0x104>)
 8000aee:	f001 fe5b 	bl	80027a8 <HAL_GPIO_ReadPin>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d065      	beq.n	8000bc4 <fetchBleEvent+0xf4>

  HAL_Delay(5);
 8000af8:	2005      	movs	r0, #5
 8000afa:	f001 fb75 	bl	80021e8 <HAL_Delay>
  //PIN_CS of SPI2 LOW
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 8000afe:	2200      	movs	r2, #0
 8000b00:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b04:	4834      	ldr	r0, [pc, #208]	@ (8000bd8 <fetchBleEvent+0x108>)
 8000b06:	f001 fe67 	bl	80027d8 <HAL_GPIO_WritePin>

  //SPI2 in this case, it could change according to the board
  //we send a byte containing a request of reading followed by 4 dummy bytes
  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000b0a:	f107 0210 	add.w	r2, r7, #16
 8000b0e:	f107 0118 	add.w	r1, r7, #24
 8000b12:	2301      	movs	r3, #1
 8000b14:	9300      	str	r3, [sp, #0]
 8000b16:	2305      	movs	r3, #5
 8000b18:	4830      	ldr	r0, [pc, #192]	@ (8000bdc <fetchBleEvent+0x10c>)
 8000b1a:	f002 fedd 	bl	80038d8 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000b1e:	2201      	movs	r2, #1
 8000b20:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b24:	482c      	ldr	r0, [pc, #176]	@ (8000bd8 <fetchBleEvent+0x108>)
 8000b26:	f001 fe57 	bl	80027d8 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	f001 fb5c 	bl	80021e8 <HAL_Delay>
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 8000b30:	2200      	movs	r2, #0
 8000b32:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b36:	4828      	ldr	r0, [pc, #160]	@ (8000bd8 <fetchBleEvent+0x108>)
 8000b38:	f001 fe4e 	bl	80027d8 <HAL_GPIO_WritePin>

  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000b3c:	f107 0210 	add.w	r2, r7, #16
 8000b40:	f107 0118 	add.w	r1, r7, #24
 8000b44:	2301      	movs	r3, #1
 8000b46:	9300      	str	r3, [sp, #0]
 8000b48:	2305      	movs	r3, #5
 8000b4a:	4824      	ldr	r0, [pc, #144]	@ (8000bdc <fetchBleEvent+0x10c>)
 8000b4c:	f002 fec4 	bl	80038d8 <HAL_SPI_TransmitReceive>

  //let's get the size of data available
  int dataSize;
  dataSize=(slave_header[3]|slave_header[4]<<8);
 8000b50:	7cfb      	ldrb	r3, [r7, #19]
 8000b52:	461a      	mov	r2, r3
 8000b54:	7d3b      	ldrb	r3, [r7, #20]
 8000b56:	021b      	lsls	r3, r3, #8
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	627b      	str	r3, [r7, #36]	@ 0x24
  int i;
  char dummy=0xff;
 8000b5c:	23ff      	movs	r3, #255	@ 0xff
 8000b5e:	73fb      	strb	r3, [r7, #15]

  if(dataSize>size){
 8000b60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	dd01      	ble.n	8000b6c <fetchBleEvent+0x9c>
	  dataSize=size;
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if(dataSize>0){
 8000b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	dd1f      	ble.n	8000bb2 <fetchBleEvent+0xe2>
	    //let's fill the get the bytes availables and insert them into the container variable
  		for(i=0;i<dataSize;i++){
 8000b72:	2300      	movs	r3, #0
 8000b74:	623b      	str	r3, [r7, #32]
 8000b76:	e00d      	b.n	8000b94 <fetchBleEvent+0xc4>
  		HAL_SPI_TransmitReceive(&hspi3,(uint8_t*)&dummy,container+i,1,1);
 8000b78:	6a3b      	ldr	r3, [r7, #32]
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	441a      	add	r2, r3
 8000b7e:	f107 010f 	add.w	r1, r7, #15
 8000b82:	2301      	movs	r3, #1
 8000b84:	9300      	str	r3, [sp, #0]
 8000b86:	2301      	movs	r3, #1
 8000b88:	4814      	ldr	r0, [pc, #80]	@ (8000bdc <fetchBleEvent+0x10c>)
 8000b8a:	f002 fea5 	bl	80038d8 <HAL_SPI_TransmitReceive>
  		for(i=0;i<dataSize;i++){
 8000b8e:	6a3b      	ldr	r3, [r7, #32]
 8000b90:	3301      	adds	r3, #1
 8000b92:	623b      	str	r3, [r7, #32]
 8000b94:	6a3a      	ldr	r2, [r7, #32]
 8000b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	dbed      	blt.n	8000b78 <fetchBleEvent+0xa8>

  		}
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ba2:	480d      	ldr	r0, [pc, #52]	@ (8000bd8 <fetchBleEvent+0x108>)
 8000ba4:	f001 fe18 	bl	80027d8 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
        return -1;
  	}

  //let's stop the SPI2
  dataAvailable=0;
 8000ba8:	4b0d      	ldr	r3, [pc, #52]	@ (8000be0 <fetchBleEvent+0x110>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
  return BLE_OK;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	e00a      	b.n	8000bc8 <fetchBleEvent+0xf8>
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bb8:	4807      	ldr	r0, [pc, #28]	@ (8000bd8 <fetchBleEvent+0x108>)
 8000bba:	f001 fe0d 	bl	80027d8 <HAL_GPIO_WritePin>
        return -1;
 8000bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc2:	e001      	b.n	8000bc8 <fetchBleEvent+0xf8>
  }else{
  return -2;
 8000bc4:	f06f 0301 	mvn.w	r3, #1
  }
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3728      	adds	r7, #40	@ 0x28
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	08005228 	.word	0x08005228
 8000bd4:	48001000 	.word	0x48001000
 8000bd8:	48000c00 	.word	0x48000c00
 8000bdc:	20000304 	.word	0x20000304
 8000be0:	20000300 	.word	0x20000300

08000be4 <checkEventResp>:


int checkEventResp(uint8_t *event, uint8_t *reference, int size){
 8000be4:	b480      	push	{r7}
 8000be6:	b087      	sub	sp, #28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	607a      	str	r2, [r7, #4]
	int j=0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]

	for(j=0;j<size;j++){
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]
 8000bf8:	e00f      	b.n	8000c1a <checkEventResp+0x36>

		if(event[j]!=reference[j]){
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	68fa      	ldr	r2, [r7, #12]
 8000bfe:	4413      	add	r3, r2
 8000c00:	781a      	ldrb	r2, [r3, #0]
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	68b9      	ldr	r1, [r7, #8]
 8000c06:	440b      	add	r3, r1
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d002      	beq.n	8000c14 <checkEventResp+0x30>
			return -1;
 8000c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c12:	e007      	b.n	8000c24 <checkEventResp+0x40>
	for(j=0;j<size;j++){
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	3301      	adds	r3, #1
 8000c18:	617b      	str	r3, [r7, #20]
 8000c1a:	697a      	ldr	r2, [r7, #20]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	dbeb      	blt.n	8000bfa <checkEventResp+0x16>
		}
	}

return BLE_OK;
 8000c22:	2300      	movs	r3, #0
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	371c      	adds	r7, #28
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <sendCommand>:

void sendCommand(uint8_t *command,int size){
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	@ 0x28
 8000c34:	af02      	add	r7, sp, #8
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	6039      	str	r1, [r7, #0]

	  uint8_t master_header[]={0x0a,0x00,0x00,0x00,0x00};
 8000c3a:	4a1f      	ldr	r2, [pc, #124]	@ (8000cb8 <sendCommand+0x88>)
 8000c3c:	f107 0310 	add.w	r3, r7, #16
 8000c40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c44:	6018      	str	r0, [r3, #0]
 8000c46:	3304      	adds	r3, #4
 8000c48:	7019      	strb	r1, [r3, #0]
	  uint8_t slave_header[5];

	  int result;

	do{
	  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c50:	481a      	ldr	r0, [pc, #104]	@ (8000cbc <sendCommand+0x8c>)
 8000c52:	f001 fdc1 	bl	80027d8 <HAL_GPIO_WritePin>

	  //wait until it is possible to write
	  //while(!dataAvailable);
	  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000c56:	f107 0208 	add.w	r2, r7, #8
 8000c5a:	f107 0110 	add.w	r1, r7, #16
 8000c5e:	2301      	movs	r3, #1
 8000c60:	9300      	str	r3, [sp, #0]
 8000c62:	2305      	movs	r3, #5
 8000c64:	4816      	ldr	r0, [pc, #88]	@ (8000cc0 <sendCommand+0x90>)
 8000c66:	f002 fe37 	bl	80038d8 <HAL_SPI_TransmitReceive>
	  int bufferSize=(slave_header[2]<<8|slave_header[1]);
 8000c6a:	7abb      	ldrb	r3, [r7, #10]
 8000c6c:	021b      	lsls	r3, r3, #8
 8000c6e:	7a7a      	ldrb	r2, [r7, #9]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	61bb      	str	r3, [r7, #24]
	  if(bufferSize>=size){
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	db09      	blt.n	8000c90 <sendCommand+0x60>
		HAL_SPI_Transmit(&hspi3,command,size,1);
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	b29a      	uxth	r2, r3
 8000c80:	2301      	movs	r3, #1
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	480e      	ldr	r0, [pc, #56]	@ (8000cc0 <sendCommand+0x90>)
 8000c86:	f002 fcb2 	bl	80035ee <HAL_SPI_Transmit>
		result=0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
 8000c8e:	e002      	b.n	8000c96 <sendCommand+0x66>
	  }else{
		result=-1;
 8000c90:	f04f 33ff 	mov.w	r3, #4294967295
 8000c94:	61fb      	str	r3, [r7, #28]
	  }
	  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000c96:	2201      	movs	r2, #1
 8000c98:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c9c:	4807      	ldr	r0, [pc, #28]	@ (8000cbc <sendCommand+0x8c>)
 8000c9e:	f001 fd9b 	bl	80027d8 <HAL_GPIO_WritePin>
	  dataAvailable=0;
 8000ca2:	4b08      	ldr	r3, [pc, #32]	@ (8000cc4 <sendCommand+0x94>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
	}while(result!=0);
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d1cd      	bne.n	8000c4a <sendCommand+0x1a>

}
 8000cae:	bf00      	nop
 8000cb0:	bf00      	nop
 8000cb2:	3720      	adds	r7, #32
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	08005230 	.word	0x08005230
 8000cbc:	48000c00 	.word	0x48000c00
 8000cc0:	20000304 	.word	0x20000304
 8000cc4:	20000300 	.word	0x20000300

08000cc8 <catchBLE>:

void catchBLE(uint8_t * byte1, uint8_t * byte2){
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]
	int result=fetchBleEvent(buffer,127);
 8000cd2:	217f      	movs	r1, #127	@ 0x7f
 8000cd4:	481a      	ldr	r0, [pc, #104]	@ (8000d40 <catchBLE+0x78>)
 8000cd6:	f7ff fefb 	bl	8000ad0 <fetchBleEvent>
 8000cda:	60f8      	str	r0, [r7, #12]
	if(result==BLE_OK){
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d12a      	bne.n	8000d38 <catchBLE+0x70>
		if(checkEventResp(buffer,EVENT_DISCONNECTED,3)==BLE_OK){
 8000ce2:	2203      	movs	r2, #3
 8000ce4:	4917      	ldr	r1, [pc, #92]	@ (8000d44 <catchBLE+0x7c>)
 8000ce6:	4816      	ldr	r0, [pc, #88]	@ (8000d40 <catchBLE+0x78>)
 8000ce8:	f7ff ff7c 	bl	8000be4 <checkEventResp>
			//setConnectable();
		}
		if(checkEventResp(buffer, EVENT_CONNECTED, 5)==BLE_OK){
 8000cec:	2205      	movs	r2, #5
 8000cee:	4916      	ldr	r1, [pc, #88]	@ (8000d48 <catchBLE+0x80>)
 8000cf0:	4813      	ldr	r0, [pc, #76]	@ (8000d40 <catchBLE+0x78>)
 8000cf2:	f7ff ff77 	bl	8000be4 <checkEventResp>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d109      	bne.n	8000d10 <catchBLE+0x48>
			// Little Endian Format
			*(connectionHandler) = buffer[5];
 8000cfc:	4b10      	ldr	r3, [pc, #64]	@ (8000d40 <catchBLE+0x78>)
 8000cfe:	795b      	ldrb	r3, [r3, #5]
 8000d00:	b21a      	sxth	r2, r3
 8000d02:	4b12      	ldr	r3, [pc, #72]	@ (8000d4c <catchBLE+0x84>)
 8000d04:	801a      	strh	r2, [r3, #0]
			*(connectionHandler + 1) = buffer[6];
 8000d06:	4b0e      	ldr	r3, [pc, #56]	@ (8000d40 <catchBLE+0x78>)
 8000d08:	799b      	ldrb	r3, [r3, #6]
 8000d0a:	b21a      	sxth	r2, r3
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d4c <catchBLE+0x84>)
 8000d0e:	805a      	strh	r2, [r3, #2]
		}
		if (checkEventResp(buffer, EVENT_GATT_CHANGED, 6)){
 8000d10:	4b0f      	ldr	r3, [pc, #60]	@ (8000d50 <catchBLE+0x88>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2206      	movs	r2, #6
 8000d16:	4619      	mov	r1, r3
 8000d18:	4809      	ldr	r0, [pc, #36]	@ (8000d40 <catchBLE+0x78>)
 8000d1a:	f7ff ff63 	bl	8000be4 <checkEventResp>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d009      	beq.n	8000d38 <catchBLE+0x70>
			*(connectionHandler) = buffer[5];
 8000d24:	4b06      	ldr	r3, [pc, #24]	@ (8000d40 <catchBLE+0x78>)
 8000d26:	795b      	ldrb	r3, [r3, #5]
 8000d28:	b21a      	sxth	r2, r3
 8000d2a:	4b08      	ldr	r3, [pc, #32]	@ (8000d4c <catchBLE+0x84>)
 8000d2c:	801a      	strh	r2, [r3, #0]
			*(connectionHandler + 1) = buffer[6];
 8000d2e:	4b04      	ldr	r3, [pc, #16]	@ (8000d40 <catchBLE+0x78>)
 8000d30:	799b      	ldrb	r3, [r3, #6]
 8000d32:	b21a      	sxth	r2, r3
 8000d34:	4b05      	ldr	r3, [pc, #20]	@ (8000d4c <catchBLE+0x84>)
 8000d36:	805a      	strh	r2, [r3, #2]
		}
	}else{
		//something bad is happening if I am here
	}
}
 8000d38:	bf00      	nop
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	200001d8 	.word	0x200001d8
 8000d44:	200000ec 	.word	0x200000ec
 8000d48:	200000f8 	.word	0x200000f8
 8000d4c:	20000144 	.word	0x20000144
 8000d50:	200000fd 	.word	0x200000fd

08000d54 <setConnectable>:

void setConnectable(){
 8000d54:	b590      	push	{r4, r7, lr}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
		uint8_t* rxEvent;
		//Start advertising
		uint8_t *localname;
		int res;
		localname=(uint8_t*)malloc(sizeof(deviceName)+5);//carattere di terminazione+listauid+slavetemp
 8000d5a:	200c      	movs	r0, #12
 8000d5c:	f003 f942 	bl	8003fe4 <malloc>
 8000d60:	4603      	mov	r3, r0
 8000d62:	60fb      	str	r3, [r7, #12]
		memcpy(localname,deviceName,sizeof(deviceName));
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	4a37      	ldr	r2, [pc, #220]	@ (8000e44 <setConnectable+0xf0>)
 8000d68:	6810      	ldr	r0, [r2, #0]
 8000d6a:	6018      	str	r0, [r3, #0]
 8000d6c:	8891      	ldrh	r1, [r2, #4]
 8000d6e:	7992      	ldrb	r2, [r2, #6]
 8000d70:	8099      	strh	r1, [r3, #4]
 8000d72:	719a      	strb	r2, [r3, #6]
		localname[sizeof(deviceName)+1]=0x00;
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	3308      	adds	r3, #8
 8000d78:	2200      	movs	r2, #0
 8000d7a:	701a      	strb	r2, [r3, #0]
		localname[sizeof(deviceName)+2]=0x00;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	3309      	adds	r3, #9
 8000d80:	2200      	movs	r2, #0
 8000d82:	701a      	strb	r2, [r3, #0]
		localname[sizeof(deviceName)+3]=0x00;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	330a      	adds	r3, #10
 8000d88:	2200      	movs	r2, #0
 8000d8a:	701a      	strb	r2, [r3, #0]
		localname[sizeof(deviceName)+4]=0x00;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	330b      	adds	r3, #11
 8000d90:	2200      	movs	r2, #0
 8000d92:	701a      	strb	r2, [r3, #0]
		localname[sizeof(deviceName)]=0x00;
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	3307      	adds	r3, #7
 8000d98:	2200      	movs	r2, #0
 8000d9a:	701a      	strb	r2, [r3, #0]


		ACI_GAP_SET_DISCOVERABLE[11]=sizeof(deviceName)+1;
 8000d9c:	4b2a      	ldr	r3, [pc, #168]	@ (8000e48 <setConnectable+0xf4>)
 8000d9e:	2208      	movs	r2, #8
 8000da0:	72da      	strb	r2, [r3, #11]
		ACI_GAP_SET_DISCOVERABLE[3]=sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE)-4;
 8000da2:	4b29      	ldr	r3, [pc, #164]	@ (8000e48 <setConnectable+0xf4>)
 8000da4:	2215      	movs	r2, #21
 8000da6:	70da      	strb	r2, [r3, #3]

		uint8_t *discoverableCommand;
		discoverableCommand=(uint8_t*)malloc(sizeof(ACI_GAP_SET_DISCOVERABLE)+sizeof(deviceName)+5);
 8000da8:	2019      	movs	r0, #25
 8000daa:	f003 f91b 	bl	8003fe4 <malloc>
 8000dae:	4603      	mov	r3, r0
 8000db0:	60bb      	str	r3, [r7, #8]
		memcpy(discoverableCommand,ACI_GAP_SET_DISCOVERABLE,sizeof(ACI_GAP_SET_DISCOVERABLE));
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	4a24      	ldr	r2, [pc, #144]	@ (8000e48 <setConnectable+0xf4>)
 8000db6:	461c      	mov	r4, r3
 8000db8:	4613      	mov	r3, r2
 8000dba:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000dbc:	6020      	str	r0, [r4, #0]
 8000dbe:	6061      	str	r1, [r4, #4]
 8000dc0:	60a2      	str	r2, [r4, #8]
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	7323      	strb	r3, [r4, #12]
		memcpy(discoverableCommand+sizeof(ACI_GAP_SET_DISCOVERABLE),localname,sizeof(deviceName)+5);
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	330d      	adds	r3, #13
 8000dca:	220c      	movs	r2, #12
 8000dcc:	68f9      	ldr	r1, [r7, #12]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f003 fb89 	bl	80044e6 <memcpy>

		// remove existing buffer content
		rxEvent=(uint8_t*)malloc(7);
 8000dd4:	2007      	movs	r0, #7
 8000dd6:	f003 f905 	bl	8003fe4 <malloc>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	607b      	str	r3, [r7, #4]
		res=fetchBleEvent(rxEvent,7);
 8000dde:	2107      	movs	r1, #7
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f7ff fe75 	bl	8000ad0 <fetchBleEvent>
 8000de6:	6038      	str	r0, [r7, #0]

		// send the command to make the peripheral discoverable
		sendCommand(discoverableCommand,sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE));
 8000de8:	2119      	movs	r1, #25
 8000dea:	68b8      	ldr	r0, [r7, #8]
 8000dec:	f7ff ff20 	bl	8000c30 <sendCommand>
		HAL_Delay(100);
 8000df0:	2064      	movs	r0, #100	@ 0x64
 8000df2:	f001 f9f9 	bl	80021e8 <HAL_Delay>
		res=fetchBleEvent(rxEvent,7);
 8000df6:	2107      	movs	r1, #7
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f7ff fe69 	bl	8000ad0 <fetchBleEvent>
 8000dfe:	6038      	str	r0, [r7, #0]
		if(res==BLE_OK){
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d10e      	bne.n	8000e24 <setConnectable+0xd0>
		   if(checkEventResp(rxEvent, ACI_GAP_SET_DISCOVERABLE_COMPLETE, 7)==BLE_OK){
 8000e06:	2207      	movs	r2, #7
 8000e08:	4910      	ldr	r1, [pc, #64]	@ (8000e4c <setConnectable+0xf8>)
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f7ff feea 	bl	8000be4 <checkEventResp>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d106      	bne.n	8000e24 <setConnectable+0xd0>
			  stackInitCompleteFlag|=0x80;
 8000e16:	4b0e      	ldr	r3, [pc, #56]	@ (8000e50 <setConnectable+0xfc>)
 8000e18:	881b      	ldrh	r3, [r3, #0]
 8000e1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e1e:	b29a      	uxth	r2, r3
 8000e20:	4b0b      	ldr	r3, [pc, #44]	@ (8000e50 <setConnectable+0xfc>)
 8000e22:	801a      	strh	r2, [r3, #0]
		   }
		}
		free(rxEvent);
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f003 f8e5 	bl	8003ff4 <free>
		free(discoverableCommand);
 8000e2a:	68b8      	ldr	r0, [r7, #8]
 8000e2c:	f003 f8e2 	bl	8003ff4 <free>
		free(localname);
 8000e30:	68f8      	ldr	r0, [r7, #12]
 8000e32:	f003 f8df 	bl	8003ff4 <free>
		HAL_Delay(10);
 8000e36:	200a      	movs	r0, #10
 8000e38:	f001 f9d6 	bl	80021e8 <HAL_Delay>
 }
 8000e3c:	bf00      	nop
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd90      	pop	{r4, r7, pc}
 8000e44:	2000010c 	.word	0x2000010c
 8000e48:	20000078 	.word	0x20000078
 8000e4c:	20000088 	.word	0x20000088
 8000e50:	200002e2 	.word	0x200002e2

08000e54 <BLE_command>:
 * @param sizeRes Expected size of the response result.
 * @param returnHandles Number of handles expected in the response (each handle occupies 2 bytes).
 * @return int Returns BLE_OK if the command was successfully executed and the event response is valid,
 *             or an error code if something went wrong.
 */
int BLE_command(uint8_t* command, int size, uint8_t* result, int sizeRes, int returnHandles){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
 8000e60:	603b      	str	r3, [r7, #0]
	   int response;

	   sendCommand(command,size);
 8000e62:	68b9      	ldr	r1, [r7, #8]
 8000e64:	68f8      	ldr	r0, [r7, #12]
 8000e66:	f7ff fee3 	bl	8000c30 <sendCommand>
	   rxEvent=(uint8_t*)malloc(sizeRes+2*returnHandles);
 8000e6a:	6a3b      	ldr	r3, [r7, #32]
 8000e6c:	005a      	lsls	r2, r3, #1
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	4413      	add	r3, r2
 8000e72:	4618      	mov	r0, r3
 8000e74:	f003 f8b6 	bl	8003fe4 <malloc>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	4b19      	ldr	r3, [pc, #100]	@ (8000ee4 <BLE_command+0x90>)
 8000e7e:	601a      	str	r2, [r3, #0]

	   long contatore=0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	613b      	str	r3, [r7, #16]
	   while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000e84:	e007      	b.n	8000e96 <BLE_command+0x42>
		   contatore++;
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	613b      	str	r3, [r7, #16]
		   if(contatore>30000){
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000e92:	4293      	cmp	r3, r2
 8000e94:	dc07      	bgt.n	8000ea6 <BLE_command+0x52>
	   while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000e96:	2140      	movs	r1, #64	@ 0x40
 8000e98:	4813      	ldr	r0, [pc, #76]	@ (8000ee8 <BLE_command+0x94>)
 8000e9a:	f001 fc85 	bl	80027a8 <HAL_GPIO_ReadPin>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d0f0      	beq.n	8000e86 <BLE_command+0x32>
 8000ea4:	e000      	b.n	8000ea8 <BLE_command+0x54>
			   break;
 8000ea6:	bf00      	nop
		   }
	   }


	   response=fetchBleEvent(rxEvent,sizeRes+returnHandles*2);
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee4 <BLE_command+0x90>)
 8000eaa:	6818      	ldr	r0, [r3, #0]
 8000eac:	6a3b      	ldr	r3, [r7, #32]
 8000eae:	005a      	lsls	r2, r3, #1
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f7ff fe0b 	bl	8000ad0 <fetchBleEvent>
 8000eba:	6178      	str	r0, [r7, #20]
	   if(response==BLE_OK){
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d107      	bne.n	8000ed2 <BLE_command+0x7e>
		   response=checkEventResp(rxEvent,result,sizeRes);
 8000ec2:	4b08      	ldr	r3, [pc, #32]	@ (8000ee4 <BLE_command+0x90>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	683a      	ldr	r2, [r7, #0]
 8000ec8:	6879      	ldr	r1, [r7, #4]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fe8a 	bl	8000be4 <checkEventResp>
 8000ed0:	6178      	str	r0, [r7, #20]
	   }
	   HAL_Delay(10);
 8000ed2:	200a      	movs	r0, #10
 8000ed4:	f001 f988 	bl	80021e8 <HAL_Delay>


	return response;
 8000ed8:	697b      	ldr	r3, [r7, #20]
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3718      	adds	r7, #24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200002e4 	.word	0x200002e4
 8000ee8:	48001000 	.word	0x48001000

08000eec <addService>:

void addService(uint8_t* UUID, uint8_t* handle, int attributes){
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af02      	add	r7, sp, #8
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]


	//memcpy
	memcpy(ADD_PRIMARY_SERVICE+5,UUID,16);
 8000ef8:	4b14      	ldr	r3, [pc, #80]	@ (8000f4c <addService+0x60>)
 8000efa:	2210      	movs	r2, #16
 8000efc:	68f9      	ldr	r1, [r7, #12]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f003 faf1 	bl	80044e6 <memcpy>
    ADD_PRIMARY_SERVICE[22]=attributes;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	4b11      	ldr	r3, [pc, #68]	@ (8000f50 <addService+0x64>)
 8000f0a:	759a      	strb	r2, [r3, #22]
	   if(BLE_command(ADD_PRIMARY_SERVICE,sizeof(ADD_PRIMARY_SERVICE),ADD_PRIMARY_SERVICE_COMPLETE,sizeof(ADD_PRIMARY_SERVICE_COMPLETE),1)==BLE_OK){
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	2307      	movs	r3, #7
 8000f12:	4a10      	ldr	r2, [pc, #64]	@ (8000f54 <addService+0x68>)
 8000f14:	2117      	movs	r1, #23
 8000f16:	480e      	ldr	r0, [pc, #56]	@ (8000f50 <addService+0x64>)
 8000f18:	f7ff ff9c 	bl	8000e54 <BLE_command>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d10a      	bne.n	8000f38 <addService+0x4c>
		   handle[0]=rxEvent[7];
 8000f22:	4b0d      	ldr	r3, [pc, #52]	@ (8000f58 <addService+0x6c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	79da      	ldrb	r2, [r3, #7]
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	701a      	strb	r2, [r3, #0]
		   handle[1]=rxEvent[8];
 8000f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f58 <addService+0x6c>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	3301      	adds	r3, #1
 8000f34:	7a12      	ldrb	r2, [r2, #8]
 8000f36:	701a      	strb	r2, [r3, #0]
	    }
	   free(rxEvent);
 8000f38:	4b07      	ldr	r3, [pc, #28]	@ (8000f58 <addService+0x6c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f003 f859 	bl	8003ff4 <free>
}
 8000f42:	bf00      	nop
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000095 	.word	0x20000095
 8000f50:	20000090 	.word	0x20000090
 8000f54:	200000a8 	.word	0x200000a8
 8000f58:	200002e4 	.word	0x200002e4

08000f5c <addCharacteristic>:

void addCharacteristic(uint8_t* UUID,uint8_t* handleChar, uint8_t* handleService, uint8_t maxsize, uint8_t proprieties){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af02      	add	r7, sp, #8
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
 8000f68:	70fb      	strb	r3, [r7, #3]
    memcpy(ADD_CUSTOM_CHAR+7,UUID,16);
 8000f6a:	4b19      	ldr	r3, [pc, #100]	@ (8000fd0 <addCharacteristic+0x74>)
 8000f6c:	2210      	movs	r2, #16
 8000f6e:	68f9      	ldr	r1, [r7, #12]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f003 fab8 	bl	80044e6 <memcpy>

	ADD_CUSTOM_CHAR[4]= handleService[0];
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	781a      	ldrb	r2, [r3, #0]
 8000f7a:	4b16      	ldr	r3, [pc, #88]	@ (8000fd4 <addCharacteristic+0x78>)
 8000f7c:	711a      	strb	r2, [r3, #4]
	ADD_CUSTOM_CHAR[5]= handleService[1];
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	785a      	ldrb	r2, [r3, #1]
 8000f82:	4b14      	ldr	r3, [pc, #80]	@ (8000fd4 <addCharacteristic+0x78>)
 8000f84:	715a      	strb	r2, [r3, #5]
	ADD_CUSTOM_CHAR[23]= maxsize;
 8000f86:	4a13      	ldr	r2, [pc, #76]	@ (8000fd4 <addCharacteristic+0x78>)
 8000f88:	78fb      	ldrb	r3, [r7, #3]
 8000f8a:	75d3      	strb	r3, [r2, #23]
	ADD_CUSTOM_CHAR[25]= proprieties;
 8000f8c:	4a11      	ldr	r2, [pc, #68]	@ (8000fd4 <addCharacteristic+0x78>)
 8000f8e:	7e3b      	ldrb	r3, [r7, #24]
 8000f90:	7653      	strb	r3, [r2, #25]
	if(BLE_command(ADD_CUSTOM_CHAR,sizeof(ADD_CUSTOM_CHAR),ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),1)==BLE_OK){
 8000f92:	2301      	movs	r3, #1
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	2307      	movs	r3, #7
 8000f98:	4a0f      	ldr	r2, [pc, #60]	@ (8000fd8 <addCharacteristic+0x7c>)
 8000f9a:	211e      	movs	r1, #30
 8000f9c:	480d      	ldr	r0, [pc, #52]	@ (8000fd4 <addCharacteristic+0x78>)
 8000f9e:	f7ff ff59 	bl	8000e54 <BLE_command>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d10a      	bne.n	8000fbe <addCharacteristic+0x62>
        handleChar[0]=rxEvent[7];
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8000fdc <addCharacteristic+0x80>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	79da      	ldrb	r2, [r3, #7]
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	701a      	strb	r2, [r3, #0]
	    handleChar[1]=rxEvent[8];
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000fdc <addCharacteristic+0x80>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	7a12      	ldrb	r2, [r2, #8]
 8000fbc:	701a      	strb	r2, [r3, #0]
	}
	free(rxEvent);
 8000fbe:	4b07      	ldr	r3, [pc, #28]	@ (8000fdc <addCharacteristic+0x80>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f003 f816 	bl	8003ff4 <free>
}
 8000fc8:	bf00      	nop
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	200000b7 	.word	0x200000b7
 8000fd4:	200000b0 	.word	0x200000b0
 8000fd8:	200000d0 	.word	0x200000d0
 8000fdc:	200002e4 	.word	0x200002e4

08000fe0 <updateCharValue>:

void updateCharValue(uint8_t* handleService,uint8_t* handleChar, int offset, int size,uint8_t* data){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af02      	add	r7, sp, #8
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
 8000fec:	603b      	str	r3, [r7, #0]
	UPDATE_CHAR[3]=size+6;
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	3306      	adds	r3, #6
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	4b21      	ldr	r3, [pc, #132]	@ (800107c <updateCharValue+0x9c>)
 8000ff8:	70da      	strb	r2, [r3, #3]
	UPDATE_CHAR[4]=handleService[0];
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	781a      	ldrb	r2, [r3, #0]
 8000ffe:	4b1f      	ldr	r3, [pc, #124]	@ (800107c <updateCharValue+0x9c>)
 8001000:	711a      	strb	r2, [r3, #4]
	UPDATE_CHAR[5]=handleService[1];
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	785a      	ldrb	r2, [r3, #1]
 8001006:	4b1d      	ldr	r3, [pc, #116]	@ (800107c <updateCharValue+0x9c>)
 8001008:	715a      	strb	r2, [r3, #5]
	UPDATE_CHAR[6]=handleChar[0];
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	781a      	ldrb	r2, [r3, #0]
 800100e:	4b1b      	ldr	r3, [pc, #108]	@ (800107c <updateCharValue+0x9c>)
 8001010:	719a      	strb	r2, [r3, #6]
	UPDATE_CHAR[7]=handleChar[1];
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	785a      	ldrb	r2, [r3, #1]
 8001016:	4b19      	ldr	r3, [pc, #100]	@ (800107c <updateCharValue+0x9c>)
 8001018:	71da      	strb	r2, [r3, #7]
	UPDATE_CHAR[8]=offset;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4b17      	ldr	r3, [pc, #92]	@ (800107c <updateCharValue+0x9c>)
 8001020:	721a      	strb	r2, [r3, #8]
	UPDATE_CHAR[9]=size;
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4b15      	ldr	r3, [pc, #84]	@ (800107c <updateCharValue+0x9c>)
 8001028:	725a      	strb	r2, [r3, #9]

	uint8_t* commandComplete;
	commandComplete=(uint8_t*)malloc(10+size);
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	330a      	adds	r3, #10
 800102e:	4618      	mov	r0, r3
 8001030:	f002 ffd8 	bl	8003fe4 <malloc>
 8001034:	4603      	mov	r3, r0
 8001036:	617b      	str	r3, [r7, #20]
	memcpy(commandComplete,UPDATE_CHAR,10);
 8001038:	220a      	movs	r2, #10
 800103a:	4910      	ldr	r1, [pc, #64]	@ (800107c <updateCharValue+0x9c>)
 800103c:	6978      	ldr	r0, [r7, #20]
 800103e:	f003 fa52 	bl	80044e6 <memcpy>
	memcpy(commandComplete+10,data,size);
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	330a      	adds	r3, #10
 8001046:	683a      	ldr	r2, [r7, #0]
 8001048:	6a39      	ldr	r1, [r7, #32]
 800104a:	4618      	mov	r0, r3
 800104c:	f003 fa4b 	bl	80044e6 <memcpy>

	BLE_command(commandComplete,10+size,ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),0);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	f103 010a 	add.w	r1, r3, #10
 8001056:	2300      	movs	r3, #0
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	2307      	movs	r3, #7
 800105c:	4a08      	ldr	r2, [pc, #32]	@ (8001080 <updateCharValue+0xa0>)
 800105e:	6978      	ldr	r0, [r7, #20]
 8001060:	f7ff fef8 	bl	8000e54 <BLE_command>

	free(commandComplete);
 8001064:	6978      	ldr	r0, [r7, #20]
 8001066:	f002 ffc5 	bl	8003ff4 <free>
	free(rxEvent);
 800106a:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <updateCharValue+0xa4>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4618      	mov	r0, r3
 8001070:	f002 ffc0 	bl	8003ff4 <free>
}
 8001074:	bf00      	nop
 8001076:	3718      	adds	r7, #24
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	200000d8 	.word	0x200000d8
 8001080:	200000d0 	.word	0x200000d0
 8001084:	200002e4 	.word	0x200002e4

08001088 <disconnectBLE>:

/** 
 * @brief Disconnects the peripheral from the central
*/
void disconnectBLE(){
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af02      	add	r7, sp, #8
	if (connectionHandler[0] == -1 && connectionHandler[1] == -1){
 800108e:	4b24      	ldr	r3, [pc, #144]	@ (8001120 <disconnectBLE+0x98>)
 8001090:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001098:	d105      	bne.n	80010a6 <disconnectBLE+0x1e>
 800109a:	4b21      	ldr	r3, [pc, #132]	@ (8001120 <disconnectBLE+0x98>)
 800109c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a4:	d037      	beq.n	8001116 <disconnectBLE+0x8e>
	   // should not be -1
	   return;
	}
	uint8_t command[7];
	memcpy(command, DISCONNECT, 4);
 80010a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001124 <disconnectBLE+0x9c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	607b      	str	r3, [r7, #4]
	command[4] = connectionHandler[0];
 80010ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001120 <disconnectBLE+0x98>)
 80010ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	723b      	strb	r3, [r7, #8]
	command[5] = connectionHandler[1];
 80010b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001120 <disconnectBLE+0x98>)
 80010b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	727b      	strb	r3, [r7, #9]
	command[6] = 0x13;
 80010c0:	2313      	movs	r3, #19
 80010c2:	72bb      	strb	r3, [r7, #10]
	if(BLE_command(command,sizeof(command),EVENT_DISCONNECT_PENDING,7,0)==BLE_OK){
 80010c4:	1d38      	adds	r0, r7, #4
 80010c6:	2300      	movs	r3, #0
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	2307      	movs	r3, #7
 80010cc:	4a16      	ldr	r2, [pc, #88]	@ (8001128 <disconnectBLE+0xa0>)
 80010ce:	2107      	movs	r1, #7
 80010d0:	f7ff fec0 	bl	8000e54 <BLE_command>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d11e      	bne.n	8001118 <disconnectBLE+0x90>
		int result=fetchBleEvent(buffer,127);
 80010da:	217f      	movs	r1, #127	@ 0x7f
 80010dc:	4813      	ldr	r0, [pc, #76]	@ (800112c <disconnectBLE+0xa4>)
 80010de:	f7ff fcf7 	bl	8000ad0 <fetchBleEvent>
 80010e2:	60f8      	str	r0, [r7, #12]
		if(result==BLE_OK){
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d10f      	bne.n	800110a <disconnectBLE+0x82>
			 if(checkEventResp(buffer,EVENT_DISCONNECTED,4)==BLE_OK){
 80010ea:	2204      	movs	r2, #4
 80010ec:	4910      	ldr	r1, [pc, #64]	@ (8001130 <disconnectBLE+0xa8>)
 80010ee:	480f      	ldr	r0, [pc, #60]	@ (800112c <disconnectBLE+0xa4>)
 80010f0:	f7ff fd78 	bl	8000be4 <checkEventResp>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d107      	bne.n	800110a <disconnectBLE+0x82>
				 //setConnectable();
				 connectionHandler[0] = -1;
 80010fa:	4b09      	ldr	r3, [pc, #36]	@ (8001120 <disconnectBLE+0x98>)
 80010fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001100:	801a      	strh	r2, [r3, #0]
				 connectionHandler[1] = -1;
 8001102:	4b07      	ldr	r3, [pc, #28]	@ (8001120 <disconnectBLE+0x98>)
 8001104:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001108:	805a      	strh	r2, [r3, #2]
			 }
		}
	free(rxEvent);
 800110a:	4b0a      	ldr	r3, [pc, #40]	@ (8001134 <disconnectBLE+0xac>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4618      	mov	r0, r3
 8001110:	f002 ff70 	bl	8003ff4 <free>
 8001114:	e000      	b.n	8001118 <disconnectBLE+0x90>
	   return;
 8001116:	bf00      	nop
	}
}
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000144 	.word	0x20000144
 8001124:	200000e8 	.word	0x200000e8
 8001128:	200000f0 	.word	0x200000f0
 800112c:	200001d8 	.word	0x200001d8
 8001130:	200000ec 	.word	0x200000ec
 8001134:	200002e4 	.word	0x200002e4

08001138 <setDiscoverability>:
/**
 * DO NOT CHANGE FUNCTION definition
 * @brief Sets the discoverability of the peripheral
 * @param mode 0 => Non Discoverable, 1 => Discoverable
 * */
void setDiscoverability(uint8_t mode){
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af02      	add	r7, sp, #8
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
	if (mode == 1){
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d102      	bne.n	800114e <setDiscoverability+0x16>
		setConnectable();
 8001148:	f7ff fe04 	bl	8000d54 <setConnectable>
		free(rxEvent);
	}
	else{
		// Do nothing
	}
}
 800114c:	e00f      	b.n	800116e <setDiscoverability+0x36>
	else if (mode == 0){
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d10c      	bne.n	800116e <setDiscoverability+0x36>
		if(BLE_command(ACI_GAP_SET_NON_DISCOVERABLE,sizeof(ACI_GAP_SET_NON_DISCOVERABLE),ACI_GAP_SET_NON_DISCOVERABLE_COMPLETE,sizeof(ACI_GAP_SET_NON_DISCOVERABLE_COMPLETE),0)==BLE_OK){
 8001154:	2300      	movs	r3, #0
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	2307      	movs	r3, #7
 800115a:	4a07      	ldr	r2, [pc, #28]	@ (8001178 <setDiscoverability+0x40>)
 800115c:	2104      	movs	r1, #4
 800115e:	4807      	ldr	r0, [pc, #28]	@ (800117c <setDiscoverability+0x44>)
 8001160:	f7ff fe78 	bl	8000e54 <BLE_command>
		free(rxEvent);
 8001164:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <setDiscoverability+0x48>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f002 ff43 	bl	8003ff4 <free>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000104 	.word	0x20000104
 800117c:	20000100 	.word	0x20000100
 8001180:	200002e4 	.word	0x200002e4

08001184 <i2c_init>:
 * i2c.c
 */
#include "i2c.h"
#include <stm32l475xx.h>

void i2c_init() {
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
    // enable GPIOB for PB10 and PB11
    // enable I2C2
    RCC->APB1ENR1 |= RCC_APB1ENR1_I2C2EN;
 8001188:	4b2a      	ldr	r3, [pc, #168]	@ (8001234 <i2c_init+0xb0>)
 800118a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800118c:	4a29      	ldr	r2, [pc, #164]	@ (8001234 <i2c_init+0xb0>)
 800118e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001192:	6593      	str	r3, [r2, #88]	@ 0x58
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8001194:	4b27      	ldr	r3, [pc, #156]	@ (8001234 <i2c_init+0xb0>)
 8001196:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001198:	4a26      	ldr	r2, [pc, #152]	@ (8001234 <i2c_init+0xb0>)
 800119a:	f043 0302 	orr.w	r3, r3, #2
 800119e:	64d3      	str	r3, [r2, #76]	@ 0x4c

    // clear bits and set PB10 and PB11 to alternate function mdoe
    GPIOB->MODER &= ~((0b11 << (20)) | (0b11 << (22))); //20 bits for PB10, 22 bits for PB11
 80011a0:	4b25      	ldr	r3, [pc, #148]	@ (8001238 <i2c_init+0xb4>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a24      	ldr	r2, [pc, #144]	@ (8001238 <i2c_init+0xb4>)
 80011a6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80011aa:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= ((0b10 << (20)) | (0b10 << (22))); //20 bits for PB10, 22 bits for PB11
 80011ac:	4b22      	ldr	r3, [pc, #136]	@ (8001238 <i2c_init+0xb4>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a21      	ldr	r2, [pc, #132]	@ (8001238 <i2c_init+0xb4>)
 80011b2:	f443 0320 	orr.w	r3, r3, #10485760	@ 0xa00000
 80011b6:	6013      	str	r3, [r2, #0]

    // set AF4 for PB10 and PB11
    // 0100 = AF4
    GPIOB->AFR[1] &= ~((0b1111 << 8) | (0b1111 << 12)); // reset AFRH for PB10 and PB11
 80011b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001238 <i2c_init+0xb4>)
 80011ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011bc:	4a1e      	ldr	r2, [pc, #120]	@ (8001238 <i2c_init+0xb4>)
 80011be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80011c2:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[1] |= ((0b0100 << 8) | (0b0100 << 12)); // PB10 uses [8:11], PB11 uses [12:15]
 80011c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001238 <i2c_init+0xb4>)
 80011c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001238 <i2c_init+0xb4>)
 80011ca:	f443 4388 	orr.w	r3, r3, #17408	@ 0x4400
 80011ce:	6253      	str	r3, [r2, #36]	@ 0x24

    //Set bit 10 and 11 to open drain
    GPIOB->OTYPER |= (0b1 << 10) | (0b1 << 11);
 80011d0:	4b19      	ldr	r3, [pc, #100]	@ (8001238 <i2c_init+0xb4>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	4a18      	ldr	r2, [pc, #96]	@ (8001238 <i2c_init+0xb4>)
 80011d6:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 80011da:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= ((0b11 << 20) | (0b11 << 22));
 80011dc:	4b16      	ldr	r3, [pc, #88]	@ (8001238 <i2c_init+0xb4>)
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	4a15      	ldr	r2, [pc, #84]	@ (8001238 <i2c_init+0xb4>)
 80011e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011e6:	6093      	str	r3, [r2, #8]
    //Clear bit 20 - 23
    GPIOB->PUPDR &= ~((0b11 << 20) | (0b11 << 22));
 80011e8:	4b13      	ldr	r3, [pc, #76]	@ (8001238 <i2c_init+0xb4>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	4a12      	ldr	r2, [pc, #72]	@ (8001238 <i2c_init+0xb4>)
 80011ee:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80011f2:	60d3      	str	r3, [r2, #12]
    //Set 20 - 23 pull up mode
    GPIOB->PUPDR |= ((0b11 << 20) | (0b11 << 22));
 80011f4:	4b10      	ldr	r3, [pc, #64]	@ (8001238 <i2c_init+0xb4>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	4a0f      	ldr	r2, [pc, #60]	@ (8001238 <i2c_init+0xb4>)
 80011fa:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011fe:	60d3      	str	r3, [r2, #12]
	//PRESC   1
	//SCLDEL  0x3
	//SDADEL  0x2
	//SCLH    0x3
	//SCLL    0x9
    I2C2->CR1 &= ~I2C_CR1_PE;
 8001200:	4b0e      	ldr	r3, [pc, #56]	@ (800123c <i2c_init+0xb8>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a0d      	ldr	r2, [pc, #52]	@ (800123c <i2c_init+0xb8>)
 8001206:	f023 0301 	bic.w	r3, r3, #1
 800120a:	6013      	str	r3, [r2, #0]
    I2C2->CR1 |= 1<<1;
 800120c:	4b0b      	ldr	r3, [pc, #44]	@ (800123c <i2c_init+0xb8>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a0a      	ldr	r2, [pc, #40]	@ (800123c <i2c_init+0xb8>)
 8001212:	f043 0302 	orr.w	r3, r3, #2
 8001216:	6013      	str	r3, [r2, #0]
    I2C2->TIMINGR = 0x1042C3C7; // 0x10320309 // 0x20420F13 // 0x1042C3C7 / 10KHz
 8001218:	4b08      	ldr	r3, [pc, #32]	@ (800123c <i2c_init+0xb8>)
 800121a:	4a09      	ldr	r2, [pc, #36]	@ (8001240 <i2c_init+0xbc>)
 800121c:	611a      	str	r2, [r3, #16]
    I2C2->CR1 |= I2C_CR1_PE;
 800121e:	4b07      	ldr	r3, [pc, #28]	@ (800123c <i2c_init+0xb8>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a06      	ldr	r2, [pc, #24]	@ (800123c <i2c_init+0xb8>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	6013      	str	r3, [r2, #0]
}
 800122a:	bf00      	nop
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	40021000 	.word	0x40021000
 8001238:	48000400 	.word	0x48000400
 800123c:	40005800 	.word	0x40005800
 8001240:	1042c3c7 	.word	0x1042c3c7

08001244 <i2c_transaction>:

uint8_t i2c_transaction(uint8_t address, uint8_t dir, uint8_t* data, uint8_t len) {
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	603a      	str	r2, [r7, #0]
 800124c:	461a      	mov	r2, r3
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
 8001252:	460b      	mov	r3, r1
 8001254:	71bb      	strb	r3, [r7, #6]
 8001256:	4613      	mov	r3, r2
 8001258:	717b      	strb	r3, [r7, #5]
    I2C2->CR2 = 0; 
 800125a:	4b4e      	ldr	r3, [pc, #312]	@ (8001394 <i2c_transaction+0x150>)
 800125c:	2200      	movs	r2, #0
 800125e:	605a      	str	r2, [r3, #4]

    uint32_t cr2_value = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	60fb      	str	r3, [r7, #12]

	//bit 0 is R/W flag)
	cr2_value |= (address << 1);
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	68fa      	ldr	r2, [r7, #12]
 800126a:	4313      	orrs	r3, r2
 800126c:	60fb      	str	r3, [r7, #12]
	//number of bytes to transfer
	cr2_value |= (len << 16);
 800126e:	797b      	ldrb	r3, [r7, #5]
 8001270:	041b      	lsls	r3, r3, #16
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	4313      	orrs	r3, r2
 8001276:	60fb      	str	r3, [r7, #12]
	// set the direction of transfer
	cr2_value |= ((dir & 0b1) << 10); // dir is 10th bit in CR register
 8001278:	79bb      	ldrb	r3, [r7, #6]
 800127a:	029b      	lsls	r3, r3, #10
 800127c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	4313      	orrs	r3, r2
 8001284:	60fb      	str	r3, [r7, #12]
	if (dir == 1) {
 8001286:	79bb      	ldrb	r3, [r7, #6]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d103      	bne.n	8001294 <i2c_transaction+0x50>
		cr2_value |= I2C_CR2_RD_WRN; // set to read mode
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001292:	60fb      	str	r3, [r7, #12]
	}
	// Start
	cr2_value |= I2C_CR2_START; // start transaction
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800129a:	60fb      	str	r3, [r7, #12]
	I2C2->CR2 = cr2_value;
 800129c:	4a3d      	ldr	r2, [pc, #244]	@ (8001394 <i2c_transaction+0x150>)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	6053      	str	r3, [r2, #4]

    if (dir == 0) { // writing
 80012a2:	79bb      	ldrb	r3, [r7, #6]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d138      	bne.n	800131a <i2c_transaction+0xd6>
        for (uint8_t i = 0; i < len; i++) {
 80012a8:	2300      	movs	r3, #0
 80012aa:	72fb      	strb	r3, [r7, #11]
 80012ac:	e030      	b.n	8001310 <i2c_transaction+0xcc>
            //I2C_ISR_TXIS (bit 1 in ISR) show if the transmit data register is empty and ready for new data.
		    while (((I2C2->ISR & I2C_ISR_TXIS) == 0) &&
 80012ae:	bf00      	nop
 80012b0:	4b38      	ldr	r3, [pc, #224]	@ (8001394 <i2c_transaction+0x150>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	f003 0302 	and.w	r3, r3, #2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d105      	bne.n	80012c8 <i2c_transaction+0x84>
	                   ((I2C2->ISR & I2C_ISR_NACKF) == 0)); //Wait for TXIS flag
 80012bc:	4b35      	ldr	r3, [pc, #212]	@ (8001394 <i2c_transaction+0x150>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	f003 0310 	and.w	r3, r3, #16
		    while (((I2C2->ISR & I2C_ISR_TXIS) == 0) &&
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d0f3      	beq.n	80012b0 <i2c_transaction+0x6c>

		    if (I2C2->ISR & I2C_ISR_NACKF) {
 80012c8:	4b32      	ldr	r3, [pc, #200]	@ (8001394 <i2c_transaction+0x150>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	f003 0310 	and.w	r3, r3, #16
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d014      	beq.n	80012fe <i2c_transaction+0xba>
		       I2C2->CR2 |= I2C_CR2_STOP;
 80012d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001394 <i2c_transaction+0x150>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	4a2e      	ldr	r2, [pc, #184]	@ (8001394 <i2c_transaction+0x150>)
 80012da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012de:	6053      	str	r3, [r2, #4]
		       while ((I2C2->ISR & I2C_ISR_STOPF) == 0);
 80012e0:	bf00      	nop
 80012e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001394 <i2c_transaction+0x150>)
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	f003 0320 	and.w	r3, r3, #32
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0f9      	beq.n	80012e2 <i2c_transaction+0x9e>
		       I2C2->ICR |= I2C_ICR_STOPCF;
 80012ee:	4b29      	ldr	r3, [pc, #164]	@ (8001394 <i2c_transaction+0x150>)
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	4a28      	ldr	r2, [pc, #160]	@ (8001394 <i2c_transaction+0x150>)
 80012f4:	f043 0320 	orr.w	r3, r3, #32
 80012f8:	61d3      	str	r3, [r2, #28]
		       return 1; 
 80012fa:	2301      	movs	r3, #1
 80012fc:	e043      	b.n	8001386 <i2c_transaction+0x142>
		    }

		    I2C2->TXDR = data[i]; //Write data to TXDR
 80012fe:	7afb      	ldrb	r3, [r7, #11]
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	4413      	add	r3, r2
 8001304:	781a      	ldrb	r2, [r3, #0]
 8001306:	4b23      	ldr	r3, [pc, #140]	@ (8001394 <i2c_transaction+0x150>)
 8001308:	629a      	str	r2, [r3, #40]	@ 0x28
        for (uint8_t i = 0; i < len; i++) {
 800130a:	7afb      	ldrb	r3, [r7, #11]
 800130c:	3301      	adds	r3, #1
 800130e:	72fb      	strb	r3, [r7, #11]
 8001310:	7afa      	ldrb	r2, [r7, #11]
 8001312:	797b      	ldrb	r3, [r7, #5]
 8001314:	429a      	cmp	r2, r3
 8001316:	d3ca      	bcc.n	80012ae <i2c_transaction+0x6a>
 8001318:	e01a      	b.n	8001350 <i2c_transaction+0x10c>
        }
    }
    else if (dir == 1) { // reading
 800131a:	79bb      	ldrb	r3, [r7, #6]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d117      	bne.n	8001350 <i2c_transaction+0x10c>
        for (uint8_t i = 0; i < len; i++) {
 8001320:	2300      	movs	r3, #0
 8001322:	72bb      	strb	r3, [r7, #10]
 8001324:	e010      	b.n	8001348 <i2c_transaction+0x104>
		    while ((I2C2->ISR & I2C_ISR_RXNE) == 0); //Wait RXNE flag
 8001326:	bf00      	nop
 8001328:	4b1a      	ldr	r3, [pc, #104]	@ (8001394 <i2c_transaction+0x150>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	f003 0304 	and.w	r3, r3, #4
 8001330:	2b00      	cmp	r3, #0
 8001332:	d0f9      	beq.n	8001328 <i2c_transaction+0xe4>
		    data[i] = I2C2->RXDR; //Read from RXDR
 8001334:	4b17      	ldr	r3, [pc, #92]	@ (8001394 <i2c_transaction+0x150>)
 8001336:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001338:	7abb      	ldrb	r3, [r7, #10]
 800133a:	683a      	ldr	r2, [r7, #0]
 800133c:	4413      	add	r3, r2
 800133e:	b2ca      	uxtb	r2, r1
 8001340:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 0; i < len; i++) {
 8001342:	7abb      	ldrb	r3, [r7, #10]
 8001344:	3301      	adds	r3, #1
 8001346:	72bb      	strb	r3, [r7, #10]
 8001348:	7aba      	ldrb	r2, [r7, #10]
 800134a:	797b      	ldrb	r3, [r7, #5]
 800134c:	429a      	cmp	r2, r3
 800134e:	d3ea      	bcc.n	8001326 <i2c_transaction+0xe2>
		}
    }

    while((I2C2->ISR & I2C_ISR_TC) == 0); // wait for transfer to complete
 8001350:	bf00      	nop
 8001352:	4b10      	ldr	r3, [pc, #64]	@ (8001394 <i2c_transaction+0x150>)
 8001354:	699b      	ldr	r3, [r3, #24]
 8001356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800135a:	2b00      	cmp	r3, #0
 800135c:	d0f9      	beq.n	8001352 <i2c_transaction+0x10e>
    // set stop bit after writing/ reading has finished
    I2C2->CR2 |= I2C_CR2_STOP;
 800135e:	4b0d      	ldr	r3, [pc, #52]	@ (8001394 <i2c_transaction+0x150>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	4a0c      	ldr	r2, [pc, #48]	@ (8001394 <i2c_transaction+0x150>)
 8001364:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001368:	6053      	str	r3, [r2, #4]
    while((I2C2->ISR & I2C_ISR_STOPF) == 0); // wait for stop bit
 800136a:	bf00      	nop
 800136c:	4b09      	ldr	r3, [pc, #36]	@ (8001394 <i2c_transaction+0x150>)
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	f003 0320 	and.w	r3, r3, #32
 8001374:	2b00      	cmp	r3, #0
 8001376:	d0f9      	beq.n	800136c <i2c_transaction+0x128>
    I2C2->ICR |= I2C_ISR_STOPF; // clear stop bit in interrupt register
 8001378:	4b06      	ldr	r3, [pc, #24]	@ (8001394 <i2c_transaction+0x150>)
 800137a:	69db      	ldr	r3, [r3, #28]
 800137c:	4a05      	ldr	r2, [pc, #20]	@ (8001394 <i2c_transaction+0x150>)
 800137e:	f043 0320 	orr.w	r3, r3, #32
 8001382:	61d3      	str	r3, [r2, #28]
    return 0;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40005800 	.word	0x40005800

08001398 <leds_init>:

/* Include memory map of our MCU */
#include <stm32l475xx.h>

void leds_init()
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  RCC->AHB2ENR |= (1 << 0);
 800139c:	4b32      	ldr	r3, [pc, #200]	@ (8001468 <leds_init+0xd0>)
 800139e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a0:	4a31      	ldr	r2, [pc, #196]	@ (8001468 <leds_init+0xd0>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  RCC->AHB2ENR |= (1 << 1);
 80013a8:	4b2f      	ldr	r3, [pc, #188]	@ (8001468 <leds_init+0xd0>)
 80013aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ac:	4a2e      	ldr	r2, [pc, #184]	@ (8001468 <leds_init+0xd0>)
 80013ae:	f043 0302 	orr.w	r3, r3, #2
 80013b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* Configure PA5 as an output by clearing all bits and setting the mode */
  GPIOA->MODER &= ~GPIO_MODER_MODE5;
 80013b4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80013be:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80013c2:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= GPIO_MODER_MODE5_0;
 80013c4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80013ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013d2:	6013      	str	r3, [r2, #0]

  /* Configure PB14 as an output by clearing all bits and setting mode */
  GPIOB->MODER &= ~GPIO_MODER_MODE14;
 80013d4:	4b25      	ldr	r3, [pc, #148]	@ (800146c <leds_init+0xd4>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a24      	ldr	r2, [pc, #144]	@ (800146c <leds_init+0xd4>)
 80013da:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80013de:	6013      	str	r3, [r2, #0]
  GPIOB->MODER |= GPIO_MODER_MODE14_0;
 80013e0:	4b22      	ldr	r3, [pc, #136]	@ (800146c <leds_init+0xd4>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a21      	ldr	r2, [pc, #132]	@ (800146c <leds_init+0xd4>)
 80013e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013ea:	6013      	str	r3, [r2, #0]

  /* Configure the GPIO output as push pull (transistor for high and low) */
  GPIOA->OTYPER &= ~GPIO_OTYPER_OT5;
 80013ec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80013f6:	f023 0320 	bic.w	r3, r3, #32
 80013fa:	6053      	str	r3, [r2, #4]
  GPIOB->OTYPER &= ~GPIO_OTYPER_OT14;
 80013fc:	4b1b      	ldr	r3, [pc, #108]	@ (800146c <leds_init+0xd4>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	4a1a      	ldr	r2, [pc, #104]	@ (800146c <leds_init+0xd4>)
 8001402:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001406:	6053      	str	r3, [r2, #4]

  /* Disable the internal pull-up and pull-down resistors */
  GPIOA->PUPDR &= GPIO_PUPDR_PUPD5;
 8001408:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001412:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001416:	60d3      	str	r3, [r2, #12]
  GPIOB->PUPDR &= GPIO_PUPDR_PUPD14;
 8001418:	4b14      	ldr	r3, [pc, #80]	@ (800146c <leds_init+0xd4>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	4a13      	ldr	r2, [pc, #76]	@ (800146c <leds_init+0xd4>)
 800141e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001422:	60d3      	str	r3, [r2, #12]

  /* Configure the GPIO to use low speed mode */
  GPIOA->OSPEEDR |= (0x3 << GPIO_OSPEEDR_OSPEED5_Pos);
 8001424:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800142e:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8001432:	6093      	str	r3, [r2, #8]
  GPIOB->OSPEEDR |= (0x3 << GPIO_OSPEEDR_OSPEED14_Pos);
 8001434:	4b0d      	ldr	r3, [pc, #52]	@ (800146c <leds_init+0xd4>)
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	4a0c      	ldr	r2, [pc, #48]	@ (800146c <leds_init+0xd4>)
 800143a:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 800143e:	6093      	str	r3, [r2, #8]

  /* Turn off the LED */
  GPIOA->ODR &= ~GPIO_ODR_OD5;
 8001440:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800144a:	f023 0320 	bic.w	r3, r3, #32
 800144e:	6153      	str	r3, [r2, #20]
  GPIOB->ODR &= ~GPIO_ODR_OD14;
 8001450:	4b06      	ldr	r3, [pc, #24]	@ (800146c <leds_init+0xd4>)
 8001452:	695b      	ldr	r3, [r3, #20]
 8001454:	4a05      	ldr	r2, [pc, #20]	@ (800146c <leds_init+0xd4>)
 8001456:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800145a:	6153      	str	r3, [r2, #20]
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	40021000 	.word	0x40021000
 800146c:	48000400 	.word	0x48000400

08001470 <lsm6dsl_init>:
#define INT1_CTRL 0x0D
#define STATUS_REG 0x1E
#define OUTX_L_XL 0x28 // start of accelerometer outpuot


void lsm6dsl_init() {
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
    uint8_t configure_accel_data[2] = {CTRL1_XL, 0x60};
 8001476:	f246 0310 	movw	r3, #24592	@ 0x6010
 800147a:	81bb      	strh	r3, [r7, #12]
    i2c_transaction(LSM6DSL_ADDR, 0, configure_accel_data, 2);
 800147c:	f107 020c 	add.w	r2, r7, #12
 8001480:	2302      	movs	r3, #2
 8001482:	2100      	movs	r1, #0
 8001484:	206a      	movs	r0, #106	@ 0x6a
 8001486:	f7ff fedd 	bl	8001244 <i2c_transaction>

    uint8_t configure_gyro_data[2] = {CTRL2_G, 0x60};
 800148a:	f246 0311 	movw	r3, #24593	@ 0x6011
 800148e:	813b      	strh	r3, [r7, #8]
    i2c_transaction(LSM6DSL_ADDR, 0, configure_gyro_data, 2);
 8001490:	f107 0208 	add.w	r2, r7, #8
 8001494:	2302      	movs	r3, #2
 8001496:	2100      	movs	r1, #0
 8001498:	206a      	movs	r0, #106	@ 0x6a
 800149a:	f7ff fed3 	bl	8001244 <i2c_transaction>

    //enable data ready interrupt for accelerometer
    uint8_t int1_data[3] = {INT1_CTRL, 0x01, 0x02};
 800149e:	4a09      	ldr	r2, [pc, #36]	@ (80014c4 <lsm6dsl_init+0x54>)
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	6812      	ldr	r2, [r2, #0]
 80014a4:	4611      	mov	r1, r2
 80014a6:	8019      	strh	r1, [r3, #0]
 80014a8:	3302      	adds	r3, #2
 80014aa:	0c12      	lsrs	r2, r2, #16
 80014ac:	701a      	strb	r2, [r3, #0]
    i2c_transaction(LSM6DSL_ADDR, 0, int1_data, 3);
 80014ae:	1d3a      	adds	r2, r7, #4
 80014b0:	2303      	movs	r3, #3
 80014b2:	2100      	movs	r1, #0
 80014b4:	206a      	movs	r0, #106	@ 0x6a
 80014b6:	f7ff fec5 	bl	8001244 <i2c_transaction>
}
 80014ba:	bf00      	nop
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	08005238 	.word	0x08005238

080014c8 <lsm6dsl_read_xyz>:

void lsm6dsl_read_xyz(int16_t* x, int16_t* y, int16_t* z) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b088      	sub	sp, #32
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]
    uint8_t status;
    uint8_t status_reg_addr = STATUS_REG;
 80014d4:	231e      	movs	r3, #30
 80014d6:	77bb      	strb	r3, [r7, #30]

    i2c_transaction(LSM6DSL_ADDR, 0, &status_reg_addr, 1);
 80014d8:	f107 021e 	add.w	r2, r7, #30
 80014dc:	2301      	movs	r3, #1
 80014de:	2100      	movs	r1, #0
 80014e0:	206a      	movs	r0, #106	@ 0x6a
 80014e2:	f7ff feaf 	bl	8001244 <i2c_transaction>
    i2c_transaction(LSM6DSL_ADDR, 1, &status, 1);
 80014e6:	f107 021f 	add.w	r2, r7, #31
 80014ea:	2301      	movs	r3, #1
 80014ec:	2101      	movs	r1, #1
 80014ee:	206a      	movs	r0, #106	@ 0x6a
 80014f0:	f7ff fea8 	bl	8001244 <i2c_transaction>
    while((status & 0x01) == 0);
 80014f4:	bf00      	nop
 80014f6:	7ffb      	ldrb	r3, [r7, #31]
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d0fa      	beq.n	80014f6 <lsm6dsl_read_xyz+0x2e>

    uint8_t xyz[6];
    uint8_t outx_low_addr = OUTX_L_XL;
 8001500:	2328      	movs	r3, #40	@ 0x28
 8001502:	75fb      	strb	r3, [r7, #23]

    i2c_transaction(LSM6DSL_ADDR, 0, &outx_low_addr, 1);
 8001504:	f107 0217 	add.w	r2, r7, #23
 8001508:	2301      	movs	r3, #1
 800150a:	2100      	movs	r1, #0
 800150c:	206a      	movs	r0, #106	@ 0x6a
 800150e:	f7ff fe99 	bl	8001244 <i2c_transaction>
    i2c_transaction(LSM6DSL_ADDR, 1, xyz, 6);
 8001512:	f107 0218 	add.w	r2, r7, #24
 8001516:	2306      	movs	r3, #6
 8001518:	2101      	movs	r1, #1
 800151a:	206a      	movs	r0, #106	@ 0x6a
 800151c:	f7ff fe92 	bl	8001244 <i2c_transaction>

    *x = (int16_t) (xyz[1] << 8) | (xyz[0]);
 8001520:	7e7b      	ldrb	r3, [r7, #25]
 8001522:	021b      	lsls	r3, r3, #8
 8001524:	b21a      	sxth	r2, r3
 8001526:	7e3b      	ldrb	r3, [r7, #24]
 8001528:	b21b      	sxth	r3, r3
 800152a:	4313      	orrs	r3, r2
 800152c:	b21a      	sxth	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	801a      	strh	r2, [r3, #0]
    *y = (int16_t) (xyz[3] << 8) | (xyz[2]);
 8001532:	7efb      	ldrb	r3, [r7, #27]
 8001534:	021b      	lsls	r3, r3, #8
 8001536:	b21a      	sxth	r2, r3
 8001538:	7ebb      	ldrb	r3, [r7, #26]
 800153a:	b21b      	sxth	r3, r3
 800153c:	4313      	orrs	r3, r2
 800153e:	b21a      	sxth	r2, r3
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	801a      	strh	r2, [r3, #0]
    *z = (int16_t) (xyz[5] << 8) | (xyz[4]);
 8001544:	7f7b      	ldrb	r3, [r7, #29]
 8001546:	021b      	lsls	r3, r3, #8
 8001548:	b21a      	sxth	r2, r3
 800154a:	7f3b      	ldrb	r3, [r7, #28]
 800154c:	b21b      	sxth	r3, r3
 800154e:	4313      	orrs	r3, r2
 8001550:	b21a      	sxth	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	801a      	strh	r2, [r3, #0]
}
 8001556:	bf00      	nop
 8001558:	3720      	adds	r7, #32
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800155e:	b480      	push	{r7}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001566:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800156a:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	2b00      	cmp	r3, #0
 8001574:	d013      	beq.n	800159e <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001576:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800157a:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800157e:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001582:	2b00      	cmp	r3, #0
 8001584:	d00b      	beq.n	800159e <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001586:	e000      	b.n	800158a <ITM_SendChar+0x2c>
    {
      __NOP();
 8001588:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800158a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d0f9      	beq.n	8001588 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001594:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	b2d2      	uxtb	r2, r2
 800159c:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800159e:	687b      	ldr	r3, [r7, #4]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	0000      	movs	r0, r0
	...

080015b0 <detectLost>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI3_Init(void);

void detectLost()
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
  int16_t x, y, z;
  lsm6dsl_read_xyz(&x, &y, &z);
 80015b6:	1cba      	adds	r2, r7, #2
 80015b8:	1d39      	adds	r1, r7, #4
 80015ba:	1dbb      	adds	r3, r7, #6
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ff83 	bl	80014c8 <lsm6dsl_read_xyz>
  x = (int16_t)(x * SCALE);
 80015c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff f8d6 	bl	8000778 <__aeabi_i2d>
 80015cc:	a351      	add	r3, pc, #324	@ (adr r3, 8001714 <detectLost+0x164>)
 80015ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d2:	f7fe fe55 	bl	8000280 <__aeabi_dmul>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	4610      	mov	r0, r2
 80015dc:	4619      	mov	r1, r3
 80015de:	f7ff f935 	bl	800084c <__aeabi_d2iz>
 80015e2:	4603      	mov	r3, r0
 80015e4:	b21b      	sxth	r3, r3
 80015e6:	80fb      	strh	r3, [r7, #6]
  y = (int16_t)(y * SCALE);
 80015e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff f8c3 	bl	8000778 <__aeabi_i2d>
 80015f2:	a348      	add	r3, pc, #288	@ (adr r3, 8001714 <detectLost+0x164>)
 80015f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f8:	f7fe fe42 	bl	8000280 <__aeabi_dmul>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4610      	mov	r0, r2
 8001602:	4619      	mov	r1, r3
 8001604:	f7ff f922 	bl	800084c <__aeabi_d2iz>
 8001608:	4603      	mov	r3, r0
 800160a:	b21b      	sxth	r3, r3
 800160c:	80bb      	strh	r3, [r7, #4]
  z = (int16_t)(z * SCALE);
 800160e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff f8b0 	bl	8000778 <__aeabi_i2d>
 8001618:	a33e      	add	r3, pc, #248	@ (adr r3, 8001714 <detectLost+0x164>)
 800161a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161e:	f7fe fe2f 	bl	8000280 <__aeabi_dmul>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4610      	mov	r0, r2
 8001628:	4619      	mov	r1, r3
 800162a:	f7ff f90f 	bl	800084c <__aeabi_d2iz>
 800162e:	4603      	mov	r3, r0
 8001630:	b21b      	sxth	r3, r3
 8001632:	807b      	strh	r3, [r7, #2]

  printf("X: %d, Y: %d, Z: %d\n", x, y, z);
 8001634:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001638:	4619      	mov	r1, r3
 800163a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800163e:	461a      	mov	r2, r3
 8001640:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001644:	482a      	ldr	r0, [pc, #168]	@ (80016f0 <detectLost+0x140>)
 8001646:	f002 fe4d 	bl	80042e4 <iprintf>

  if ((abs(x - prev_x) < 1500) &&
 800164a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800164e:	461a      	mov	r2, r3
 8001650:	4b28      	ldr	r3, [pc, #160]	@ (80016f4 <detectLost+0x144>)
 8001652:	881b      	ldrh	r3, [r3, #0]
 8001654:	b21b      	sxth	r3, r3
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b00      	cmp	r3, #0
 800165a:	bfb8      	it	lt
 800165c:	425b      	neglt	r3, r3
 800165e:	f240 52db 	movw	r2, #1499	@ 0x5db
 8001662:	4293      	cmp	r3, r2
 8001664:	dc1f      	bgt.n	80016a6 <detectLost+0xf6>
      (abs(y - prev_y) < 1500) &&
 8001666:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800166a:	461a      	mov	r2, r3
 800166c:	4b22      	ldr	r3, [pc, #136]	@ (80016f8 <detectLost+0x148>)
 800166e:	881b      	ldrh	r3, [r3, #0]
 8001670:	b21b      	sxth	r3, r3
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b00      	cmp	r3, #0
 8001676:	bfb8      	it	lt
 8001678:	425b      	neglt	r3, r3
  if ((abs(x - prev_x) < 1500) &&
 800167a:	f240 52db 	movw	r2, #1499	@ 0x5db
 800167e:	4293      	cmp	r3, r2
 8001680:	dc11      	bgt.n	80016a6 <detectLost+0xf6>
      (abs(z - prev_z) < 1500))
 8001682:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001686:	461a      	mov	r2, r3
 8001688:	4b1c      	ldr	r3, [pc, #112]	@ (80016fc <detectLost+0x14c>)
 800168a:	881b      	ldrh	r3, [r3, #0]
 800168c:	b21b      	sxth	r3, r3
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b00      	cmp	r3, #0
 8001692:	bfb8      	it	lt
 8001694:	425b      	neglt	r3, r3
      (abs(y - prev_y) < 1500) &&
 8001696:	f240 52db 	movw	r2, #1499	@ 0x5db
 800169a:	4293      	cmp	r3, r2
 800169c:	dc03      	bgt.n	80016a6 <detectLost+0xf6>
  {
    still = 1;
 800169e:	4b18      	ldr	r3, [pc, #96]	@ (8001700 <detectLost+0x150>)
 80016a0:	2201      	movs	r2, #1
 80016a2:	701a      	strb	r2, [r3, #0]
 80016a4:	e013      	b.n	80016ce <detectLost+0x11e>
  }
  else
  {
    still = 0;
 80016a6:	4b16      	ldr	r3, [pc, #88]	@ (8001700 <detectLost+0x150>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]
    still_count = 0; // reset still counter moving now
 80016ac:	4b15      	ldr	r3, [pc, #84]	@ (8001704 <detectLost+0x154>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
    lastBleMsgTime = 0;
 80016b2:	4b15      	ldr	r3, [pc, #84]	@ (8001708 <detectLost+0x158>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
    student_id_bit_index = 0;
 80016b8:	4b14      	ldr	r3, [pc, #80]	@ (800170c <detectLost+0x15c>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	701a      	strb	r2, [r3, #0]
    disconnectBLE();
 80016be:	f7ff fce3 	bl	8001088 <disconnectBLE>
    setDiscoverability(0);
 80016c2:	2000      	movs	r0, #0
 80016c4:	f7ff fd38 	bl	8001138 <setDiscoverability>
    nonDiscoverable = 1;
 80016c8:	4b11      	ldr	r3, [pc, #68]	@ (8001710 <detectLost+0x160>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	701a      	strb	r2, [r3, #0]
  }

  prev_x = x;
 80016ce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80016d2:	4b08      	ldr	r3, [pc, #32]	@ (80016f4 <detectLost+0x144>)
 80016d4:	801a      	strh	r2, [r3, #0]
  prev_y = y;
 80016d6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80016da:	4b07      	ldr	r3, [pc, #28]	@ (80016f8 <detectLost+0x148>)
 80016dc:	801a      	strh	r2, [r3, #0]
  prev_z = z;
 80016de:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80016e2:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <detectLost+0x14c>)
 80016e4:	801a      	strh	r2, [r3, #0]
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	0800523c 	.word	0x0800523c
 80016f4:	200002f0 	.word	0x200002f0
 80016f8:	200002f2 	.word	0x200002f2
 80016fc:	200002f4 	.word	0x200002f4
 8001700:	200002f6 	.word	0x200002f6
 8001704:	200002ec 	.word	0x200002ec
 8001708:	200002f8 	.word	0x200002f8
 800170c:	200002e8 	.word	0x200002e8
 8001710:	200002fc 	.word	0x200002fc
 8001714:	5a1cac08 	.word	0x5a1cac08
 8001718:	3fdf3b64 	.word	0x3fdf3b64

0800171c <handle_lost_mode_leds>:

void handle_lost_mode_leds()
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b088      	sub	sp, #32
 8001720:	af02      	add	r7, sp, #8
  if (still)
 8001722:	4b2f      	ldr	r3, [pc, #188]	@ (80017e0 <handle_lost_mode_leds+0xc4>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	b2db      	uxtb	r3, r3
 8001728:	2b00      	cmp	r3, #0
 800172a:	d055      	beq.n	80017d8 <handle_lost_mode_leds+0xbc>
  {
    // if it is still increment number of ticks it has been still

    // if no movement for 1 minute enter lost mode
    if (still_count >= 1200) // 1 tick = 50 ms and 60000 ms = 1m so 60000/50 = 1200 ticks (50 ticks for testing purposes)
 800172c:	4b2d      	ldr	r3, [pc, #180]	@ (80017e4 <handle_lost_mode_leds+0xc8>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8001734:	d348      	bcc.n	80017c8 <handle_lost_mode_leds+0xac>
    {
      if (nonDiscoverable == 1) {
 8001736:	4b2c      	ldr	r3, [pc, #176]	@ (80017e8 <handle_lost_mode_leds+0xcc>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2b01      	cmp	r3, #1
 800173e:	d108      	bne.n	8001752 <handle_lost_mode_leds+0x36>
    	  setDiscoverability(nonDiscoverable);
 8001740:	4b29      	ldr	r3, [pc, #164]	@ (80017e8 <handle_lost_mode_leds+0xcc>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	b2db      	uxtb	r3, r3
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff fcf6 	bl	8001138 <setDiscoverability>
    	  nonDiscoverable = 0;
 800174c:	4b26      	ldr	r3, [pc, #152]	@ (80017e8 <handle_lost_mode_leds+0xcc>)
 800174e:	2200      	movs	r2, #0
 8001750:	701a      	strb	r2, [r3, #0]
      }
      
      if (((still_count * 50) / 1000 - lastBleMsgTime) >= 10)
 8001752:	4b24      	ldr	r3, [pc, #144]	@ (80017e4 <handle_lost_mode_leds+0xc8>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2232      	movs	r2, #50	@ 0x32
 8001758:	fb02 f303 	mul.w	r3, r2, r3
 800175c:	4a23      	ldr	r2, [pc, #140]	@ (80017ec <handle_lost_mode_leds+0xd0>)
 800175e:	fba2 2303 	umull	r2, r3, r2, r3
 8001762:	099a      	lsrs	r2, r3, #6
 8001764:	4b22      	ldr	r3, [pc, #136]	@ (80017f0 <handle_lost_mode_leds+0xd4>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b09      	cmp	r3, #9
 800176c:	d934      	bls.n	80017d8 <handle_lost_mode_leds+0xbc>
      {
        lastBleMsgTime = (still_count * 50) / 1000;
 800176e:	4b1d      	ldr	r3, [pc, #116]	@ (80017e4 <handle_lost_mode_leds+0xc8>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2232      	movs	r2, #50	@ 0x32
 8001774:	fb02 f303 	mul.w	r3, r2, r3
 8001778:	4a1c      	ldr	r2, [pc, #112]	@ (80017ec <handle_lost_mode_leds+0xd0>)
 800177a:	fba2 2303 	umull	r2, r3, r2, r3
 800177e:	099b      	lsrs	r3, r3, #6
 8001780:	4a1b      	ldr	r2, [pc, #108]	@ (80017f0 <handle_lost_mode_leds+0xd4>)
 8001782:	6013      	str	r3, [r2, #0]

        uint32_t lostSeconds = ((still_count - 1200)* 50) / 1000; // each count is 50 ms so ticks * 50 ms to get ms -> divide by 1000 ms to get seconds
 8001784:	4b17      	ldr	r3, [pc, #92]	@ (80017e4 <handle_lost_mode_leds+0xc8>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2232      	movs	r2, #50	@ 0x32
 800178a:	fb02 f303 	mul.w	r3, r2, r3
 800178e:	f5a3 436a 	sub.w	r3, r3, #59904	@ 0xea00
 8001792:	3b60      	subs	r3, #96	@ 0x60
 8001794:	4a15      	ldr	r2, [pc, #84]	@ (80017ec <handle_lost_mode_leds+0xd0>)
 8001796:	fba2 2303 	umull	r2, r3, r2, r3
 800179a:	099b      	lsrs	r3, r3, #6
 800179c:	617b      	str	r3, [r7, #20]
        char msg[20]; // char buffer for the output string
        sprintf(msg, "%s: %lu secs", TAGNAME, lostSeconds); // populate string with lost seconds
 800179e:	4638      	mov	r0, r7
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	4a14      	ldr	r2, [pc, #80]	@ (80017f4 <handle_lost_mode_leds+0xd8>)
 80017a4:	4914      	ldr	r1, [pc, #80]	@ (80017f8 <handle_lost_mode_leds+0xdc>)
 80017a6:	f002 fdaf 	bl	8004308 <siprintf>
        updateCharValue(NORDIC_UART_SERVICE_HANDLE, READ_CHAR_HANDLE, 0, strlen(msg), msg);
 80017aa:	463b      	mov	r3, r7
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7fe fd0f 	bl	80001d0 <strlen>
 80017b2:	4603      	mov	r3, r0
 80017b4:	461a      	mov	r2, r3
 80017b6:	463b      	mov	r3, r7
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	4613      	mov	r3, r2
 80017bc:	2200      	movs	r2, #0
 80017be:	490f      	ldr	r1, [pc, #60]	@ (80017fc <handle_lost_mode_leds+0xe0>)
 80017c0:	480f      	ldr	r0, [pc, #60]	@ (8001800 <handle_lost_mode_leds+0xe4>)
 80017c2:	f7ff fc0d 	bl	8000fe0 <updateCharValue>
      disconnectBLE();
      setDiscoverability(0);
      nonDiscoverable = 1;
    }
  }
}
 80017c6:	e007      	b.n	80017d8 <handle_lost_mode_leds+0xbc>
      disconnectBLE();
 80017c8:	f7ff fc5e 	bl	8001088 <disconnectBLE>
      setDiscoverability(0);
 80017cc:	2000      	movs	r0, #0
 80017ce:	f7ff fcb3 	bl	8001138 <setDiscoverability>
      nonDiscoverable = 1;
 80017d2:	4b05      	ldr	r3, [pc, #20]	@ (80017e8 <handle_lost_mode_leds+0xcc>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	701a      	strb	r2, [r3, #0]
}
 80017d8:	bf00      	nop
 80017da:	3718      	adds	r7, #24
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	200002f6 	.word	0x200002f6
 80017e4:	200002ec 	.word	0x200002ec
 80017e8:	200002fc 	.word	0x200002fc
 80017ec:	10624dd3 	.word	0x10624dd3
 80017f0:	200002f8 	.word	0x200002f8
 80017f4:	08005254 	.word	0x08005254
 80017f8:	0800525c 	.word	0x0800525c
 80017fc:	200002e0 	.word	0x200002e0
 8001800:	200002d8 	.word	0x200002d8

08001804 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  if (TIM2->SR & TIM_SR_UIF)
 8001808:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b00      	cmp	r3, #0
 8001814:	d014      	beq.n	8001840 <TIM2_IRQHandler+0x3c>
  {
    TIM2->SR &= ~TIM_SR_UIF;
 8001816:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001820:	f023 0301 	bic.w	r3, r3, #1
 8001824:	6113      	str	r3, [r2, #16]

    check_lost = 1;
 8001826:	4b09      	ldr	r3, [pc, #36]	@ (800184c <TIM2_IRQHandler+0x48>)
 8001828:	2201      	movs	r2, #1
 800182a:	701a      	strb	r2, [r3, #0]
    if (still) {
 800182c:	4b08      	ldr	r3, [pc, #32]	@ (8001850 <TIM2_IRQHandler+0x4c>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d004      	beq.n	8001840 <TIM2_IRQHandler+0x3c>
    	still_count++;
 8001836:	4b07      	ldr	r3, [pc, #28]	@ (8001854 <TIM2_IRQHandler+0x50>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	3301      	adds	r3, #1
 800183c:	4a05      	ldr	r2, [pc, #20]	@ (8001854 <TIM2_IRQHandler+0x50>)
 800183e:	6013      	str	r3, [r2, #0]
    }
  }
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	200002fd 	.word	0x200002fd
 8001850:	200002f6 	.word	0x200002f6
 8001854:	200002ec 	.word	0x200002ec

08001858 <_write>:

int _write(int file, char *ptr, int len)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
  int i = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
  for (i = 0; i < len; i++)
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]
 800186c:	e009      	b.n	8001882 <_write+0x2a>
  {
    ITM_SendChar(*ptr++);
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	1c5a      	adds	r2, r3, #1
 8001872:	60ba      	str	r2, [r7, #8]
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff fe71 	bl	800155e <ITM_SendChar>
  for (i = 0; i < len; i++)
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	3301      	adds	r3, #1
 8001880:	617b      	str	r3, [r7, #20]
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	429a      	cmp	r2, r3
 8001888:	dbf1      	blt.n	800186e <_write+0x16>
  }
  return len;
 800188a:	687b      	ldr	r3, [r7, #4]
}
 800188c:	4618      	mov	r0, r3
 800188e:	3718      	adds	r7, #24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	0000      	movs	r0, r0
	...

08001898 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800189e:	f000 fc2e 	bl	80020fe <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80018a2:	f000 f8bb 	bl	8001a1c <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018a6:	f000 f93d 	bl	8001b24 <MX_GPIO_Init>
  MX_SPI3_Init();
 80018aa:	f000 f8fd 	bl	8001aa8 <MX_SPI3_Init>

  // RESET BLE MODULE
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_RESET);
 80018ae:	2200      	movs	r2, #0
 80018b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018b8:	f000 ff8e 	bl	80027d8 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80018bc:	200a      	movs	r0, #10
 80018be:	f000 fc93 	bl	80021e8 <HAL_Delay>
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_SET);
 80018c2:	2201      	movs	r2, #1
 80018c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018cc:	f000 ff84 	bl	80027d8 <HAL_GPIO_WritePin>

  ble_init();
 80018d0:	f7fe ffe4 	bl	800089c <ble_init>
  // ensure that ble is disconnected and it is not discoverable
  disconnectBLE();
 80018d4:	f7ff fbd8 	bl	8001088 <disconnectBLE>
  setDiscoverability(nonDiscoverable);
 80018d8:	4b49      	ldr	r3, [pc, #292]	@ (8001a00 <main+0x168>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff fc2a 	bl	8001138 <setDiscoverability>
  nonDiscoverable = 1;
 80018e4:	4b46      	ldr	r3, [pc, #280]	@ (8001a00 <main+0x168>)
 80018e6:	2201      	movs	r2, #1
 80018e8:	701a      	strb	r2, [r3, #0]

  HAL_Delay(10);
 80018ea:	200a      	movs	r0, #10
 80018ec:	f000 fc7c 	bl	80021e8 <HAL_Delay>

  // accelerometer and timer inits
  leds_init();
 80018f0:	f7ff fd52 	bl	8001398 <leds_init>
  timer_init(TIM2);
 80018f4:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80018f8:	f000 fb52 	bl	8001fa0 <timer_init>
  i2c_init();
 80018fc:	f7ff fc42 	bl	8001184 <i2c_init>
  lsm6dsl_init();
 8001900:	f7ff fdb6 	bl	8001470 <lsm6dsl_init>
  timer_set_ms(TIM2, 50);
 8001904:	2132      	movs	r1, #50	@ 0x32
 8001906:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800190a:	f000 fb95 	bl	8002038 <timer_set_ms>
  timer_reset(TIM2);
 800190e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001912:	f000 fb83 	bl	800201c <timer_reset>

  int16_t x, y, z;
  lsm6dsl_read_xyz(&x, &y, &z);
 8001916:	1cba      	adds	r2, r7, #2
 8001918:	1d39      	adds	r1, r7, #4
 800191a:	1dbb      	adds	r3, r7, #6
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff fdd3 	bl	80014c8 <lsm6dsl_read_xyz>
  printf("X: %d, Y: %d, Z: %d", x, y, z);
 8001922:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001926:	4619      	mov	r1, r3
 8001928:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800192c:	461a      	mov	r2, r3
 800192e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001932:	4834      	ldr	r0, [pc, #208]	@ (8001a04 <main+0x16c>)
 8001934:	f002 fcd6 	bl	80042e4 <iprintf>
  x = (int16_t)(x * SCALE);
 8001938:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800193c:	4618      	mov	r0, r3
 800193e:	f7fe ff1b 	bl	8000778 <__aeabi_i2d>
 8001942:	a32d      	add	r3, pc, #180	@ (adr r3, 80019f8 <main+0x160>)
 8001944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001948:	f7fe fc9a 	bl	8000280 <__aeabi_dmul>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	4610      	mov	r0, r2
 8001952:	4619      	mov	r1, r3
 8001954:	f7fe ff7a 	bl	800084c <__aeabi_d2iz>
 8001958:	4603      	mov	r3, r0
 800195a:	b21b      	sxth	r3, r3
 800195c:	80fb      	strh	r3, [r7, #6]
  y = (int16_t)(y * SCALE);
 800195e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001962:	4618      	mov	r0, r3
 8001964:	f7fe ff08 	bl	8000778 <__aeabi_i2d>
 8001968:	a323      	add	r3, pc, #140	@ (adr r3, 80019f8 <main+0x160>)
 800196a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196e:	f7fe fc87 	bl	8000280 <__aeabi_dmul>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	4610      	mov	r0, r2
 8001978:	4619      	mov	r1, r3
 800197a:	f7fe ff67 	bl	800084c <__aeabi_d2iz>
 800197e:	4603      	mov	r3, r0
 8001980:	b21b      	sxth	r3, r3
 8001982:	80bb      	strh	r3, [r7, #4]
  z = (int16_t)(z * SCALE);
 8001984:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001988:	4618      	mov	r0, r3
 800198a:	f7fe fef5 	bl	8000778 <__aeabi_i2d>
 800198e:	a31a      	add	r3, pc, #104	@ (adr r3, 80019f8 <main+0x160>)
 8001990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001994:	f7fe fc74 	bl	8000280 <__aeabi_dmul>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4610      	mov	r0, r2
 800199e:	4619      	mov	r1, r3
 80019a0:	f7fe ff54 	bl	800084c <__aeabi_d2iz>
 80019a4:	4603      	mov	r3, r0
 80019a6:	b21b      	sxth	r3, r3
 80019a8:	807b      	strh	r3, [r7, #2]

  prev_x = x;
 80019aa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80019ae:	4b16      	ldr	r3, [pc, #88]	@ (8001a08 <main+0x170>)
 80019b0:	801a      	strh	r2, [r3, #0]
  prev_y = y;
 80019b2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80019b6:	4b15      	ldr	r3, [pc, #84]	@ (8001a0c <main+0x174>)
 80019b8:	801a      	strh	r2, [r3, #0]
  prev_z = z;
 80019ba:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80019be:	4b14      	ldr	r3, [pc, #80]	@ (8001a10 <main+0x178>)
 80019c0:	801a      	strh	r2, [r3, #0]

  while (1)
  {
    if (!nonDiscoverable && HAL_GPIO_ReadPin(BLE_INT_GPIO_Port, BLE_INT_Pin))
 80019c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a00 <main+0x168>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d108      	bne.n	80019de <main+0x146>
 80019cc:	2140      	movs	r1, #64	@ 0x40
 80019ce:	4811      	ldr	r0, [pc, #68]	@ (8001a14 <main+0x17c>)
 80019d0:	f000 feea 	bl	80027a8 <HAL_GPIO_ReadPin>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <main+0x146>
    {
      catchBLE();
 80019da:	f7ff f975 	bl	8000cc8 <catchBLE>
    }
    
    detectLost();
 80019de:	f7ff fde7 	bl	80015b0 <detectLost>
    if (check_lost == 1)
 80019e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001a18 <main+0x180>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d1ea      	bne.n	80019c2 <main+0x12a>
    { // Each tick is 50ms
      // before handling lost mode, set lastBleMsgTime to current time
      handle_lost_mode_leds();
 80019ec:	f7ff fe96 	bl	800171c <handle_lost_mode_leds>
      check_lost = 0;
 80019f0:	4b09      	ldr	r3, [pc, #36]	@ (8001a18 <main+0x180>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	701a      	strb	r2, [r3, #0]
    if (!nonDiscoverable && HAL_GPIO_ReadPin(BLE_INT_GPIO_Port, BLE_INT_Pin))
 80019f6:	e7e4      	b.n	80019c2 <main+0x12a>
 80019f8:	5a1cac08 	.word	0x5a1cac08
 80019fc:	3fdf3b64 	.word	0x3fdf3b64
 8001a00:	200002fc 	.word	0x200002fc
 8001a04:	0800526c 	.word	0x0800526c
 8001a08:	200002f0 	.word	0x200002f0
 8001a0c:	200002f2 	.word	0x200002f2
 8001a10:	200002f4 	.word	0x200002f4
 8001a14:	48001000 	.word	0x48001000
 8001a18:	200002fd 	.word	0x200002fd

08001a1c <SystemClock_Config>:
 * @brief System Clock Configuration
 * @attention This changes the System clock frequency, make sure you reflect that change in your timer
 * @retval None
 */
void SystemClock_Config(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b096      	sub	sp, #88	@ 0x58
 8001a20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a22:	f107 0314 	add.w	r3, r7, #20
 8001a26:	2244      	movs	r2, #68	@ 0x44
 8001a28:	2100      	movs	r1, #0
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f002 fccf 	bl	80043ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a30:	463b      	mov	r3, r7
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	605a      	str	r2, [r3, #4]
 8001a38:	609a      	str	r2, [r3, #8]
 8001a3a:	60da      	str	r2, [r3, #12]
 8001a3c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001a3e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001a42:	f000 ff13 	bl	800286c <HAL_PWREx_ControlVoltageScaling>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001a4c:	f000 f902 	bl	8001c54 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001a50:	2310      	movs	r3, #16
 8001a52:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001a54:	2301      	movs	r3, #1
 8001a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	633b      	str	r3, [r7, #48]	@ 0x30
  // This lines changes system clock frequency
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8001a5c:	2370      	movs	r3, #112	@ 0x70
 8001a5e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a60:	2300      	movs	r3, #0
 8001a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a64:	f107 0314 	add.w	r3, r7, #20
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f000 ff55 	bl	8002918 <HAL_RCC_OscConfig>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001a74:	f000 f8ee 	bl	8001c54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a78:	230f      	movs	r3, #15
 8001a7a:	603b      	str	r3, [r7, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a80:	2300      	movs	r3, #0
 8001a82:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a84:	2300      	movs	r3, #0
 8001a86:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a8c:	463b      	mov	r3, r7
 8001a8e:	2100      	movs	r1, #0
 8001a90:	4618      	mov	r0, r3
 8001a92:	f001 fb1d 	bl	80030d0 <HAL_RCC_ClockConfig>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001a9c:	f000 f8da 	bl	8001c54 <Error_Handler>
  }
}
 8001aa0:	bf00      	nop
 8001aa2:	3758      	adds	r7, #88	@ 0x58
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <MX_SPI3_Init>:
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001aac:	4b1b      	ldr	r3, [pc, #108]	@ (8001b1c <MX_SPI3_Init+0x74>)
 8001aae:	4a1c      	ldr	r2, [pc, #112]	@ (8001b20 <MX_SPI3_Init+0x78>)
 8001ab0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001ab2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b1c <MX_SPI3_Init+0x74>)
 8001ab4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001ab8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001aba:	4b18      	ldr	r3, [pc, #96]	@ (8001b1c <MX_SPI3_Init+0x74>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ac0:	4b16      	ldr	r3, [pc, #88]	@ (8001b1c <MX_SPI3_Init+0x74>)
 8001ac2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001ac6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ac8:	4b14      	ldr	r3, [pc, #80]	@ (8001b1c <MX_SPI3_Init+0x74>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ace:	4b13      	ldr	r3, [pc, #76]	@ (8001b1c <MX_SPI3_Init+0x74>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001ad4:	4b11      	ldr	r3, [pc, #68]	@ (8001b1c <MX_SPI3_Init+0x74>)
 8001ad6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ada:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001adc:	4b0f      	ldr	r3, [pc, #60]	@ (8001b1c <MX_SPI3_Init+0x74>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8001b1c <MX_SPI3_Init+0x74>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b1c <MX_SPI3_Init+0x74>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aee:	4b0b      	ldr	r3, [pc, #44]	@ (8001b1c <MX_SPI3_Init+0x74>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001af4:	4b09      	ldr	r3, [pc, #36]	@ (8001b1c <MX_SPI3_Init+0x74>)
 8001af6:	2207      	movs	r2, #7
 8001af8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001afa:	4b08      	ldr	r3, [pc, #32]	@ (8001b1c <MX_SPI3_Init+0x74>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b00:	4b06      	ldr	r3, [pc, #24]	@ (8001b1c <MX_SPI3_Init+0x74>)
 8001b02:	2208      	movs	r2, #8
 8001b04:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001b06:	4805      	ldr	r0, [pc, #20]	@ (8001b1c <MX_SPI3_Init+0x74>)
 8001b08:	f001 fcce 	bl	80034a8 <HAL_SPI_Init>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001b12:	f000 f89f 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20000304 	.word	0x20000304
 8001b20:	40003c00 	.word	0x40003c00

08001b24 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08a      	sub	sp, #40	@ 0x28
 8001b28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2a:	f107 0314 	add.w	r3, r7, #20
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	605a      	str	r2, [r3, #4]
 8001b34:	609a      	str	r2, [r3, #8]
 8001b36:	60da      	str	r2, [r3, #12]
 8001b38:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b3a:	4b43      	ldr	r3, [pc, #268]	@ (8001c48 <MX_GPIO_Init+0x124>)
 8001b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b3e:	4a42      	ldr	r2, [pc, #264]	@ (8001c48 <MX_GPIO_Init+0x124>)
 8001b40:	f043 0310 	orr.w	r3, r3, #16
 8001b44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b46:	4b40      	ldr	r3, [pc, #256]	@ (8001c48 <MX_GPIO_Init+0x124>)
 8001b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b4a:	f003 0310 	and.w	r3, r3, #16
 8001b4e:	613b      	str	r3, [r7, #16]
 8001b50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b52:	4b3d      	ldr	r3, [pc, #244]	@ (8001c48 <MX_GPIO_Init+0x124>)
 8001b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b56:	4a3c      	ldr	r2, [pc, #240]	@ (8001c48 <MX_GPIO_Init+0x124>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b5e:	4b3a      	ldr	r3, [pc, #232]	@ (8001c48 <MX_GPIO_Init+0x124>)
 8001b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6a:	4b37      	ldr	r3, [pc, #220]	@ (8001c48 <MX_GPIO_Init+0x124>)
 8001b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b6e:	4a36      	ldr	r2, [pc, #216]	@ (8001c48 <MX_GPIO_Init+0x124>)
 8001b70:	f043 0302 	orr.w	r3, r3, #2
 8001b74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b76:	4b34      	ldr	r3, [pc, #208]	@ (8001c48 <MX_GPIO_Init+0x124>)
 8001b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	60bb      	str	r3, [r7, #8]
 8001b80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b82:	4b31      	ldr	r3, [pc, #196]	@ (8001c48 <MX_GPIO_Init+0x124>)
 8001b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b86:	4a30      	ldr	r2, [pc, #192]	@ (8001c48 <MX_GPIO_Init+0x124>)
 8001b88:	f043 0308 	orr.w	r3, r3, #8
 8001b8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b8e:	4b2e      	ldr	r3, [pc, #184]	@ (8001c48 <MX_GPIO_Init+0x124>)
 8001b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b92:	f003 0308 	and.w	r3, r3, #8
 8001b96:	607b      	str	r3, [r7, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b9a:	4b2b      	ldr	r3, [pc, #172]	@ (8001c48 <MX_GPIO_Init+0x124>)
 8001b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b9e:	4a2a      	ldr	r2, [pc, #168]	@ (8001c48 <MX_GPIO_Init+0x124>)
 8001ba0:	f043 0304 	orr.w	r3, r3, #4
 8001ba4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ba6:	4b28      	ldr	r3, [pc, #160]	@ (8001c48 <MX_GPIO_Init+0x124>)
 8001ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001baa:	f003 0304 	and.w	r3, r3, #4
 8001bae:	603b      	str	r3, [r7, #0]
 8001bb0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED1_GPIO_Port, GPIO_LED1_Pin, GPIO_PIN_RESET);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2120      	movs	r1, #32
 8001bb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bba:	f000 fe0d 	bl	80027d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port, BLE_CS_Pin, GPIO_PIN_SET);
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bc4:	4821      	ldr	r0, [pc, #132]	@ (8001c4c <MX_GPIO_Init+0x128>)
 8001bc6:	f000 fe07 	bl	80027d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_SET);
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001bd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bd4:	f000 fe00 	bl	80027d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLE_INT_Pin */
  GPIO_InitStruct.Pin = BLE_INT_Pin;
 8001bd8:	2340      	movs	r3, #64	@ 0x40
 8001bda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bdc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001be0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 8001be6:	f107 0314 	add.w	r3, r7, #20
 8001bea:	4619      	mov	r1, r3
 8001bec:	4818      	ldr	r0, [pc, #96]	@ (8001c50 <MX_GPIO_Init+0x12c>)
 8001bee:	f000 fc31 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_LED1_Pin BLE_RESET_Pin */
  GPIO_InitStruct.Pin = GPIO_LED1_Pin | BLE_RESET_Pin;
 8001bf2:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8001bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c00:	2300      	movs	r3, #0
 8001c02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c04:	f107 0314 	add.w	r3, r7, #20
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c0e:	f000 fc21 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_CS_Pin */
  GPIO_InitStruct.Pin = BLE_CS_Pin;
 8001c12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c20:	2303      	movs	r3, #3
 8001c22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLE_CS_GPIO_Port, &GPIO_InitStruct);
 8001c24:	f107 0314 	add.w	r3, r7, #20
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4808      	ldr	r0, [pc, #32]	@ (8001c4c <MX_GPIO_Init+0x128>)
 8001c2c:	f000 fc12 	bl	8002454 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001c30:	2200      	movs	r2, #0
 8001c32:	2100      	movs	r1, #0
 8001c34:	2017      	movs	r0, #23
 8001c36:	f000 fbd6 	bl	80023e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001c3a:	2017      	movs	r0, #23
 8001c3c:	f000 fbef 	bl	800241e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001c40:	bf00      	nop
 8001c42:	3728      	adds	r7, #40	@ 0x28
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	48000c00 	.word	0x48000c00
 8001c50:	48001000 	.word	0x48001000

08001c54 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c58:	b672      	cpsid	i
}
 8001c5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c5c:	bf00      	nop
 8001c5e:	e7fd      	b.n	8001c5c <Error_Handler+0x8>

08001c60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c66:	4b0f      	ldr	r3, [pc, #60]	@ (8001ca4 <HAL_MspInit+0x44>)
 8001c68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c6a:	4a0e      	ldr	r2, [pc, #56]	@ (8001ca4 <HAL_MspInit+0x44>)
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c72:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca4 <HAL_MspInit+0x44>)
 8001c74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	607b      	str	r3, [r7, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ca4 <HAL_MspInit+0x44>)
 8001c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c82:	4a08      	ldr	r2, [pc, #32]	@ (8001ca4 <HAL_MspInit+0x44>)
 8001c84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c88:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ca4 <HAL_MspInit+0x44>)
 8001c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c92:	603b      	str	r3, [r7, #0]
 8001c94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	40021000 	.word	0x40021000

08001ca8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08a      	sub	sp, #40	@ 0x28
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb0:	f107 0314 	add.w	r3, r7, #20
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
 8001cbe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a17      	ldr	r2, [pc, #92]	@ (8001d24 <HAL_SPI_MspInit+0x7c>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d128      	bne.n	8001d1c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001cca:	4b17      	ldr	r3, [pc, #92]	@ (8001d28 <HAL_SPI_MspInit+0x80>)
 8001ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cce:	4a16      	ldr	r2, [pc, #88]	@ (8001d28 <HAL_SPI_MspInit+0x80>)
 8001cd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cd6:	4b14      	ldr	r3, [pc, #80]	@ (8001d28 <HAL_SPI_MspInit+0x80>)
 8001cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cda:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce2:	4b11      	ldr	r3, [pc, #68]	@ (8001d28 <HAL_SPI_MspInit+0x80>)
 8001ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ce6:	4a10      	ldr	r2, [pc, #64]	@ (8001d28 <HAL_SPI_MspInit+0x80>)
 8001ce8:	f043 0304 	orr.w	r3, r3, #4
 8001cec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cee:	4b0e      	ldr	r3, [pc, #56]	@ (8001d28 <HAL_SPI_MspInit+0x80>)
 8001cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cf2:	f003 0304 	and.w	r3, r3, #4
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001cfa:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001cfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d00:	2302      	movs	r3, #2
 8001d02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d0c:	2306      	movs	r3, #6
 8001d0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d10:	f107 0314 	add.w	r3, r7, #20
 8001d14:	4619      	mov	r1, r3
 8001d16:	4805      	ldr	r0, [pc, #20]	@ (8001d2c <HAL_SPI_MspInit+0x84>)
 8001d18:	f000 fb9c 	bl	8002454 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001d1c:	bf00      	nop
 8001d1e:	3728      	adds	r7, #40	@ 0x28
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40003c00 	.word	0x40003c00
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	48000800 	.word	0x48000800

08001d30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d34:	bf00      	nop
 8001d36:	e7fd      	b.n	8001d34 <NMI_Handler+0x4>

08001d38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d3c:	bf00      	nop
 8001d3e:	e7fd      	b.n	8001d3c <HardFault_Handler+0x4>

08001d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d44:	bf00      	nop
 8001d46:	e7fd      	b.n	8001d44 <MemManage_Handler+0x4>

08001d48 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d4c:	bf00      	nop
 8001d4e:	e7fd      	b.n	8001d4c <BusFault_Handler+0x4>

08001d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d54:	bf00      	nop
 8001d56:	e7fd      	b.n	8001d54 <UsageFault_Handler+0x4>

08001d58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d66:	b480      	push	{r7}
 8001d68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d86:	f000 fa0f 	bl	80021a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  dataAvailable=1;
 8001d94:	4b03      	ldr	r3, [pc, #12]	@ (8001da4 <EXTI9_5_IRQHandler+0x14>)
 8001d96:	2201      	movs	r2, #1
 8001d98:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 8001d9a:	2040      	movs	r0, #64	@ 0x40
 8001d9c:	f000 fd34 	bl	8002808 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001da0:	bf00      	nop
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20000300 	.word	0x20000300

08001da8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]
 8001db8:	e00a      	b.n	8001dd0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001dba:	f3af 8000 	nop.w
 8001dbe:	4601      	mov	r1, r0
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	1c5a      	adds	r2, r3, #1
 8001dc4:	60ba      	str	r2, [r7, #8]
 8001dc6:	b2ca      	uxtb	r2, r1
 8001dc8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	617b      	str	r3, [r7, #20]
 8001dd0:	697a      	ldr	r2, [r7, #20]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	dbf0      	blt.n	8001dba <_read+0x12>
	}

return len;
 8001dd8:	687b      	ldr	r3, [r7, #4]
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
	...

08001de4 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001dec:	4b11      	ldr	r3, [pc, #68]	@ (8001e34 <_sbrk+0x50>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d102      	bne.n	8001dfa <_sbrk+0x16>
		heap_end = &end;
 8001df4:	4b0f      	ldr	r3, [pc, #60]	@ (8001e34 <_sbrk+0x50>)
 8001df6:	4a10      	ldr	r2, [pc, #64]	@ (8001e38 <_sbrk+0x54>)
 8001df8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8001e34 <_sbrk+0x50>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001e00:	4b0c      	ldr	r3, [pc, #48]	@ (8001e34 <_sbrk+0x50>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4413      	add	r3, r2
 8001e08:	466a      	mov	r2, sp
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d907      	bls.n	8001e1e <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001e0e:	f002 fb3d 	bl	800448c <__errno>
 8001e12:	4603      	mov	r3, r0
 8001e14:	220c      	movs	r2, #12
 8001e16:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001e18:	f04f 33ff 	mov.w	r3, #4294967295
 8001e1c:	e006      	b.n	8001e2c <_sbrk+0x48>
	}

	heap_end += incr;
 8001e1e:	4b05      	ldr	r3, [pc, #20]	@ (8001e34 <_sbrk+0x50>)
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4413      	add	r3, r2
 8001e26:	4a03      	ldr	r2, [pc, #12]	@ (8001e34 <_sbrk+0x50>)
 8001e28:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20000368 	.word	0x20000368
 8001e38:	200004c0 	.word	0x200004c0

08001e3c <_close>:

int _close(int file)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
	return -1;
 8001e44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e64:	605a      	str	r2, [r3, #4]
	return 0;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <_isatty>:

int _isatty(int file)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
	return 1;
 8001e7c:	2301      	movs	r3, #1
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b085      	sub	sp, #20
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	60f8      	str	r0, [r7, #12]
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	607a      	str	r2, [r7, #4]
	return 0;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3714      	adds	r7, #20
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ea8:	4b17      	ldr	r3, [pc, #92]	@ (8001f08 <SystemInit+0x64>)
 8001eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eae:	4a16      	ldr	r2, [pc, #88]	@ (8001f08 <SystemInit+0x64>)
 8001eb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001eb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001eb8:	4b14      	ldr	r3, [pc, #80]	@ (8001f0c <SystemInit+0x68>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a13      	ldr	r2, [pc, #76]	@ (8001f0c <SystemInit+0x68>)
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001ec4:	4b11      	ldr	r3, [pc, #68]	@ (8001f0c <SystemInit+0x68>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001eca:	4b10      	ldr	r3, [pc, #64]	@ (8001f0c <SystemInit+0x68>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a0f      	ldr	r2, [pc, #60]	@ (8001f0c <SystemInit+0x68>)
 8001ed0:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001ed4:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001ed8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001eda:	4b0c      	ldr	r3, [pc, #48]	@ (8001f0c <SystemInit+0x68>)
 8001edc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ee0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8001f0c <SystemInit+0x68>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a09      	ldr	r2, [pc, #36]	@ (8001f0c <SystemInit+0x68>)
 8001ee8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001eec:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001eee:	4b07      	ldr	r3, [pc, #28]	@ (8001f0c <SystemInit+0x68>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ef4:	4b04      	ldr	r3, [pc, #16]	@ (8001f08 <SystemInit+0x64>)
 8001ef6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001efa:	609a      	str	r2, [r3, #8]
#endif
}
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	e000ed00 	.word	0xe000ed00
 8001f0c:	40021000 	.word	0x40021000

08001f10 <__NVIC_EnableIRQ>:
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	db0b      	blt.n	8001f3a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f22:	79fb      	ldrb	r3, [r7, #7]
 8001f24:	f003 021f 	and.w	r2, r3, #31
 8001f28:	4907      	ldr	r1, [pc, #28]	@ (8001f48 <__NVIC_EnableIRQ+0x38>)
 8001f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2e:	095b      	lsrs	r3, r3, #5
 8001f30:	2001      	movs	r0, #1
 8001f32:	fa00 f202 	lsl.w	r2, r0, r2
 8001f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	e000e100 	.word	0xe000e100

08001f4c <__NVIC_SetPriority>:
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	6039      	str	r1, [r7, #0]
 8001f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	db0a      	blt.n	8001f76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	490c      	ldr	r1, [pc, #48]	@ (8001f98 <__NVIC_SetPriority+0x4c>)
 8001f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6a:	0112      	lsls	r2, r2, #4
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	440b      	add	r3, r1
 8001f70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001f74:	e00a      	b.n	8001f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	4908      	ldr	r1, [pc, #32]	@ (8001f9c <__NVIC_SetPriority+0x50>)
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
 8001f7e:	f003 030f 	and.w	r3, r3, #15
 8001f82:	3b04      	subs	r3, #4
 8001f84:	0112      	lsls	r2, r2, #4
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	440b      	add	r3, r1
 8001f8a:	761a      	strb	r2, [r3, #24]
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	e000e100 	.word	0xe000e100
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <timer_init>:

#include "timer.h"


void timer_init(TIM_TypeDef* timer)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  //Enable TIM2
  RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 8001fa8:	4b1b      	ldr	r3, [pc, #108]	@ (8002018 <timer_init+0x78>)
 8001faa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fac:	4a1a      	ldr	r2, [pc, #104]	@ (8002018 <timer_init+0x78>)
 8001fae:	f043 0301 	orr.w	r3, r3, #1
 8001fb2:	6593      	str	r3, [r2, #88]	@ 0x58

  // Disable timer for configuration
  timer->CR1 &= ~TIM_CR1_CEN;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f023 0201 	bic.w	r2, r3, #1
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	601a      	str	r2, [r3, #0]

  // Reset timer configuration
  timer->CR1 = 0; // Default control register
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
  timer->CNT = 0; // Reset counter
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	625a      	str	r2, [r3, #36]	@ 0x24
  timer->PSC = 0; // Prescaler to 0 initially
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	629a      	str	r2, [r3, #40]	@ 0x28

  // Enable timer interrupt in the NVIC
  NVIC_SetPriority(TIM2_IRQn, 2); // Set interrupt priority
 8001fd2:	2102      	movs	r1, #2
 8001fd4:	201c      	movs	r0, #28
 8001fd6:	f7ff ffb9 	bl	8001f4c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8001fda:	201c      	movs	r0, #28
 8001fdc:	f7ff ff98 	bl	8001f10 <__NVIC_EnableIRQ>

  //Clear TIM2_IRQn update interrupt,
  TIM2->SR &= ~TIM_SR_UIF;
 8001fe0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001fea:	f023 0301 	bic.w	r3, r3, #1
 8001fee:	6113      	str	r3, [r2, #16]

  //Enable the hardware interrupt.
  TIM2->DIER |= TIM_DIER_UIE;
 8001ff0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ffa:	f043 0301 	orr.w	r3, r3, #1
 8001ffe:	60d3      	str	r3, [r2, #12]

  //Enable the timer.
  TIM2->CR1 |= TIM_CR1_CEN;
 8002000:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800200a:	f043 0301 	orr.w	r3, r3, #1
 800200e:	6013      	str	r3, [r2, #0]


}
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40021000 	.word	0x40021000

0800201c <timer_reset>:

void timer_reset(TIM_TypeDef* timer)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  timer->CNT = 0;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
	...

08002038 <timer_set_ms>:

void timer_set_ms(TIM_TypeDef* timer, uint16_t period_ms)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	460b      	mov	r3, r1
 8002042:	807b      	strh	r3, [r7, #2]
  timer->CR1 &= ~TIM_CR1_CEN;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f023 0201 	bic.w	r2, r3, #1
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	601a      	str	r2, [r3, #0]
  // Calculate clock frequency and prescaler
  int clock_freq = 8000000; // Default clock frequency 4 MHz
 8002050:	4b14      	ldr	r3, [pc, #80]	@ (80020a4 <timer_set_ms+0x6c>)
 8002052:	60fb      	str	r3, [r7, #12]
  int prescaler = (clock_freq / 1000) - 1; // Scale to milliseconds
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4a14      	ldr	r2, [pc, #80]	@ (80020a8 <timer_set_ms+0x70>)
 8002058:	fb82 1203 	smull	r1, r2, r2, r3
 800205c:	1192      	asrs	r2, r2, #6
 800205e:	17db      	asrs	r3, r3, #31
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	3b01      	subs	r3, #1
 8002064:	60bb      	str	r3, [r7, #8]
  // now is 4000 tick per sec

  //TIM2 counter limit: 2,147,483,647   32bit

  // Set prescaler and auto-reload value
  timer->PSC = prescaler;
 8002066:	68ba      	ldr	r2, [r7, #8]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	629a      	str	r2, [r3, #40]	@ 0x28
  timer->ARR = period_ms - 1;
 800206c:	887b      	ldrh	r3, [r7, #2]
 800206e:	3b01      	subs	r3, #1
 8002070:	461a      	mov	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	62da      	str	r2, [r3, #44]	@ 0x2c

  timer->CNT = 0;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	625a      	str	r2, [r3, #36]	@ 0x24

  // Update registers
  timer->EGR |= TIM_EGR_UG;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	f043 0201 	orr.w	r2, r3, #1
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	615a      	str	r2, [r3, #20]

  //Enable the timer.
  TIM2->CR1 |= TIM_CR1_CEN;
 8002088:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002092:	f043 0301 	orr.w	r3, r3, #1
 8002096:	6013      	str	r3, [r2, #0]
}
 8002098:	bf00      	nop
 800209a:	3714      	adds	r7, #20
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	007a1200 	.word	0x007a1200
 80020a8:	10624dd3 	.word	0x10624dd3

080020ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80020ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020b0:	f7ff fef8 	bl	8001ea4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020b4:	480c      	ldr	r0, [pc, #48]	@ (80020e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80020b6:	490d      	ldr	r1, [pc, #52]	@ (80020ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80020b8:	4a0d      	ldr	r2, [pc, #52]	@ (80020f0 <LoopForever+0xe>)
  movs r3, #0
 80020ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020bc:	e002      	b.n	80020c4 <LoopCopyDataInit>

080020be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020c2:	3304      	adds	r3, #4

080020c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020c8:	d3f9      	bcc.n	80020be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ca:	4a0a      	ldr	r2, [pc, #40]	@ (80020f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020cc:	4c0a      	ldr	r4, [pc, #40]	@ (80020f8 <LoopForever+0x16>)
  movs r3, #0
 80020ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020d0:	e001      	b.n	80020d6 <LoopFillZerobss>

080020d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020d4:	3204      	adds	r2, #4

080020d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020d8:	d3fb      	bcc.n	80020d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020da:	f002 f9dd 	bl	8004498 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020de:	f7ff fbdb 	bl	8001898 <main>

080020e2 <LoopForever>:

LoopForever:
    b LoopForever
 80020e2:	e7fe      	b.n	80020e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80020e4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80020e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020ec:	200001b0 	.word	0x200001b0
  ldr r2, =_sidata
 80020f0:	08005304 	.word	0x08005304
  ldr r2, =_sbss
 80020f4:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 80020f8:	200004bc 	.word	0x200004bc

080020fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020fc:	e7fe      	b.n	80020fc <ADC1_2_IRQHandler>

080020fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b082      	sub	sp, #8
 8002102:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002104:	2300      	movs	r3, #0
 8002106:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002108:	2003      	movs	r0, #3
 800210a:	f000 f961 	bl	80023d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800210e:	2000      	movs	r0, #0
 8002110:	f000 f80e 	bl	8002130 <HAL_InitTick>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d002      	beq.n	8002120 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	71fb      	strb	r3, [r7, #7]
 800211e:	e001      	b.n	8002124 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002120:	f7ff fd9e 	bl	8001c60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002124:	79fb      	ldrb	r3, [r7, #7]
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
	...

08002130 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002138:	2300      	movs	r3, #0
 800213a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800213c:	4b17      	ldr	r3, [pc, #92]	@ (800219c <HAL_InitTick+0x6c>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d023      	beq.n	800218c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002144:	4b16      	ldr	r3, [pc, #88]	@ (80021a0 <HAL_InitTick+0x70>)
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	4b14      	ldr	r3, [pc, #80]	@ (800219c <HAL_InitTick+0x6c>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	4619      	mov	r1, r3
 800214e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002152:	fbb3 f3f1 	udiv	r3, r3, r1
 8002156:	fbb2 f3f3 	udiv	r3, r2, r3
 800215a:	4618      	mov	r0, r3
 800215c:	f000 f96d 	bl	800243a <HAL_SYSTICK_Config>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d10f      	bne.n	8002186 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b0f      	cmp	r3, #15
 800216a:	d809      	bhi.n	8002180 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800216c:	2200      	movs	r2, #0
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	f04f 30ff 	mov.w	r0, #4294967295
 8002174:	f000 f937 	bl	80023e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002178:	4a0a      	ldr	r2, [pc, #40]	@ (80021a4 <HAL_InitTick+0x74>)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6013      	str	r3, [r2, #0]
 800217e:	e007      	b.n	8002190 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	73fb      	strb	r3, [r7, #15]
 8002184:	e004      	b.n	8002190 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	73fb      	strb	r3, [r7, #15]
 800218a:	e001      	b.n	8002190 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002190:	7bfb      	ldrb	r3, [r7, #15]
}
 8002192:	4618      	mov	r0, r3
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20000150 	.word	0x20000150
 80021a0:	20000148 	.word	0x20000148
 80021a4:	2000014c 	.word	0x2000014c

080021a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021ac:	4b06      	ldr	r3, [pc, #24]	@ (80021c8 <HAL_IncTick+0x20>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	461a      	mov	r2, r3
 80021b2:	4b06      	ldr	r3, [pc, #24]	@ (80021cc <HAL_IncTick+0x24>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4413      	add	r3, r2
 80021b8:	4a04      	ldr	r2, [pc, #16]	@ (80021cc <HAL_IncTick+0x24>)
 80021ba:	6013      	str	r3, [r2, #0]
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	20000150 	.word	0x20000150
 80021cc:	2000036c 	.word	0x2000036c

080021d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  return uwTick;
 80021d4:	4b03      	ldr	r3, [pc, #12]	@ (80021e4 <HAL_GetTick+0x14>)
 80021d6:	681b      	ldr	r3, [r3, #0]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	2000036c 	.word	0x2000036c

080021e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021f0:	f7ff ffee 	bl	80021d0 <HAL_GetTick>
 80021f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002200:	d005      	beq.n	800220e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002202:	4b0a      	ldr	r3, [pc, #40]	@ (800222c <HAL_Delay+0x44>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	461a      	mov	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4413      	add	r3, r2
 800220c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800220e:	bf00      	nop
 8002210:	f7ff ffde 	bl	80021d0 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	429a      	cmp	r2, r3
 800221e:	d8f7      	bhi.n	8002210 <HAL_Delay+0x28>
  {
  }
}
 8002220:	bf00      	nop
 8002222:	bf00      	nop
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	20000150 	.word	0x20000150

08002230 <__NVIC_SetPriorityGrouping>:
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f003 0307 	and.w	r3, r3, #7
 800223e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002240:	4b0c      	ldr	r3, [pc, #48]	@ (8002274 <__NVIC_SetPriorityGrouping+0x44>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800224c:	4013      	ands	r3, r2
 800224e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002258:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800225c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002262:	4a04      	ldr	r2, [pc, #16]	@ (8002274 <__NVIC_SetPriorityGrouping+0x44>)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	60d3      	str	r3, [r2, #12]
}
 8002268:	bf00      	nop
 800226a:	3714      	adds	r7, #20
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <__NVIC_GetPriorityGrouping>:
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800227c:	4b04      	ldr	r3, [pc, #16]	@ (8002290 <__NVIC_GetPriorityGrouping+0x18>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	0a1b      	lsrs	r3, r3, #8
 8002282:	f003 0307 	and.w	r3, r3, #7
}
 8002286:	4618      	mov	r0, r3
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <__NVIC_EnableIRQ>:
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800229e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	db0b      	blt.n	80022be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022a6:	79fb      	ldrb	r3, [r7, #7]
 80022a8:	f003 021f 	and.w	r2, r3, #31
 80022ac:	4907      	ldr	r1, [pc, #28]	@ (80022cc <__NVIC_EnableIRQ+0x38>)
 80022ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b2:	095b      	lsrs	r3, r3, #5
 80022b4:	2001      	movs	r0, #1
 80022b6:	fa00 f202 	lsl.w	r2, r0, r2
 80022ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	e000e100 	.word	0xe000e100

080022d0 <__NVIC_SetPriority>:
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	6039      	str	r1, [r7, #0]
 80022da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	db0a      	blt.n	80022fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	490c      	ldr	r1, [pc, #48]	@ (800231c <__NVIC_SetPriority+0x4c>)
 80022ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ee:	0112      	lsls	r2, r2, #4
 80022f0:	b2d2      	uxtb	r2, r2
 80022f2:	440b      	add	r3, r1
 80022f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80022f8:	e00a      	b.n	8002310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	4908      	ldr	r1, [pc, #32]	@ (8002320 <__NVIC_SetPriority+0x50>)
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	f003 030f 	and.w	r3, r3, #15
 8002306:	3b04      	subs	r3, #4
 8002308:	0112      	lsls	r2, r2, #4
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	440b      	add	r3, r1
 800230e:	761a      	strb	r2, [r3, #24]
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	e000e100 	.word	0xe000e100
 8002320:	e000ed00 	.word	0xe000ed00

08002324 <NVIC_EncodePriority>:
{
 8002324:	b480      	push	{r7}
 8002326:	b089      	sub	sp, #36	@ 0x24
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	f1c3 0307 	rsb	r3, r3, #7
 800233e:	2b04      	cmp	r3, #4
 8002340:	bf28      	it	cs
 8002342:	2304      	movcs	r3, #4
 8002344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	3304      	adds	r3, #4
 800234a:	2b06      	cmp	r3, #6
 800234c:	d902      	bls.n	8002354 <NVIC_EncodePriority+0x30>
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	3b03      	subs	r3, #3
 8002352:	e000      	b.n	8002356 <NVIC_EncodePriority+0x32>
 8002354:	2300      	movs	r3, #0
 8002356:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002358:	f04f 32ff 	mov.w	r2, #4294967295
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	43da      	mvns	r2, r3
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	401a      	ands	r2, r3
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800236c:	f04f 31ff 	mov.w	r1, #4294967295
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	fa01 f303 	lsl.w	r3, r1, r3
 8002376:	43d9      	mvns	r1, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800237c:	4313      	orrs	r3, r2
}
 800237e:	4618      	mov	r0, r3
 8002380:	3724      	adds	r7, #36	@ 0x24
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
	...

0800238c <SysTick_Config>:
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3b01      	subs	r3, #1
 8002398:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800239c:	d301      	bcc.n	80023a2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800239e:	2301      	movs	r3, #1
 80023a0:	e00f      	b.n	80023c2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023a2:	4a0a      	ldr	r2, [pc, #40]	@ (80023cc <SysTick_Config+0x40>)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023aa:	210f      	movs	r1, #15
 80023ac:	f04f 30ff 	mov.w	r0, #4294967295
 80023b0:	f7ff ff8e 	bl	80022d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023b4:	4b05      	ldr	r3, [pc, #20]	@ (80023cc <SysTick_Config+0x40>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ba:	4b04      	ldr	r3, [pc, #16]	@ (80023cc <SysTick_Config+0x40>)
 80023bc:	2207      	movs	r2, #7
 80023be:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	e000e010 	.word	0xe000e010

080023d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f7ff ff29 	bl	8002230 <__NVIC_SetPriorityGrouping>
}
 80023de:	bf00      	nop
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b086      	sub	sp, #24
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	4603      	mov	r3, r0
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	607a      	str	r2, [r7, #4]
 80023f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023f8:	f7ff ff3e 	bl	8002278 <__NVIC_GetPriorityGrouping>
 80023fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	68b9      	ldr	r1, [r7, #8]
 8002402:	6978      	ldr	r0, [r7, #20]
 8002404:	f7ff ff8e 	bl	8002324 <NVIC_EncodePriority>
 8002408:	4602      	mov	r2, r0
 800240a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800240e:	4611      	mov	r1, r2
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff ff5d 	bl	80022d0 <__NVIC_SetPriority>
}
 8002416:	bf00      	nop
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
 8002424:	4603      	mov	r3, r0
 8002426:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff ff31 	bl	8002294 <__NVIC_EnableIRQ>
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b082      	sub	sp, #8
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7ff ffa2 	bl	800238c <SysTick_Config>
 8002448:	4603      	mov	r3, r0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
	...

08002454 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002454:	b480      	push	{r7}
 8002456:	b087      	sub	sp, #28
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800245e:	2300      	movs	r3, #0
 8002460:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002462:	e17f      	b.n	8002764 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	2101      	movs	r1, #1
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	fa01 f303 	lsl.w	r3, r1, r3
 8002470:	4013      	ands	r3, r2
 8002472:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 8171 	beq.w	800275e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f003 0303 	and.w	r3, r3, #3
 8002484:	2b01      	cmp	r3, #1
 8002486:	d005      	beq.n	8002494 <HAL_GPIO_Init+0x40>
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f003 0303 	and.w	r3, r3, #3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d130      	bne.n	80024f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	2203      	movs	r2, #3
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	43db      	mvns	r3, r3
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	4013      	ands	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	68da      	ldr	r2, [r3, #12]
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024ca:	2201      	movs	r2, #1
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	43db      	mvns	r3, r3
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	4013      	ands	r3, r2
 80024d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	091b      	lsrs	r3, r3, #4
 80024e0:	f003 0201 	and.w	r2, r3, #1
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f003 0303 	and.w	r3, r3, #3
 80024fe:	2b03      	cmp	r3, #3
 8002500:	d118      	bne.n	8002534 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002506:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002508:	2201      	movs	r2, #1
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	4013      	ands	r3, r2
 8002516:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	08db      	lsrs	r3, r3, #3
 800251e:	f003 0201 	and.w	r2, r3, #1
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	4313      	orrs	r3, r2
 800252c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 0303 	and.w	r3, r3, #3
 800253c:	2b03      	cmp	r3, #3
 800253e:	d017      	beq.n	8002570 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	2203      	movs	r2, #3
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	43db      	mvns	r3, r3
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	4013      	ands	r3, r2
 8002556:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	4313      	orrs	r3, r2
 8002568:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f003 0303 	and.w	r3, r3, #3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d123      	bne.n	80025c4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	08da      	lsrs	r2, r3, #3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3208      	adds	r2, #8
 8002584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002588:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	220f      	movs	r2, #15
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	4013      	ands	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	691a      	ldr	r2, [r3, #16]
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	08da      	lsrs	r2, r3, #3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	3208      	adds	r2, #8
 80025be:	6939      	ldr	r1, [r7, #16]
 80025c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	2203      	movs	r2, #3
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	43db      	mvns	r3, r3
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	4013      	ands	r3, r2
 80025da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f003 0203 	and.w	r2, r3, #3
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002600:	2b00      	cmp	r3, #0
 8002602:	f000 80ac 	beq.w	800275e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002606:	4b5f      	ldr	r3, [pc, #380]	@ (8002784 <HAL_GPIO_Init+0x330>)
 8002608:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800260a:	4a5e      	ldr	r2, [pc, #376]	@ (8002784 <HAL_GPIO_Init+0x330>)
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	6613      	str	r3, [r2, #96]	@ 0x60
 8002612:	4b5c      	ldr	r3, [pc, #368]	@ (8002784 <HAL_GPIO_Init+0x330>)
 8002614:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	60bb      	str	r3, [r7, #8]
 800261c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800261e:	4a5a      	ldr	r2, [pc, #360]	@ (8002788 <HAL_GPIO_Init+0x334>)
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	089b      	lsrs	r3, r3, #2
 8002624:	3302      	adds	r3, #2
 8002626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800262a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	220f      	movs	r2, #15
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43db      	mvns	r3, r3
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	4013      	ands	r3, r2
 8002640:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002648:	d025      	beq.n	8002696 <HAL_GPIO_Init+0x242>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a4f      	ldr	r2, [pc, #316]	@ (800278c <HAL_GPIO_Init+0x338>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d01f      	beq.n	8002692 <HAL_GPIO_Init+0x23e>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a4e      	ldr	r2, [pc, #312]	@ (8002790 <HAL_GPIO_Init+0x33c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d019      	beq.n	800268e <HAL_GPIO_Init+0x23a>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a4d      	ldr	r2, [pc, #308]	@ (8002794 <HAL_GPIO_Init+0x340>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d013      	beq.n	800268a <HAL_GPIO_Init+0x236>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a4c      	ldr	r2, [pc, #304]	@ (8002798 <HAL_GPIO_Init+0x344>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d00d      	beq.n	8002686 <HAL_GPIO_Init+0x232>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a4b      	ldr	r2, [pc, #300]	@ (800279c <HAL_GPIO_Init+0x348>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d007      	beq.n	8002682 <HAL_GPIO_Init+0x22e>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a4a      	ldr	r2, [pc, #296]	@ (80027a0 <HAL_GPIO_Init+0x34c>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d101      	bne.n	800267e <HAL_GPIO_Init+0x22a>
 800267a:	2306      	movs	r3, #6
 800267c:	e00c      	b.n	8002698 <HAL_GPIO_Init+0x244>
 800267e:	2307      	movs	r3, #7
 8002680:	e00a      	b.n	8002698 <HAL_GPIO_Init+0x244>
 8002682:	2305      	movs	r3, #5
 8002684:	e008      	b.n	8002698 <HAL_GPIO_Init+0x244>
 8002686:	2304      	movs	r3, #4
 8002688:	e006      	b.n	8002698 <HAL_GPIO_Init+0x244>
 800268a:	2303      	movs	r3, #3
 800268c:	e004      	b.n	8002698 <HAL_GPIO_Init+0x244>
 800268e:	2302      	movs	r3, #2
 8002690:	e002      	b.n	8002698 <HAL_GPIO_Init+0x244>
 8002692:	2301      	movs	r3, #1
 8002694:	e000      	b.n	8002698 <HAL_GPIO_Init+0x244>
 8002696:	2300      	movs	r3, #0
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	f002 0203 	and.w	r2, r2, #3
 800269e:	0092      	lsls	r2, r2, #2
 80026a0:	4093      	lsls	r3, r2
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026a8:	4937      	ldr	r1, [pc, #220]	@ (8002788 <HAL_GPIO_Init+0x334>)
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	089b      	lsrs	r3, r3, #2
 80026ae:	3302      	adds	r3, #2
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026b6:	4b3b      	ldr	r3, [pc, #236]	@ (80027a4 <HAL_GPIO_Init+0x350>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	43db      	mvns	r3, r3
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	4013      	ands	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026da:	4a32      	ldr	r2, [pc, #200]	@ (80027a4 <HAL_GPIO_Init+0x350>)
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026e0:	4b30      	ldr	r3, [pc, #192]	@ (80027a4 <HAL_GPIO_Init+0x350>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	43db      	mvns	r3, r3
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	4013      	ands	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	4313      	orrs	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002704:	4a27      	ldr	r2, [pc, #156]	@ (80027a4 <HAL_GPIO_Init+0x350>)
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800270a:	4b26      	ldr	r3, [pc, #152]	@ (80027a4 <HAL_GPIO_Init+0x350>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	43db      	mvns	r3, r3
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	4013      	ands	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	4313      	orrs	r3, r2
 800272c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800272e:	4a1d      	ldr	r2, [pc, #116]	@ (80027a4 <HAL_GPIO_Init+0x350>)
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002734:	4b1b      	ldr	r3, [pc, #108]	@ (80027a4 <HAL_GPIO_Init+0x350>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	43db      	mvns	r3, r3
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	4013      	ands	r3, r2
 8002742:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d003      	beq.n	8002758 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	4313      	orrs	r3, r2
 8002756:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002758:	4a12      	ldr	r2, [pc, #72]	@ (80027a4 <HAL_GPIO_Init+0x350>)
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	3301      	adds	r3, #1
 8002762:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	fa22 f303 	lsr.w	r3, r2, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	f47f ae78 	bne.w	8002464 <HAL_GPIO_Init+0x10>
  }
}
 8002774:	bf00      	nop
 8002776:	bf00      	nop
 8002778:	371c      	adds	r7, #28
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	40021000 	.word	0x40021000
 8002788:	40010000 	.word	0x40010000
 800278c:	48000400 	.word	0x48000400
 8002790:	48000800 	.word	0x48000800
 8002794:	48000c00 	.word	0x48000c00
 8002798:	48001000 	.word	0x48001000
 800279c:	48001400 	.word	0x48001400
 80027a0:	48001800 	.word	0x48001800
 80027a4:	40010400 	.word	0x40010400

080027a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	460b      	mov	r3, r1
 80027b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	691a      	ldr	r2, [r3, #16]
 80027b8:	887b      	ldrh	r3, [r7, #2]
 80027ba:	4013      	ands	r3, r2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d002      	beq.n	80027c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027c0:	2301      	movs	r3, #1
 80027c2:	73fb      	strb	r3, [r7, #15]
 80027c4:	e001      	b.n	80027ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027c6:	2300      	movs	r3, #0
 80027c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3714      	adds	r7, #20
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	460b      	mov	r3, r1
 80027e2:	807b      	strh	r3, [r7, #2]
 80027e4:	4613      	mov	r3, r2
 80027e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027e8:	787b      	ldrb	r3, [r7, #1]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027ee:	887a      	ldrh	r2, [r7, #2]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027f4:	e002      	b.n	80027fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027f6:	887a      	ldrh	r2, [r7, #2]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002812:	4b08      	ldr	r3, [pc, #32]	@ (8002834 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002814:	695a      	ldr	r2, [r3, #20]
 8002816:	88fb      	ldrh	r3, [r7, #6]
 8002818:	4013      	ands	r3, r2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d006      	beq.n	800282c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800281e:	4a05      	ldr	r2, [pc, #20]	@ (8002834 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002820:	88fb      	ldrh	r3, [r7, #6]
 8002822:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002824:	88fb      	ldrh	r3, [r7, #6]
 8002826:	4618      	mov	r0, r3
 8002828:	f000 f806 	bl	8002838 <HAL_GPIO_EXTI_Callback>
  }
}
 800282c:	bf00      	nop
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40010400 	.word	0x40010400

08002838 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	4603      	mov	r3, r0
 8002840:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
	...

08002850 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002854:	4b04      	ldr	r3, [pc, #16]	@ (8002868 <HAL_PWREx_GetVoltageRange+0x18>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800285c:	4618      	mov	r0, r3
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	40007000 	.word	0x40007000

0800286c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800287a:	d130      	bne.n	80028de <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800287c:	4b23      	ldr	r3, [pc, #140]	@ (800290c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002884:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002888:	d038      	beq.n	80028fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800288a:	4b20      	ldr	r3, [pc, #128]	@ (800290c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002892:	4a1e      	ldr	r2, [pc, #120]	@ (800290c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002894:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002898:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800289a:	4b1d      	ldr	r3, [pc, #116]	@ (8002910 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2232      	movs	r2, #50	@ 0x32
 80028a0:	fb02 f303 	mul.w	r3, r2, r3
 80028a4:	4a1b      	ldr	r2, [pc, #108]	@ (8002914 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80028a6:	fba2 2303 	umull	r2, r3, r2, r3
 80028aa:	0c9b      	lsrs	r3, r3, #18
 80028ac:	3301      	adds	r3, #1
 80028ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028b0:	e002      	b.n	80028b8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	3b01      	subs	r3, #1
 80028b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028b8:	4b14      	ldr	r3, [pc, #80]	@ (800290c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028ba:	695b      	ldr	r3, [r3, #20]
 80028bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028c4:	d102      	bne.n	80028cc <HAL_PWREx_ControlVoltageScaling+0x60>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1f2      	bne.n	80028b2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028cc:	4b0f      	ldr	r3, [pc, #60]	@ (800290c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028d8:	d110      	bne.n	80028fc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e00f      	b.n	80028fe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80028de:	4b0b      	ldr	r3, [pc, #44]	@ (800290c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80028e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028ea:	d007      	beq.n	80028fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80028ec:	4b07      	ldr	r3, [pc, #28]	@ (800290c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80028f4:	4a05      	ldr	r2, [pc, #20]	@ (800290c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80028fa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	40007000 	.word	0x40007000
 8002910:	20000148 	.word	0x20000148
 8002914:	431bde83 	.word	0x431bde83

08002918 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b088      	sub	sp, #32
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e3ca      	b.n	80030c0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800292a:	4b97      	ldr	r3, [pc, #604]	@ (8002b88 <HAL_RCC_OscConfig+0x270>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 030c 	and.w	r3, r3, #12
 8002932:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002934:	4b94      	ldr	r3, [pc, #592]	@ (8002b88 <HAL_RCC_OscConfig+0x270>)
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	f003 0303 	and.w	r3, r3, #3
 800293c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0310 	and.w	r3, r3, #16
 8002946:	2b00      	cmp	r3, #0
 8002948:	f000 80e4 	beq.w	8002b14 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d007      	beq.n	8002962 <HAL_RCC_OscConfig+0x4a>
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	2b0c      	cmp	r3, #12
 8002956:	f040 808b 	bne.w	8002a70 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	2b01      	cmp	r3, #1
 800295e:	f040 8087 	bne.w	8002a70 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002962:	4b89      	ldr	r3, [pc, #548]	@ (8002b88 <HAL_RCC_OscConfig+0x270>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d005      	beq.n	800297a <HAL_RCC_OscConfig+0x62>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e3a2      	b.n	80030c0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a1a      	ldr	r2, [r3, #32]
 800297e:	4b82      	ldr	r3, [pc, #520]	@ (8002b88 <HAL_RCC_OscConfig+0x270>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0308 	and.w	r3, r3, #8
 8002986:	2b00      	cmp	r3, #0
 8002988:	d004      	beq.n	8002994 <HAL_RCC_OscConfig+0x7c>
 800298a:	4b7f      	ldr	r3, [pc, #508]	@ (8002b88 <HAL_RCC_OscConfig+0x270>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002992:	e005      	b.n	80029a0 <HAL_RCC_OscConfig+0x88>
 8002994:	4b7c      	ldr	r3, [pc, #496]	@ (8002b88 <HAL_RCC_OscConfig+0x270>)
 8002996:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800299a:	091b      	lsrs	r3, r3, #4
 800299c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d223      	bcs.n	80029ec <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f000 fd1d 	bl	80033e8 <RCC_SetFlashLatencyFromMSIRange>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e383      	b.n	80030c0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029b8:	4b73      	ldr	r3, [pc, #460]	@ (8002b88 <HAL_RCC_OscConfig+0x270>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a72      	ldr	r2, [pc, #456]	@ (8002b88 <HAL_RCC_OscConfig+0x270>)
 80029be:	f043 0308 	orr.w	r3, r3, #8
 80029c2:	6013      	str	r3, [r2, #0]
 80029c4:	4b70      	ldr	r3, [pc, #448]	@ (8002b88 <HAL_RCC_OscConfig+0x270>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	496d      	ldr	r1, [pc, #436]	@ (8002b88 <HAL_RCC_OscConfig+0x270>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029d6:	4b6c      	ldr	r3, [pc, #432]	@ (8002b88 <HAL_RCC_OscConfig+0x270>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	021b      	lsls	r3, r3, #8
 80029e4:	4968      	ldr	r1, [pc, #416]	@ (8002b88 <HAL_RCC_OscConfig+0x270>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	604b      	str	r3, [r1, #4]
 80029ea:	e025      	b.n	8002a38 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029ec:	4b66      	ldr	r3, [pc, #408]	@ (8002b88 <HAL_RCC_OscConfig+0x270>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a65      	ldr	r2, [pc, #404]	@ (8002b88 <HAL_RCC_OscConfig+0x270>)
 80029f2:	f043 0308 	orr.w	r3, r3, #8
 80029f6:	6013      	str	r3, [r2, #0]
 80029f8:	4b63      	ldr	r3, [pc, #396]	@ (8002b88 <HAL_RCC_OscConfig+0x270>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	4960      	ldr	r1, [pc, #384]	@ (8002b88 <HAL_RCC_OscConfig+0x270>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a0a:	4b5f      	ldr	r3, [pc, #380]	@ (8002b88 <HAL_RCC_OscConfig+0x270>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	021b      	lsls	r3, r3, #8
 8002a18:	495b      	ldr	r1, [pc, #364]	@ (8002b88 <HAL_RCC_OscConfig+0x270>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d109      	bne.n	8002a38 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f000 fcdd 	bl	80033e8 <RCC_SetFlashLatencyFromMSIRange>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e343      	b.n	80030c0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a38:	f000 fc4a 	bl	80032d0 <HAL_RCC_GetSysClockFreq>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	4b52      	ldr	r3, [pc, #328]	@ (8002b88 <HAL_RCC_OscConfig+0x270>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	091b      	lsrs	r3, r3, #4
 8002a44:	f003 030f 	and.w	r3, r3, #15
 8002a48:	4950      	ldr	r1, [pc, #320]	@ (8002b8c <HAL_RCC_OscConfig+0x274>)
 8002a4a:	5ccb      	ldrb	r3, [r1, r3]
 8002a4c:	f003 031f 	and.w	r3, r3, #31
 8002a50:	fa22 f303 	lsr.w	r3, r2, r3
 8002a54:	4a4e      	ldr	r2, [pc, #312]	@ (8002b90 <HAL_RCC_OscConfig+0x278>)
 8002a56:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a58:	4b4e      	ldr	r3, [pc, #312]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff fb67 	bl	8002130 <HAL_InitTick>
 8002a62:	4603      	mov	r3, r0
 8002a64:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002a66:	7bfb      	ldrb	r3, [r7, #15]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d052      	beq.n	8002b12 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
 8002a6e:	e327      	b.n	80030c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d032      	beq.n	8002ade <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a78:	4b43      	ldr	r3, [pc, #268]	@ (8002b88 <HAL_RCC_OscConfig+0x270>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a42      	ldr	r2, [pc, #264]	@ (8002b88 <HAL_RCC_OscConfig+0x270>)
 8002a7e:	f043 0301 	orr.w	r3, r3, #1
 8002a82:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a84:	f7ff fba4 	bl	80021d0 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a8c:	f7ff fba0 	bl	80021d0 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e310      	b.n	80030c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a9e:	4b3a      	ldr	r3, [pc, #232]	@ (8002b88 <HAL_RCC_OscConfig+0x270>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0f0      	beq.n	8002a8c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002aaa:	4b37      	ldr	r3, [pc, #220]	@ (8002b88 <HAL_RCC_OscConfig+0x270>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a36      	ldr	r2, [pc, #216]	@ (8002b88 <HAL_RCC_OscConfig+0x270>)
 8002ab0:	f043 0308 	orr.w	r3, r3, #8
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	4b34      	ldr	r3, [pc, #208]	@ (8002b88 <HAL_RCC_OscConfig+0x270>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	4931      	ldr	r1, [pc, #196]	@ (8002b88 <HAL_RCC_OscConfig+0x270>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ac8:	4b2f      	ldr	r3, [pc, #188]	@ (8002b88 <HAL_RCC_OscConfig+0x270>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	021b      	lsls	r3, r3, #8
 8002ad6:	492c      	ldr	r1, [pc, #176]	@ (8002b88 <HAL_RCC_OscConfig+0x270>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	604b      	str	r3, [r1, #4]
 8002adc:	e01a      	b.n	8002b14 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ade:	4b2a      	ldr	r3, [pc, #168]	@ (8002b88 <HAL_RCC_OscConfig+0x270>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a29      	ldr	r2, [pc, #164]	@ (8002b88 <HAL_RCC_OscConfig+0x270>)
 8002ae4:	f023 0301 	bic.w	r3, r3, #1
 8002ae8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002aea:	f7ff fb71 	bl	80021d0 <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002af0:	e008      	b.n	8002b04 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002af2:	f7ff fb6d 	bl	80021d0 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e2dd      	b.n	80030c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b04:	4b20      	ldr	r3, [pc, #128]	@ (8002b88 <HAL_RCC_OscConfig+0x270>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1f0      	bne.n	8002af2 <HAL_RCC_OscConfig+0x1da>
 8002b10:	e000      	b.n	8002b14 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b12:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d074      	beq.n	8002c0a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	2b08      	cmp	r3, #8
 8002b24:	d005      	beq.n	8002b32 <HAL_RCC_OscConfig+0x21a>
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	2b0c      	cmp	r3, #12
 8002b2a:	d10e      	bne.n	8002b4a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	2b03      	cmp	r3, #3
 8002b30:	d10b      	bne.n	8002b4a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b32:	4b15      	ldr	r3, [pc, #84]	@ (8002b88 <HAL_RCC_OscConfig+0x270>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d064      	beq.n	8002c08 <HAL_RCC_OscConfig+0x2f0>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d160      	bne.n	8002c08 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e2ba      	b.n	80030c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b52:	d106      	bne.n	8002b62 <HAL_RCC_OscConfig+0x24a>
 8002b54:	4b0c      	ldr	r3, [pc, #48]	@ (8002b88 <HAL_RCC_OscConfig+0x270>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a0b      	ldr	r2, [pc, #44]	@ (8002b88 <HAL_RCC_OscConfig+0x270>)
 8002b5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b5e:	6013      	str	r3, [r2, #0]
 8002b60:	e026      	b.n	8002bb0 <HAL_RCC_OscConfig+0x298>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b6a:	d115      	bne.n	8002b98 <HAL_RCC_OscConfig+0x280>
 8002b6c:	4b06      	ldr	r3, [pc, #24]	@ (8002b88 <HAL_RCC_OscConfig+0x270>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a05      	ldr	r2, [pc, #20]	@ (8002b88 <HAL_RCC_OscConfig+0x270>)
 8002b72:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b76:	6013      	str	r3, [r2, #0]
 8002b78:	4b03      	ldr	r3, [pc, #12]	@ (8002b88 <HAL_RCC_OscConfig+0x270>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a02      	ldr	r2, [pc, #8]	@ (8002b88 <HAL_RCC_OscConfig+0x270>)
 8002b7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b82:	6013      	str	r3, [r2, #0]
 8002b84:	e014      	b.n	8002bb0 <HAL_RCC_OscConfig+0x298>
 8002b86:	bf00      	nop
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	08005280 	.word	0x08005280
 8002b90:	20000148 	.word	0x20000148
 8002b94:	2000014c 	.word	0x2000014c
 8002b98:	4ba0      	ldr	r3, [pc, #640]	@ (8002e1c <HAL_RCC_OscConfig+0x504>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a9f      	ldr	r2, [pc, #636]	@ (8002e1c <HAL_RCC_OscConfig+0x504>)
 8002b9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ba2:	6013      	str	r3, [r2, #0]
 8002ba4:	4b9d      	ldr	r3, [pc, #628]	@ (8002e1c <HAL_RCC_OscConfig+0x504>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a9c      	ldr	r2, [pc, #624]	@ (8002e1c <HAL_RCC_OscConfig+0x504>)
 8002baa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d013      	beq.n	8002be0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb8:	f7ff fb0a 	bl	80021d0 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bc0:	f7ff fb06 	bl	80021d0 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b64      	cmp	r3, #100	@ 0x64
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e276      	b.n	80030c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bd2:	4b92      	ldr	r3, [pc, #584]	@ (8002e1c <HAL_RCC_OscConfig+0x504>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0f0      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x2a8>
 8002bde:	e014      	b.n	8002c0a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be0:	f7ff faf6 	bl	80021d0 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002be8:	f7ff faf2 	bl	80021d0 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b64      	cmp	r3, #100	@ 0x64
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e262      	b.n	80030c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bfa:	4b88      	ldr	r3, [pc, #544]	@ (8002e1c <HAL_RCC_OscConfig+0x504>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1f0      	bne.n	8002be8 <HAL_RCC_OscConfig+0x2d0>
 8002c06:	e000      	b.n	8002c0a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d060      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	2b04      	cmp	r3, #4
 8002c1a:	d005      	beq.n	8002c28 <HAL_RCC_OscConfig+0x310>
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	2b0c      	cmp	r3, #12
 8002c20:	d119      	bne.n	8002c56 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d116      	bne.n	8002c56 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c28:	4b7c      	ldr	r3, [pc, #496]	@ (8002e1c <HAL_RCC_OscConfig+0x504>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d005      	beq.n	8002c40 <HAL_RCC_OscConfig+0x328>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e23f      	b.n	80030c0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c40:	4b76      	ldr	r3, [pc, #472]	@ (8002e1c <HAL_RCC_OscConfig+0x504>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	061b      	lsls	r3, r3, #24
 8002c4e:	4973      	ldr	r1, [pc, #460]	@ (8002e1c <HAL_RCC_OscConfig+0x504>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c54:	e040      	b.n	8002cd8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d023      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c5e:	4b6f      	ldr	r3, [pc, #444]	@ (8002e1c <HAL_RCC_OscConfig+0x504>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a6e      	ldr	r2, [pc, #440]	@ (8002e1c <HAL_RCC_OscConfig+0x504>)
 8002c64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6a:	f7ff fab1 	bl	80021d0 <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c72:	f7ff faad 	bl	80021d0 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e21d      	b.n	80030c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c84:	4b65      	ldr	r3, [pc, #404]	@ (8002e1c <HAL_RCC_OscConfig+0x504>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0f0      	beq.n	8002c72 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c90:	4b62      	ldr	r3, [pc, #392]	@ (8002e1c <HAL_RCC_OscConfig+0x504>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	061b      	lsls	r3, r3, #24
 8002c9e:	495f      	ldr	r1, [pc, #380]	@ (8002e1c <HAL_RCC_OscConfig+0x504>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	604b      	str	r3, [r1, #4]
 8002ca4:	e018      	b.n	8002cd8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ca6:	4b5d      	ldr	r3, [pc, #372]	@ (8002e1c <HAL_RCC_OscConfig+0x504>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a5c      	ldr	r2, [pc, #368]	@ (8002e1c <HAL_RCC_OscConfig+0x504>)
 8002cac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002cb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb2:	f7ff fa8d 	bl	80021d0 <HAL_GetTick>
 8002cb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cb8:	e008      	b.n	8002ccc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cba:	f7ff fa89 	bl	80021d0 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e1f9      	b.n	80030c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ccc:	4b53      	ldr	r3, [pc, #332]	@ (8002e1c <HAL_RCC_OscConfig+0x504>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1f0      	bne.n	8002cba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0308 	and.w	r3, r3, #8
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d03c      	beq.n	8002d5e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d01c      	beq.n	8002d26 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cec:	4b4b      	ldr	r3, [pc, #300]	@ (8002e1c <HAL_RCC_OscConfig+0x504>)
 8002cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cf2:	4a4a      	ldr	r2, [pc, #296]	@ (8002e1c <HAL_RCC_OscConfig+0x504>)
 8002cf4:	f043 0301 	orr.w	r3, r3, #1
 8002cf8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cfc:	f7ff fa68 	bl	80021d0 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d04:	f7ff fa64 	bl	80021d0 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e1d4      	b.n	80030c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d16:	4b41      	ldr	r3, [pc, #260]	@ (8002e1c <HAL_RCC_OscConfig+0x504>)
 8002d18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0ef      	beq.n	8002d04 <HAL_RCC_OscConfig+0x3ec>
 8002d24:	e01b      	b.n	8002d5e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d26:	4b3d      	ldr	r3, [pc, #244]	@ (8002e1c <HAL_RCC_OscConfig+0x504>)
 8002d28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d2c:	4a3b      	ldr	r2, [pc, #236]	@ (8002e1c <HAL_RCC_OscConfig+0x504>)
 8002d2e:	f023 0301 	bic.w	r3, r3, #1
 8002d32:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d36:	f7ff fa4b 	bl	80021d0 <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d3c:	e008      	b.n	8002d50 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d3e:	f7ff fa47 	bl	80021d0 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e1b7      	b.n	80030c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d50:	4b32      	ldr	r3, [pc, #200]	@ (8002e1c <HAL_RCC_OscConfig+0x504>)
 8002d52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1ef      	bne.n	8002d3e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0304 	and.w	r3, r3, #4
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f000 80a6 	beq.w	8002eb8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d70:	4b2a      	ldr	r3, [pc, #168]	@ (8002e1c <HAL_RCC_OscConfig+0x504>)
 8002d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10d      	bne.n	8002d98 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d7c:	4b27      	ldr	r3, [pc, #156]	@ (8002e1c <HAL_RCC_OscConfig+0x504>)
 8002d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d80:	4a26      	ldr	r2, [pc, #152]	@ (8002e1c <HAL_RCC_OscConfig+0x504>)
 8002d82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d86:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d88:	4b24      	ldr	r3, [pc, #144]	@ (8002e1c <HAL_RCC_OscConfig+0x504>)
 8002d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d90:	60bb      	str	r3, [r7, #8]
 8002d92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d94:	2301      	movs	r3, #1
 8002d96:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d98:	4b21      	ldr	r3, [pc, #132]	@ (8002e20 <HAL_RCC_OscConfig+0x508>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d118      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002da4:	4b1e      	ldr	r3, [pc, #120]	@ (8002e20 <HAL_RCC_OscConfig+0x508>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a1d      	ldr	r2, [pc, #116]	@ (8002e20 <HAL_RCC_OscConfig+0x508>)
 8002daa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002db0:	f7ff fa0e 	bl	80021d0 <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002db8:	f7ff fa0a 	bl	80021d0 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e17a      	b.n	80030c0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dca:	4b15      	ldr	r3, [pc, #84]	@ (8002e20 <HAL_RCC_OscConfig+0x508>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0f0      	beq.n	8002db8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d108      	bne.n	8002df0 <HAL_RCC_OscConfig+0x4d8>
 8002dde:	4b0f      	ldr	r3, [pc, #60]	@ (8002e1c <HAL_RCC_OscConfig+0x504>)
 8002de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002de4:	4a0d      	ldr	r2, [pc, #52]	@ (8002e1c <HAL_RCC_OscConfig+0x504>)
 8002de6:	f043 0301 	orr.w	r3, r3, #1
 8002dea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002dee:	e029      	b.n	8002e44 <HAL_RCC_OscConfig+0x52c>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	2b05      	cmp	r3, #5
 8002df6:	d115      	bne.n	8002e24 <HAL_RCC_OscConfig+0x50c>
 8002df8:	4b08      	ldr	r3, [pc, #32]	@ (8002e1c <HAL_RCC_OscConfig+0x504>)
 8002dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dfe:	4a07      	ldr	r2, [pc, #28]	@ (8002e1c <HAL_RCC_OscConfig+0x504>)
 8002e00:	f043 0304 	orr.w	r3, r3, #4
 8002e04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e08:	4b04      	ldr	r3, [pc, #16]	@ (8002e1c <HAL_RCC_OscConfig+0x504>)
 8002e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e0e:	4a03      	ldr	r2, [pc, #12]	@ (8002e1c <HAL_RCC_OscConfig+0x504>)
 8002e10:	f043 0301 	orr.w	r3, r3, #1
 8002e14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e18:	e014      	b.n	8002e44 <HAL_RCC_OscConfig+0x52c>
 8002e1a:	bf00      	nop
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	40007000 	.word	0x40007000
 8002e24:	4b9c      	ldr	r3, [pc, #624]	@ (8003098 <HAL_RCC_OscConfig+0x780>)
 8002e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e2a:	4a9b      	ldr	r2, [pc, #620]	@ (8003098 <HAL_RCC_OscConfig+0x780>)
 8002e2c:	f023 0301 	bic.w	r3, r3, #1
 8002e30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e34:	4b98      	ldr	r3, [pc, #608]	@ (8003098 <HAL_RCC_OscConfig+0x780>)
 8002e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e3a:	4a97      	ldr	r2, [pc, #604]	@ (8003098 <HAL_RCC_OscConfig+0x780>)
 8002e3c:	f023 0304 	bic.w	r3, r3, #4
 8002e40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d016      	beq.n	8002e7a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e4c:	f7ff f9c0 	bl	80021d0 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e52:	e00a      	b.n	8002e6a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e54:	f7ff f9bc 	bl	80021d0 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e12a      	b.n	80030c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e6a:	4b8b      	ldr	r3, [pc, #556]	@ (8003098 <HAL_RCC_OscConfig+0x780>)
 8002e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d0ed      	beq.n	8002e54 <HAL_RCC_OscConfig+0x53c>
 8002e78:	e015      	b.n	8002ea6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e7a:	f7ff f9a9 	bl	80021d0 <HAL_GetTick>
 8002e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e80:	e00a      	b.n	8002e98 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e82:	f7ff f9a5 	bl	80021d0 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e113      	b.n	80030c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e98:	4b7f      	ldr	r3, [pc, #508]	@ (8003098 <HAL_RCC_OscConfig+0x780>)
 8002e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1ed      	bne.n	8002e82 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ea6:	7ffb      	ldrb	r3, [r7, #31]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d105      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eac:	4b7a      	ldr	r3, [pc, #488]	@ (8003098 <HAL_RCC_OscConfig+0x780>)
 8002eae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eb0:	4a79      	ldr	r2, [pc, #484]	@ (8003098 <HAL_RCC_OscConfig+0x780>)
 8002eb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002eb6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 80fe 	beq.w	80030be <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	f040 80d0 	bne.w	800306c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ecc:	4b72      	ldr	r3, [pc, #456]	@ (8003098 <HAL_RCC_OscConfig+0x780>)
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f003 0203 	and.w	r2, r3, #3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d130      	bne.n	8002f42 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eea:	3b01      	subs	r3, #1
 8002eec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d127      	bne.n	8002f42 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002efc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d11f      	bne.n	8002f42 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002f0c:	2a07      	cmp	r2, #7
 8002f0e:	bf14      	ite	ne
 8002f10:	2201      	movne	r2, #1
 8002f12:	2200      	moveq	r2, #0
 8002f14:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d113      	bne.n	8002f42 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f24:	085b      	lsrs	r3, r3, #1
 8002f26:	3b01      	subs	r3, #1
 8002f28:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d109      	bne.n	8002f42 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f38:	085b      	lsrs	r3, r3, #1
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d06e      	beq.n	8003020 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	2b0c      	cmp	r3, #12
 8002f46:	d069      	beq.n	800301c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f48:	4b53      	ldr	r3, [pc, #332]	@ (8003098 <HAL_RCC_OscConfig+0x780>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d105      	bne.n	8002f60 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002f54:	4b50      	ldr	r3, [pc, #320]	@ (8003098 <HAL_RCC_OscConfig+0x780>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e0ad      	b.n	80030c0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f64:	4b4c      	ldr	r3, [pc, #304]	@ (8003098 <HAL_RCC_OscConfig+0x780>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a4b      	ldr	r2, [pc, #300]	@ (8003098 <HAL_RCC_OscConfig+0x780>)
 8002f6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f6e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f70:	f7ff f92e 	bl	80021d0 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f78:	f7ff f92a 	bl	80021d0 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e09a      	b.n	80030c0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f8a:	4b43      	ldr	r3, [pc, #268]	@ (8003098 <HAL_RCC_OscConfig+0x780>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1f0      	bne.n	8002f78 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f96:	4b40      	ldr	r3, [pc, #256]	@ (8003098 <HAL_RCC_OscConfig+0x780>)
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	4b40      	ldr	r3, [pc, #256]	@ (800309c <HAL_RCC_OscConfig+0x784>)
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002fa6:	3a01      	subs	r2, #1
 8002fa8:	0112      	lsls	r2, r2, #4
 8002faa:	4311      	orrs	r1, r2
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002fb0:	0212      	lsls	r2, r2, #8
 8002fb2:	4311      	orrs	r1, r2
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002fb8:	0852      	lsrs	r2, r2, #1
 8002fba:	3a01      	subs	r2, #1
 8002fbc:	0552      	lsls	r2, r2, #21
 8002fbe:	4311      	orrs	r1, r2
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002fc4:	0852      	lsrs	r2, r2, #1
 8002fc6:	3a01      	subs	r2, #1
 8002fc8:	0652      	lsls	r2, r2, #25
 8002fca:	4311      	orrs	r1, r2
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002fd0:	0912      	lsrs	r2, r2, #4
 8002fd2:	0452      	lsls	r2, r2, #17
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	4930      	ldr	r1, [pc, #192]	@ (8003098 <HAL_RCC_OscConfig+0x780>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002fdc:	4b2e      	ldr	r3, [pc, #184]	@ (8003098 <HAL_RCC_OscConfig+0x780>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a2d      	ldr	r2, [pc, #180]	@ (8003098 <HAL_RCC_OscConfig+0x780>)
 8002fe2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fe6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fe8:	4b2b      	ldr	r3, [pc, #172]	@ (8003098 <HAL_RCC_OscConfig+0x780>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	4a2a      	ldr	r2, [pc, #168]	@ (8003098 <HAL_RCC_OscConfig+0x780>)
 8002fee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ff2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ff4:	f7ff f8ec 	bl	80021d0 <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ffa:	e008      	b.n	800300e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ffc:	f7ff f8e8 	bl	80021d0 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e058      	b.n	80030c0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800300e:	4b22      	ldr	r3, [pc, #136]	@ (8003098 <HAL_RCC_OscConfig+0x780>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d0f0      	beq.n	8002ffc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800301a:	e050      	b.n	80030be <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e04f      	b.n	80030c0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003020:	4b1d      	ldr	r3, [pc, #116]	@ (8003098 <HAL_RCC_OscConfig+0x780>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d148      	bne.n	80030be <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800302c:	4b1a      	ldr	r3, [pc, #104]	@ (8003098 <HAL_RCC_OscConfig+0x780>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a19      	ldr	r2, [pc, #100]	@ (8003098 <HAL_RCC_OscConfig+0x780>)
 8003032:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003036:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003038:	4b17      	ldr	r3, [pc, #92]	@ (8003098 <HAL_RCC_OscConfig+0x780>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	4a16      	ldr	r2, [pc, #88]	@ (8003098 <HAL_RCC_OscConfig+0x780>)
 800303e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003042:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003044:	f7ff f8c4 	bl	80021d0 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800304c:	f7ff f8c0 	bl	80021d0 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e030      	b.n	80030c0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800305e:	4b0e      	ldr	r3, [pc, #56]	@ (8003098 <HAL_RCC_OscConfig+0x780>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0f0      	beq.n	800304c <HAL_RCC_OscConfig+0x734>
 800306a:	e028      	b.n	80030be <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	2b0c      	cmp	r3, #12
 8003070:	d023      	beq.n	80030ba <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003072:	4b09      	ldr	r3, [pc, #36]	@ (8003098 <HAL_RCC_OscConfig+0x780>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a08      	ldr	r2, [pc, #32]	@ (8003098 <HAL_RCC_OscConfig+0x780>)
 8003078:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800307c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307e:	f7ff f8a7 	bl	80021d0 <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003084:	e00c      	b.n	80030a0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003086:	f7ff f8a3 	bl	80021d0 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d905      	bls.n	80030a0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e013      	b.n	80030c0 <HAL_RCC_OscConfig+0x7a8>
 8003098:	40021000 	.word	0x40021000
 800309c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030a0:	4b09      	ldr	r3, [pc, #36]	@ (80030c8 <HAL_RCC_OscConfig+0x7b0>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1ec      	bne.n	8003086 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80030ac:	4b06      	ldr	r3, [pc, #24]	@ (80030c8 <HAL_RCC_OscConfig+0x7b0>)
 80030ae:	68da      	ldr	r2, [r3, #12]
 80030b0:	4905      	ldr	r1, [pc, #20]	@ (80030c8 <HAL_RCC_OscConfig+0x7b0>)
 80030b2:	4b06      	ldr	r3, [pc, #24]	@ (80030cc <HAL_RCC_OscConfig+0x7b4>)
 80030b4:	4013      	ands	r3, r2
 80030b6:	60cb      	str	r3, [r1, #12]
 80030b8:	e001      	b.n	80030be <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e000      	b.n	80030c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3720      	adds	r7, #32
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40021000 	.word	0x40021000
 80030cc:	feeefffc 	.word	0xfeeefffc

080030d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e0e7      	b.n	80032b4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030e4:	4b75      	ldr	r3, [pc, #468]	@ (80032bc <HAL_RCC_ClockConfig+0x1ec>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d910      	bls.n	8003114 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f2:	4b72      	ldr	r3, [pc, #456]	@ (80032bc <HAL_RCC_ClockConfig+0x1ec>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f023 0207 	bic.w	r2, r3, #7
 80030fa:	4970      	ldr	r1, [pc, #448]	@ (80032bc <HAL_RCC_ClockConfig+0x1ec>)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	4313      	orrs	r3, r2
 8003100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003102:	4b6e      	ldr	r3, [pc, #440]	@ (80032bc <HAL_RCC_ClockConfig+0x1ec>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	683a      	ldr	r2, [r7, #0]
 800310c:	429a      	cmp	r2, r3
 800310e:	d001      	beq.n	8003114 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e0cf      	b.n	80032b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d010      	beq.n	8003142 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	4b66      	ldr	r3, [pc, #408]	@ (80032c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800312c:	429a      	cmp	r2, r3
 800312e:	d908      	bls.n	8003142 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003130:	4b63      	ldr	r3, [pc, #396]	@ (80032c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	4960      	ldr	r1, [pc, #384]	@ (80032c0 <HAL_RCC_ClockConfig+0x1f0>)
 800313e:	4313      	orrs	r3, r2
 8003140:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d04c      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b03      	cmp	r3, #3
 8003154:	d107      	bne.n	8003166 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003156:	4b5a      	ldr	r3, [pc, #360]	@ (80032c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d121      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e0a6      	b.n	80032b4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b02      	cmp	r3, #2
 800316c:	d107      	bne.n	800317e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800316e:	4b54      	ldr	r3, [pc, #336]	@ (80032c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d115      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e09a      	b.n	80032b4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d107      	bne.n	8003196 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003186:	4b4e      	ldr	r3, [pc, #312]	@ (80032c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d109      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e08e      	b.n	80032b4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003196:	4b4a      	ldr	r3, [pc, #296]	@ (80032c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e086      	b.n	80032b4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031a6:	4b46      	ldr	r3, [pc, #280]	@ (80032c0 <HAL_RCC_ClockConfig+0x1f0>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f023 0203 	bic.w	r2, r3, #3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	4943      	ldr	r1, [pc, #268]	@ (80032c0 <HAL_RCC_ClockConfig+0x1f0>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031b8:	f7ff f80a 	bl	80021d0 <HAL_GetTick>
 80031bc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031be:	e00a      	b.n	80031d6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031c0:	f7ff f806 	bl	80021d0 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e06e      	b.n	80032b4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031d6:	4b3a      	ldr	r3, [pc, #232]	@ (80032c0 <HAL_RCC_ClockConfig+0x1f0>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 020c 	and.w	r2, r3, #12
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d1eb      	bne.n	80031c0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d010      	beq.n	8003216 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	4b31      	ldr	r3, [pc, #196]	@ (80032c0 <HAL_RCC_ClockConfig+0x1f0>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003200:	429a      	cmp	r2, r3
 8003202:	d208      	bcs.n	8003216 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003204:	4b2e      	ldr	r3, [pc, #184]	@ (80032c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	492b      	ldr	r1, [pc, #172]	@ (80032c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003212:	4313      	orrs	r3, r2
 8003214:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003216:	4b29      	ldr	r3, [pc, #164]	@ (80032bc <HAL_RCC_ClockConfig+0x1ec>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	429a      	cmp	r2, r3
 8003222:	d210      	bcs.n	8003246 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003224:	4b25      	ldr	r3, [pc, #148]	@ (80032bc <HAL_RCC_ClockConfig+0x1ec>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f023 0207 	bic.w	r2, r3, #7
 800322c:	4923      	ldr	r1, [pc, #140]	@ (80032bc <HAL_RCC_ClockConfig+0x1ec>)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	4313      	orrs	r3, r2
 8003232:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003234:	4b21      	ldr	r3, [pc, #132]	@ (80032bc <HAL_RCC_ClockConfig+0x1ec>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	d001      	beq.n	8003246 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e036      	b.n	80032b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0304 	and.w	r3, r3, #4
 800324e:	2b00      	cmp	r3, #0
 8003250:	d008      	beq.n	8003264 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003252:	4b1b      	ldr	r3, [pc, #108]	@ (80032c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	4918      	ldr	r1, [pc, #96]	@ (80032c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003260:	4313      	orrs	r3, r2
 8003262:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0308 	and.w	r3, r3, #8
 800326c:	2b00      	cmp	r3, #0
 800326e:	d009      	beq.n	8003284 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003270:	4b13      	ldr	r3, [pc, #76]	@ (80032c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	4910      	ldr	r1, [pc, #64]	@ (80032c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003280:	4313      	orrs	r3, r2
 8003282:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003284:	f000 f824 	bl	80032d0 <HAL_RCC_GetSysClockFreq>
 8003288:	4602      	mov	r2, r0
 800328a:	4b0d      	ldr	r3, [pc, #52]	@ (80032c0 <HAL_RCC_ClockConfig+0x1f0>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	091b      	lsrs	r3, r3, #4
 8003290:	f003 030f 	and.w	r3, r3, #15
 8003294:	490b      	ldr	r1, [pc, #44]	@ (80032c4 <HAL_RCC_ClockConfig+0x1f4>)
 8003296:	5ccb      	ldrb	r3, [r1, r3]
 8003298:	f003 031f 	and.w	r3, r3, #31
 800329c:	fa22 f303 	lsr.w	r3, r2, r3
 80032a0:	4a09      	ldr	r2, [pc, #36]	@ (80032c8 <HAL_RCC_ClockConfig+0x1f8>)
 80032a2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80032a4:	4b09      	ldr	r3, [pc, #36]	@ (80032cc <HAL_RCC_ClockConfig+0x1fc>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7fe ff41 	bl	8002130 <HAL_InitTick>
 80032ae:	4603      	mov	r3, r0
 80032b0:	72fb      	strb	r3, [r7, #11]

  return status;
 80032b2:	7afb      	ldrb	r3, [r7, #11]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40022000 	.word	0x40022000
 80032c0:	40021000 	.word	0x40021000
 80032c4:	08005280 	.word	0x08005280
 80032c8:	20000148 	.word	0x20000148
 80032cc:	2000014c 	.word	0x2000014c

080032d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b089      	sub	sp, #36	@ 0x24
 80032d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80032d6:	2300      	movs	r3, #0
 80032d8:	61fb      	str	r3, [r7, #28]
 80032da:	2300      	movs	r3, #0
 80032dc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032de:	4b3e      	ldr	r3, [pc, #248]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 030c 	and.w	r3, r3, #12
 80032e6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032e8:	4b3b      	ldr	r3, [pc, #236]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	f003 0303 	and.w	r3, r3, #3
 80032f0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d005      	beq.n	8003304 <HAL_RCC_GetSysClockFreq+0x34>
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	2b0c      	cmp	r3, #12
 80032fc:	d121      	bne.n	8003342 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d11e      	bne.n	8003342 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003304:	4b34      	ldr	r3, [pc, #208]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0308 	and.w	r3, r3, #8
 800330c:	2b00      	cmp	r3, #0
 800330e:	d107      	bne.n	8003320 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003310:	4b31      	ldr	r3, [pc, #196]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003312:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003316:	0a1b      	lsrs	r3, r3, #8
 8003318:	f003 030f 	and.w	r3, r3, #15
 800331c:	61fb      	str	r3, [r7, #28]
 800331e:	e005      	b.n	800332c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003320:	4b2d      	ldr	r3, [pc, #180]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	091b      	lsrs	r3, r3, #4
 8003326:	f003 030f 	and.w	r3, r3, #15
 800332a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800332c:	4a2b      	ldr	r2, [pc, #172]	@ (80033dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003334:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10d      	bne.n	8003358 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003340:	e00a      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	2b04      	cmp	r3, #4
 8003346:	d102      	bne.n	800334e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003348:	4b25      	ldr	r3, [pc, #148]	@ (80033e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800334a:	61bb      	str	r3, [r7, #24]
 800334c:	e004      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	2b08      	cmp	r3, #8
 8003352:	d101      	bne.n	8003358 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003354:	4b23      	ldr	r3, [pc, #140]	@ (80033e4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003356:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	2b0c      	cmp	r3, #12
 800335c:	d134      	bne.n	80033c8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800335e:	4b1e      	ldr	r3, [pc, #120]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	f003 0303 	and.w	r3, r3, #3
 8003366:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	2b02      	cmp	r3, #2
 800336c:	d003      	beq.n	8003376 <HAL_RCC_GetSysClockFreq+0xa6>
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	2b03      	cmp	r3, #3
 8003372:	d003      	beq.n	800337c <HAL_RCC_GetSysClockFreq+0xac>
 8003374:	e005      	b.n	8003382 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003376:	4b1a      	ldr	r3, [pc, #104]	@ (80033e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003378:	617b      	str	r3, [r7, #20]
      break;
 800337a:	e005      	b.n	8003388 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800337c:	4b19      	ldr	r3, [pc, #100]	@ (80033e4 <HAL_RCC_GetSysClockFreq+0x114>)
 800337e:	617b      	str	r3, [r7, #20]
      break;
 8003380:	e002      	b.n	8003388 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	617b      	str	r3, [r7, #20]
      break;
 8003386:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003388:	4b13      	ldr	r3, [pc, #76]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	091b      	lsrs	r3, r3, #4
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	3301      	adds	r3, #1
 8003394:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003396:	4b10      	ldr	r3, [pc, #64]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	0a1b      	lsrs	r3, r3, #8
 800339c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	fb03 f202 	mul.w	r2, r3, r2
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033ae:	4b0a      	ldr	r3, [pc, #40]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	0e5b      	lsrs	r3, r3, #25
 80033b4:	f003 0303 	and.w	r3, r3, #3
 80033b8:	3301      	adds	r3, #1
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80033c8:	69bb      	ldr	r3, [r7, #24]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3724      	adds	r7, #36	@ 0x24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	40021000 	.word	0x40021000
 80033dc:	08005290 	.word	0x08005290
 80033e0:	00f42400 	.word	0x00f42400
 80033e4:	007a1200 	.word	0x007a1200

080033e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80033f0:	2300      	movs	r3, #0
 80033f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80033f4:	4b2a      	ldr	r3, [pc, #168]	@ (80034a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d003      	beq.n	8003408 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003400:	f7ff fa26 	bl	8002850 <HAL_PWREx_GetVoltageRange>
 8003404:	6178      	str	r0, [r7, #20]
 8003406:	e014      	b.n	8003432 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003408:	4b25      	ldr	r3, [pc, #148]	@ (80034a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800340a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800340c:	4a24      	ldr	r2, [pc, #144]	@ (80034a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800340e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003412:	6593      	str	r3, [r2, #88]	@ 0x58
 8003414:	4b22      	ldr	r3, [pc, #136]	@ (80034a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003416:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003418:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800341c:	60fb      	str	r3, [r7, #12]
 800341e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003420:	f7ff fa16 	bl	8002850 <HAL_PWREx_GetVoltageRange>
 8003424:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003426:	4b1e      	ldr	r3, [pc, #120]	@ (80034a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800342a:	4a1d      	ldr	r2, [pc, #116]	@ (80034a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800342c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003430:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003438:	d10b      	bne.n	8003452 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b80      	cmp	r3, #128	@ 0x80
 800343e:	d919      	bls.n	8003474 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2ba0      	cmp	r3, #160	@ 0xa0
 8003444:	d902      	bls.n	800344c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003446:	2302      	movs	r3, #2
 8003448:	613b      	str	r3, [r7, #16]
 800344a:	e013      	b.n	8003474 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800344c:	2301      	movs	r3, #1
 800344e:	613b      	str	r3, [r7, #16]
 8003450:	e010      	b.n	8003474 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2b80      	cmp	r3, #128	@ 0x80
 8003456:	d902      	bls.n	800345e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003458:	2303      	movs	r3, #3
 800345a:	613b      	str	r3, [r7, #16]
 800345c:	e00a      	b.n	8003474 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2b80      	cmp	r3, #128	@ 0x80
 8003462:	d102      	bne.n	800346a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003464:	2302      	movs	r3, #2
 8003466:	613b      	str	r3, [r7, #16]
 8003468:	e004      	b.n	8003474 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2b70      	cmp	r3, #112	@ 0x70
 800346e:	d101      	bne.n	8003474 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003470:	2301      	movs	r3, #1
 8003472:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003474:	4b0b      	ldr	r3, [pc, #44]	@ (80034a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f023 0207 	bic.w	r2, r3, #7
 800347c:	4909      	ldr	r1, [pc, #36]	@ (80034a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	4313      	orrs	r3, r2
 8003482:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003484:	4b07      	ldr	r3, [pc, #28]	@ (80034a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0307 	and.w	r3, r3, #7
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	429a      	cmp	r2, r3
 8003490:	d001      	beq.n	8003496 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e000      	b.n	8003498 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	40021000 	.word	0x40021000
 80034a4:	40022000 	.word	0x40022000

080034a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e095      	b.n	80035e6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d108      	bne.n	80034d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034ca:	d009      	beq.n	80034e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	61da      	str	r2, [r3, #28]
 80034d2:	e005      	b.n	80034e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d106      	bne.n	8003500 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7fe fbd4 	bl	8001ca8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003516:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003520:	d902      	bls.n	8003528 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003522:	2300      	movs	r3, #0
 8003524:	60fb      	str	r3, [r7, #12]
 8003526:	e002      	b.n	800352e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003528:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800352c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003536:	d007      	beq.n	8003548 <HAL_SPI_Init+0xa0>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003540:	d002      	beq.n	8003548 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003558:	431a      	orrs	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	431a      	orrs	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	431a      	orrs	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003576:	431a      	orrs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	69db      	ldr	r3, [r3, #28]
 800357c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003580:	431a      	orrs	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800358a:	ea42 0103 	orr.w	r1, r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003592:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	0c1b      	lsrs	r3, r3, #16
 80035a4:	f003 0204 	and.w	r2, r3, #4
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ac:	f003 0310 	and.w	r3, r3, #16
 80035b0:	431a      	orrs	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035b6:	f003 0308 	and.w	r3, r3, #8
 80035ba:	431a      	orrs	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80035c4:	ea42 0103 	orr.w	r1, r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b088      	sub	sp, #32
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	60f8      	str	r0, [r7, #12]
 80035f6:	60b9      	str	r1, [r7, #8]
 80035f8:	603b      	str	r3, [r7, #0]
 80035fa:	4613      	mov	r3, r2
 80035fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80035fe:	2300      	movs	r3, #0
 8003600:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003608:	2b01      	cmp	r3, #1
 800360a:	d101      	bne.n	8003610 <HAL_SPI_Transmit+0x22>
 800360c:	2302      	movs	r3, #2
 800360e:	e15f      	b.n	80038d0 <HAL_SPI_Transmit+0x2e2>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003618:	f7fe fdda 	bl	80021d0 <HAL_GetTick>
 800361c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800361e:	88fb      	ldrh	r3, [r7, #6]
 8003620:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b01      	cmp	r3, #1
 800362c:	d002      	beq.n	8003634 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800362e:	2302      	movs	r3, #2
 8003630:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003632:	e148      	b.n	80038c6 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d002      	beq.n	8003640 <HAL_SPI_Transmit+0x52>
 800363a:	88fb      	ldrh	r3, [r7, #6]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d102      	bne.n	8003646 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003644:	e13f      	b.n	80038c6 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2203      	movs	r2, #3
 800364a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	68ba      	ldr	r2, [r7, #8]
 8003658:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	88fa      	ldrh	r2, [r7, #6]
 800365e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	88fa      	ldrh	r2, [r7, #6]
 8003664:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003690:	d10f      	bne.n	80036b2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80036b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036bc:	2b40      	cmp	r3, #64	@ 0x40
 80036be:	d007      	beq.n	80036d0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80036ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80036d8:	d94f      	bls.n	800377a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d002      	beq.n	80036e8 <HAL_SPI_Transmit+0xfa>
 80036e2:	8afb      	ldrh	r3, [r7, #22]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d142      	bne.n	800376e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ec:	881a      	ldrh	r2, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f8:	1c9a      	adds	r2, r3, #2
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003702:	b29b      	uxth	r3, r3
 8003704:	3b01      	subs	r3, #1
 8003706:	b29a      	uxth	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800370c:	e02f      	b.n	800376e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b02      	cmp	r3, #2
 800371a:	d112      	bne.n	8003742 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003720:	881a      	ldrh	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800372c:	1c9a      	adds	r2, r3, #2
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003736:	b29b      	uxth	r3, r3
 8003738:	3b01      	subs	r3, #1
 800373a:	b29a      	uxth	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003740:	e015      	b.n	800376e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003742:	f7fe fd45 	bl	80021d0 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	429a      	cmp	r2, r3
 8003750:	d803      	bhi.n	800375a <HAL_SPI_Transmit+0x16c>
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003758:	d102      	bne.n	8003760 <HAL_SPI_Transmit+0x172>
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d106      	bne.n	800376e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800376c:	e0ab      	b.n	80038c6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003772:	b29b      	uxth	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1ca      	bne.n	800370e <HAL_SPI_Transmit+0x120>
 8003778:	e080      	b.n	800387c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d002      	beq.n	8003788 <HAL_SPI_Transmit+0x19a>
 8003782:	8afb      	ldrh	r3, [r7, #22]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d174      	bne.n	8003872 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800378c:	b29b      	uxth	r3, r3
 800378e:	2b01      	cmp	r3, #1
 8003790:	d912      	bls.n	80037b8 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003796:	881a      	ldrh	r2, [r3, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037a2:	1c9a      	adds	r2, r3, #2
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	3b02      	subs	r3, #2
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80037b6:	e05c      	b.n	8003872 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	330c      	adds	r3, #12
 80037c2:	7812      	ldrb	r2, [r2, #0]
 80037c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ca:	1c5a      	adds	r2, r3, #1
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	3b01      	subs	r3, #1
 80037d8:	b29a      	uxth	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80037de:	e048      	b.n	8003872 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d12b      	bne.n	8003846 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d912      	bls.n	800381e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037fc:	881a      	ldrh	r2, [r3, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003808:	1c9a      	adds	r2, r3, #2
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003812:	b29b      	uxth	r3, r3
 8003814:	3b02      	subs	r3, #2
 8003816:	b29a      	uxth	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800381c:	e029      	b.n	8003872 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	330c      	adds	r3, #12
 8003828:	7812      	ldrb	r2, [r2, #0]
 800382a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003830:	1c5a      	adds	r2, r3, #1
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800383a:	b29b      	uxth	r3, r3
 800383c:	3b01      	subs	r3, #1
 800383e:	b29a      	uxth	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003844:	e015      	b.n	8003872 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003846:	f7fe fcc3 	bl	80021d0 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	429a      	cmp	r2, r3
 8003854:	d803      	bhi.n	800385e <HAL_SPI_Transmit+0x270>
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800385c:	d102      	bne.n	8003864 <HAL_SPI_Transmit+0x276>
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d106      	bne.n	8003872 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003870:	e029      	b.n	80038c6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003876:	b29b      	uxth	r3, r3
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1b1      	bne.n	80037e0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	6839      	ldr	r1, [r7, #0]
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f000 fb69 	bl	8003f58 <SPI_EndRxTxTransaction>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d002      	beq.n	8003892 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2220      	movs	r2, #32
 8003890:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10a      	bne.n	80038b0 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800389a:	2300      	movs	r3, #0
 800389c:	613b      	str	r3, [r7, #16]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	613b      	str	r3, [r7, #16]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	613b      	str	r3, [r7, #16]
 80038ae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d002      	beq.n	80038be <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	77fb      	strb	r3, [r7, #31]
 80038bc:	e003      	b.n	80038c6 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80038ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3720      	adds	r7, #32
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b08a      	sub	sp, #40	@ 0x28
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
 80038e4:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80038e6:	2301      	movs	r3, #1
 80038e8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80038ea:	2300      	movs	r3, #0
 80038ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d101      	bne.n	80038fe <HAL_SPI_TransmitReceive+0x26>
 80038fa:	2302      	movs	r3, #2
 80038fc:	e20a      	b.n	8003d14 <HAL_SPI_TransmitReceive+0x43c>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003906:	f7fe fc63 	bl	80021d0 <HAL_GetTick>
 800390a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003912:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800391a:	887b      	ldrh	r3, [r7, #2]
 800391c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800391e:	887b      	ldrh	r3, [r7, #2]
 8003920:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003922:	7efb      	ldrb	r3, [r7, #27]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d00e      	beq.n	8003946 <HAL_SPI_TransmitReceive+0x6e>
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800392e:	d106      	bne.n	800393e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d102      	bne.n	800393e <HAL_SPI_TransmitReceive+0x66>
 8003938:	7efb      	ldrb	r3, [r7, #27]
 800393a:	2b04      	cmp	r3, #4
 800393c:	d003      	beq.n	8003946 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800393e:	2302      	movs	r3, #2
 8003940:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003944:	e1e0      	b.n	8003d08 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d005      	beq.n	8003958 <HAL_SPI_TransmitReceive+0x80>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d002      	beq.n	8003958 <HAL_SPI_TransmitReceive+0x80>
 8003952:	887b      	ldrh	r3, [r7, #2]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d103      	bne.n	8003960 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800395e:	e1d3      	b.n	8003d08 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b04      	cmp	r3, #4
 800396a:	d003      	beq.n	8003974 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2205      	movs	r2, #5
 8003970:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	887a      	ldrh	r2, [r7, #2]
 8003984:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	887a      	ldrh	r2, [r7, #2]
 800398c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	887a      	ldrh	r2, [r7, #2]
 800399a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	887a      	ldrh	r2, [r7, #2]
 80039a0:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80039b6:	d802      	bhi.n	80039be <HAL_SPI_TransmitReceive+0xe6>
 80039b8:	8a3b      	ldrh	r3, [r7, #16]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d908      	bls.n	80039d0 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80039cc:	605a      	str	r2, [r3, #4]
 80039ce:	e007      	b.n	80039e0 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	685a      	ldr	r2, [r3, #4]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80039de:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039ea:	2b40      	cmp	r3, #64	@ 0x40
 80039ec:	d007      	beq.n	80039fe <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80039fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a06:	f240 8081 	bls.w	8003b0c <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d002      	beq.n	8003a18 <HAL_SPI_TransmitReceive+0x140>
 8003a12:	8a7b      	ldrh	r3, [r7, #18]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d16d      	bne.n	8003af4 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a1c:	881a      	ldrh	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a28:	1c9a      	adds	r2, r3, #2
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	3b01      	subs	r3, #1
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a3c:	e05a      	b.n	8003af4 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d11b      	bne.n	8003a84 <HAL_SPI_TransmitReceive+0x1ac>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d016      	beq.n	8003a84 <HAL_SPI_TransmitReceive+0x1ac>
 8003a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d113      	bne.n	8003a84 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a60:	881a      	ldrh	r2, [r3, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a6c:	1c9a      	adds	r2, r3, #2
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a80:	2300      	movs	r3, #0
 8003a82:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d11c      	bne.n	8003acc <HAL_SPI_TransmitReceive+0x1f4>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d016      	beq.n	8003acc <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68da      	ldr	r2, [r3, #12]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa8:	b292      	uxth	r2, r2
 8003aaa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab0:	1c9a      	adds	r2, r3, #2
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003acc:	f7fe fb80 	bl	80021d0 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d80b      	bhi.n	8003af4 <HAL_SPI_TransmitReceive+0x21c>
 8003adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae2:	d007      	beq.n	8003af4 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003af2:	e109      	b.n	8003d08 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d19f      	bne.n	8003a3e <HAL_SPI_TransmitReceive+0x166>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d199      	bne.n	8003a3e <HAL_SPI_TransmitReceive+0x166>
 8003b0a:	e0e3      	b.n	8003cd4 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d003      	beq.n	8003b1c <HAL_SPI_TransmitReceive+0x244>
 8003b14:	8a7b      	ldrh	r3, [r7, #18]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	f040 80cf 	bne.w	8003cba <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d912      	bls.n	8003b4c <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b2a:	881a      	ldrh	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b36:	1c9a      	adds	r2, r3, #2
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	3b02      	subs	r3, #2
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003b4a:	e0b6      	b.n	8003cba <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	330c      	adds	r3, #12
 8003b56:	7812      	ldrb	r2, [r2, #0]
 8003b58:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b5e:	1c5a      	adds	r2, r3, #1
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b72:	e0a2      	b.n	8003cba <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d134      	bne.n	8003bec <HAL_SPI_TransmitReceive+0x314>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d02f      	beq.n	8003bec <HAL_SPI_TransmitReceive+0x314>
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d12c      	bne.n	8003bec <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d912      	bls.n	8003bc2 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ba0:	881a      	ldrh	r2, [r3, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bac:	1c9a      	adds	r2, r3, #2
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	3b02      	subs	r3, #2
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003bc0:	e012      	b.n	8003be8 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	330c      	adds	r3, #12
 8003bcc:	7812      	ldrb	r2, [r2, #0]
 8003bce:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd4:	1c5a      	adds	r2, r3, #1
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	3b01      	subs	r3, #1
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003be8:	2300      	movs	r3, #0
 8003bea:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d148      	bne.n	8003c8c <HAL_SPI_TransmitReceive+0x3b4>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d042      	beq.n	8003c8c <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d923      	bls.n	8003c5a <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68da      	ldr	r2, [r3, #12]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1c:	b292      	uxth	r2, r2
 8003c1e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c24:	1c9a      	adds	r2, r3, #2
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	3b02      	subs	r3, #2
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d81f      	bhi.n	8003c88 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003c56:	605a      	str	r2, [r3, #4]
 8003c58:	e016      	b.n	8003c88 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f103 020c 	add.w	r2, r3, #12
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c66:	7812      	ldrb	r2, [r2, #0]
 8003c68:	b2d2      	uxtb	r2, r2
 8003c6a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c70:	1c5a      	adds	r2, r3, #1
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c8c:	f7fe faa0 	bl	80021d0 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d803      	bhi.n	8003ca4 <HAL_SPI_TransmitReceive+0x3cc>
 8003c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca2:	d102      	bne.n	8003caa <HAL_SPI_TransmitReceive+0x3d2>
 8003ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d107      	bne.n	8003cba <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003cb8:	e026      	b.n	8003d08 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f47f af57 	bne.w	8003b74 <HAL_SPI_TransmitReceive+0x29c>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f47f af50 	bne.w	8003b74 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cd4:	69fa      	ldr	r2, [r7, #28]
 8003cd6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f000 f93d 	bl	8003f58 <SPI_EndRxTxTransaction>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d005      	beq.n	8003cf0 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2220      	movs	r2, #32
 8003cee:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d003      	beq.n	8003d00 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cfe:	e003      	b.n	8003d08 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003d10:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3728      	adds	r7, #40	@ 0x28
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b088      	sub	sp, #32
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	603b      	str	r3, [r7, #0]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d2c:	f7fe fa50 	bl	80021d0 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d34:	1a9b      	subs	r3, r3, r2
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	4413      	add	r3, r2
 8003d3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d3c:	f7fe fa48 	bl	80021d0 <HAL_GetTick>
 8003d40:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d42:	4b39      	ldr	r3, [pc, #228]	@ (8003e28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	015b      	lsls	r3, r3, #5
 8003d48:	0d1b      	lsrs	r3, r3, #20
 8003d4a:	69fa      	ldr	r2, [r7, #28]
 8003d4c:	fb02 f303 	mul.w	r3, r2, r3
 8003d50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d52:	e054      	b.n	8003dfe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5a:	d050      	beq.n	8003dfe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d5c:	f7fe fa38 	bl	80021d0 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	69fa      	ldr	r2, [r7, #28]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d902      	bls.n	8003d72 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d13d      	bne.n	8003dee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	685a      	ldr	r2, [r3, #4]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003d80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d8a:	d111      	bne.n	8003db0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d94:	d004      	beq.n	8003da0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d9e:	d107      	bne.n	8003db0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003dae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003db8:	d10f      	bne.n	8003dda <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003dd8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e017      	b.n	8003e1e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d101      	bne.n	8003df8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003df4:	2300      	movs	r3, #0
 8003df6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689a      	ldr	r2, [r3, #8]
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	4013      	ands	r3, r2
 8003e08:	68ba      	ldr	r2, [r7, #8]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	bf0c      	ite	eq
 8003e0e:	2301      	moveq	r3, #1
 8003e10:	2300      	movne	r3, #0
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	461a      	mov	r2, r3
 8003e16:	79fb      	ldrb	r3, [r7, #7]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d19b      	bne.n	8003d54 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3720      	adds	r7, #32
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	20000148 	.word	0x20000148

08003e2c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b08a      	sub	sp, #40	@ 0x28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
 8003e38:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003e3e:	f7fe f9c7 	bl	80021d0 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e46:	1a9b      	subs	r3, r3, r2
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003e4e:	f7fe f9bf 	bl	80021d0 <HAL_GetTick>
 8003e52:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	330c      	adds	r3, #12
 8003e5a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003e5c:	4b3d      	ldr	r3, [pc, #244]	@ (8003f54 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	4613      	mov	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	4413      	add	r3, r2
 8003e66:	00da      	lsls	r2, r3, #3
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	0d1b      	lsrs	r3, r3, #20
 8003e6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e6e:	fb02 f303 	mul.w	r3, r2, r3
 8003e72:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003e74:	e060      	b.n	8003f38 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003e7c:	d107      	bne.n	8003e8e <SPI_WaitFifoStateUntilTimeout+0x62>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d104      	bne.n	8003e8e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003e8c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e94:	d050      	beq.n	8003f38 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e96:	f7fe f99b 	bl	80021d0 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	6a3b      	ldr	r3, [r7, #32]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d902      	bls.n	8003eac <SPI_WaitFifoStateUntilTimeout+0x80>
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d13d      	bne.n	8003f28 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003eba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ec4:	d111      	bne.n	8003eea <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ece:	d004      	beq.n	8003eda <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ed8:	d107      	bne.n	8003eea <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ee8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ef2:	d10f      	bne.n	8003f14 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f12:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e010      	b.n	8003f4a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	3b01      	subs	r3, #1
 8003f36:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689a      	ldr	r2, [r3, #8]
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	4013      	ands	r3, r2
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d196      	bne.n	8003e76 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3728      	adds	r7, #40	@ 0x28
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	20000148 	.word	0x20000148

08003f58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af02      	add	r7, sp, #8
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	9300      	str	r3, [sp, #0]
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f7ff ff5b 	bl	8003e2c <SPI_WaitFifoStateUntilTimeout>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d007      	beq.n	8003f8c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f80:	f043 0220 	orr.w	r2, r3, #32
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e027      	b.n	8003fdc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	9300      	str	r3, [sp, #0]
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	2200      	movs	r2, #0
 8003f94:	2180      	movs	r1, #128	@ 0x80
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f7ff fec0 	bl	8003d1c <SPI_WaitFlagStateUntilTimeout>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d007      	beq.n	8003fb2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fa6:	f043 0220 	orr.w	r2, r3, #32
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e014      	b.n	8003fdc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f7ff ff34 	bl	8003e2c <SPI_WaitFifoStateUntilTimeout>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d007      	beq.n	8003fda <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fce:	f043 0220 	orr.w	r2, r3, #32
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e000      	b.n	8003fdc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <malloc>:
 8003fe4:	4b02      	ldr	r3, [pc, #8]	@ (8003ff0 <malloc+0xc>)
 8003fe6:	4601      	mov	r1, r0
 8003fe8:	6818      	ldr	r0, [r3, #0]
 8003fea:	f000 b82d 	b.w	8004048 <_malloc_r>
 8003fee:	bf00      	nop
 8003ff0:	20000160 	.word	0x20000160

08003ff4 <free>:
 8003ff4:	4b02      	ldr	r3, [pc, #8]	@ (8004000 <free+0xc>)
 8003ff6:	4601      	mov	r1, r0
 8003ff8:	6818      	ldr	r0, [r3, #0]
 8003ffa:	f000 ba83 	b.w	8004504 <_free_r>
 8003ffe:	bf00      	nop
 8004000:	20000160 	.word	0x20000160

08004004 <sbrk_aligned>:
 8004004:	b570      	push	{r4, r5, r6, lr}
 8004006:	4e0f      	ldr	r6, [pc, #60]	@ (8004044 <sbrk_aligned+0x40>)
 8004008:	460c      	mov	r4, r1
 800400a:	6831      	ldr	r1, [r6, #0]
 800400c:	4605      	mov	r5, r0
 800400e:	b911      	cbnz	r1, 8004016 <sbrk_aligned+0x12>
 8004010:	f000 fa1a 	bl	8004448 <_sbrk_r>
 8004014:	6030      	str	r0, [r6, #0]
 8004016:	4621      	mov	r1, r4
 8004018:	4628      	mov	r0, r5
 800401a:	f000 fa15 	bl	8004448 <_sbrk_r>
 800401e:	1c43      	adds	r3, r0, #1
 8004020:	d103      	bne.n	800402a <sbrk_aligned+0x26>
 8004022:	f04f 34ff 	mov.w	r4, #4294967295
 8004026:	4620      	mov	r0, r4
 8004028:	bd70      	pop	{r4, r5, r6, pc}
 800402a:	1cc4      	adds	r4, r0, #3
 800402c:	f024 0403 	bic.w	r4, r4, #3
 8004030:	42a0      	cmp	r0, r4
 8004032:	d0f8      	beq.n	8004026 <sbrk_aligned+0x22>
 8004034:	1a21      	subs	r1, r4, r0
 8004036:	4628      	mov	r0, r5
 8004038:	f000 fa06 	bl	8004448 <_sbrk_r>
 800403c:	3001      	adds	r0, #1
 800403e:	d1f2      	bne.n	8004026 <sbrk_aligned+0x22>
 8004040:	e7ef      	b.n	8004022 <sbrk_aligned+0x1e>
 8004042:	bf00      	nop
 8004044:	20000370 	.word	0x20000370

08004048 <_malloc_r>:
 8004048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800404c:	1ccd      	adds	r5, r1, #3
 800404e:	f025 0503 	bic.w	r5, r5, #3
 8004052:	3508      	adds	r5, #8
 8004054:	2d0c      	cmp	r5, #12
 8004056:	bf38      	it	cc
 8004058:	250c      	movcc	r5, #12
 800405a:	2d00      	cmp	r5, #0
 800405c:	4606      	mov	r6, r0
 800405e:	db01      	blt.n	8004064 <_malloc_r+0x1c>
 8004060:	42a9      	cmp	r1, r5
 8004062:	d904      	bls.n	800406e <_malloc_r+0x26>
 8004064:	230c      	movs	r3, #12
 8004066:	6033      	str	r3, [r6, #0]
 8004068:	2000      	movs	r0, #0
 800406a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800406e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004144 <_malloc_r+0xfc>
 8004072:	f000 f869 	bl	8004148 <__malloc_lock>
 8004076:	f8d8 3000 	ldr.w	r3, [r8]
 800407a:	461c      	mov	r4, r3
 800407c:	bb44      	cbnz	r4, 80040d0 <_malloc_r+0x88>
 800407e:	4629      	mov	r1, r5
 8004080:	4630      	mov	r0, r6
 8004082:	f7ff ffbf 	bl	8004004 <sbrk_aligned>
 8004086:	1c43      	adds	r3, r0, #1
 8004088:	4604      	mov	r4, r0
 800408a:	d158      	bne.n	800413e <_malloc_r+0xf6>
 800408c:	f8d8 4000 	ldr.w	r4, [r8]
 8004090:	4627      	mov	r7, r4
 8004092:	2f00      	cmp	r7, #0
 8004094:	d143      	bne.n	800411e <_malloc_r+0xd6>
 8004096:	2c00      	cmp	r4, #0
 8004098:	d04b      	beq.n	8004132 <_malloc_r+0xea>
 800409a:	6823      	ldr	r3, [r4, #0]
 800409c:	4639      	mov	r1, r7
 800409e:	4630      	mov	r0, r6
 80040a0:	eb04 0903 	add.w	r9, r4, r3
 80040a4:	f000 f9d0 	bl	8004448 <_sbrk_r>
 80040a8:	4581      	cmp	r9, r0
 80040aa:	d142      	bne.n	8004132 <_malloc_r+0xea>
 80040ac:	6821      	ldr	r1, [r4, #0]
 80040ae:	1a6d      	subs	r5, r5, r1
 80040b0:	4629      	mov	r1, r5
 80040b2:	4630      	mov	r0, r6
 80040b4:	f7ff ffa6 	bl	8004004 <sbrk_aligned>
 80040b8:	3001      	adds	r0, #1
 80040ba:	d03a      	beq.n	8004132 <_malloc_r+0xea>
 80040bc:	6823      	ldr	r3, [r4, #0]
 80040be:	442b      	add	r3, r5
 80040c0:	6023      	str	r3, [r4, #0]
 80040c2:	f8d8 3000 	ldr.w	r3, [r8]
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	bb62      	cbnz	r2, 8004124 <_malloc_r+0xdc>
 80040ca:	f8c8 7000 	str.w	r7, [r8]
 80040ce:	e00f      	b.n	80040f0 <_malloc_r+0xa8>
 80040d0:	6822      	ldr	r2, [r4, #0]
 80040d2:	1b52      	subs	r2, r2, r5
 80040d4:	d420      	bmi.n	8004118 <_malloc_r+0xd0>
 80040d6:	2a0b      	cmp	r2, #11
 80040d8:	d917      	bls.n	800410a <_malloc_r+0xc2>
 80040da:	1961      	adds	r1, r4, r5
 80040dc:	42a3      	cmp	r3, r4
 80040de:	6025      	str	r5, [r4, #0]
 80040e0:	bf18      	it	ne
 80040e2:	6059      	strne	r1, [r3, #4]
 80040e4:	6863      	ldr	r3, [r4, #4]
 80040e6:	bf08      	it	eq
 80040e8:	f8c8 1000 	streq.w	r1, [r8]
 80040ec:	5162      	str	r2, [r4, r5]
 80040ee:	604b      	str	r3, [r1, #4]
 80040f0:	4630      	mov	r0, r6
 80040f2:	f000 f82f 	bl	8004154 <__malloc_unlock>
 80040f6:	f104 000b 	add.w	r0, r4, #11
 80040fa:	1d23      	adds	r3, r4, #4
 80040fc:	f020 0007 	bic.w	r0, r0, #7
 8004100:	1ac2      	subs	r2, r0, r3
 8004102:	bf1c      	itt	ne
 8004104:	1a1b      	subne	r3, r3, r0
 8004106:	50a3      	strne	r3, [r4, r2]
 8004108:	e7af      	b.n	800406a <_malloc_r+0x22>
 800410a:	6862      	ldr	r2, [r4, #4]
 800410c:	42a3      	cmp	r3, r4
 800410e:	bf0c      	ite	eq
 8004110:	f8c8 2000 	streq.w	r2, [r8]
 8004114:	605a      	strne	r2, [r3, #4]
 8004116:	e7eb      	b.n	80040f0 <_malloc_r+0xa8>
 8004118:	4623      	mov	r3, r4
 800411a:	6864      	ldr	r4, [r4, #4]
 800411c:	e7ae      	b.n	800407c <_malloc_r+0x34>
 800411e:	463c      	mov	r4, r7
 8004120:	687f      	ldr	r7, [r7, #4]
 8004122:	e7b6      	b.n	8004092 <_malloc_r+0x4a>
 8004124:	461a      	mov	r2, r3
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	42a3      	cmp	r3, r4
 800412a:	d1fb      	bne.n	8004124 <_malloc_r+0xdc>
 800412c:	2300      	movs	r3, #0
 800412e:	6053      	str	r3, [r2, #4]
 8004130:	e7de      	b.n	80040f0 <_malloc_r+0xa8>
 8004132:	230c      	movs	r3, #12
 8004134:	6033      	str	r3, [r6, #0]
 8004136:	4630      	mov	r0, r6
 8004138:	f000 f80c 	bl	8004154 <__malloc_unlock>
 800413c:	e794      	b.n	8004068 <_malloc_r+0x20>
 800413e:	6005      	str	r5, [r0, #0]
 8004140:	e7d6      	b.n	80040f0 <_malloc_r+0xa8>
 8004142:	bf00      	nop
 8004144:	20000374 	.word	0x20000374

08004148 <__malloc_lock>:
 8004148:	4801      	ldr	r0, [pc, #4]	@ (8004150 <__malloc_lock+0x8>)
 800414a:	f000 b9ca 	b.w	80044e2 <__retarget_lock_acquire_recursive>
 800414e:	bf00      	nop
 8004150:	200004b8 	.word	0x200004b8

08004154 <__malloc_unlock>:
 8004154:	4801      	ldr	r0, [pc, #4]	@ (800415c <__malloc_unlock+0x8>)
 8004156:	f000 b9c5 	b.w	80044e4 <__retarget_lock_release_recursive>
 800415a:	bf00      	nop
 800415c:	200004b8 	.word	0x200004b8

08004160 <std>:
 8004160:	2300      	movs	r3, #0
 8004162:	b510      	push	{r4, lr}
 8004164:	4604      	mov	r4, r0
 8004166:	e9c0 3300 	strd	r3, r3, [r0]
 800416a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800416e:	6083      	str	r3, [r0, #8]
 8004170:	8181      	strh	r1, [r0, #12]
 8004172:	6643      	str	r3, [r0, #100]	@ 0x64
 8004174:	81c2      	strh	r2, [r0, #14]
 8004176:	6183      	str	r3, [r0, #24]
 8004178:	4619      	mov	r1, r3
 800417a:	2208      	movs	r2, #8
 800417c:	305c      	adds	r0, #92	@ 0x5c
 800417e:	f000 f926 	bl	80043ce <memset>
 8004182:	4b0d      	ldr	r3, [pc, #52]	@ (80041b8 <std+0x58>)
 8004184:	6263      	str	r3, [r4, #36]	@ 0x24
 8004186:	4b0d      	ldr	r3, [pc, #52]	@ (80041bc <std+0x5c>)
 8004188:	62a3      	str	r3, [r4, #40]	@ 0x28
 800418a:	4b0d      	ldr	r3, [pc, #52]	@ (80041c0 <std+0x60>)
 800418c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800418e:	4b0d      	ldr	r3, [pc, #52]	@ (80041c4 <std+0x64>)
 8004190:	6323      	str	r3, [r4, #48]	@ 0x30
 8004192:	4b0d      	ldr	r3, [pc, #52]	@ (80041c8 <std+0x68>)
 8004194:	6224      	str	r4, [r4, #32]
 8004196:	429c      	cmp	r4, r3
 8004198:	d006      	beq.n	80041a8 <std+0x48>
 800419a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800419e:	4294      	cmp	r4, r2
 80041a0:	d002      	beq.n	80041a8 <std+0x48>
 80041a2:	33d0      	adds	r3, #208	@ 0xd0
 80041a4:	429c      	cmp	r4, r3
 80041a6:	d105      	bne.n	80041b4 <std+0x54>
 80041a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80041ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041b0:	f000 b996 	b.w	80044e0 <__retarget_lock_init_recursive>
 80041b4:	bd10      	pop	{r4, pc}
 80041b6:	bf00      	nop
 80041b8:	08004349 	.word	0x08004349
 80041bc:	0800436b 	.word	0x0800436b
 80041c0:	080043a3 	.word	0x080043a3
 80041c4:	080043c7 	.word	0x080043c7
 80041c8:	20000378 	.word	0x20000378

080041cc <stdio_exit_handler>:
 80041cc:	4a02      	ldr	r2, [pc, #8]	@ (80041d8 <stdio_exit_handler+0xc>)
 80041ce:	4903      	ldr	r1, [pc, #12]	@ (80041dc <stdio_exit_handler+0x10>)
 80041d0:	4803      	ldr	r0, [pc, #12]	@ (80041e0 <stdio_exit_handler+0x14>)
 80041d2:	f000 b869 	b.w	80042a8 <_fwalk_sglue>
 80041d6:	bf00      	nop
 80041d8:	20000154 	.word	0x20000154
 80041dc:	08004ef1 	.word	0x08004ef1
 80041e0:	20000164 	.word	0x20000164

080041e4 <cleanup_stdio>:
 80041e4:	6841      	ldr	r1, [r0, #4]
 80041e6:	4b0c      	ldr	r3, [pc, #48]	@ (8004218 <cleanup_stdio+0x34>)
 80041e8:	4299      	cmp	r1, r3
 80041ea:	b510      	push	{r4, lr}
 80041ec:	4604      	mov	r4, r0
 80041ee:	d001      	beq.n	80041f4 <cleanup_stdio+0x10>
 80041f0:	f000 fe7e 	bl	8004ef0 <_fflush_r>
 80041f4:	68a1      	ldr	r1, [r4, #8]
 80041f6:	4b09      	ldr	r3, [pc, #36]	@ (800421c <cleanup_stdio+0x38>)
 80041f8:	4299      	cmp	r1, r3
 80041fa:	d002      	beq.n	8004202 <cleanup_stdio+0x1e>
 80041fc:	4620      	mov	r0, r4
 80041fe:	f000 fe77 	bl	8004ef0 <_fflush_r>
 8004202:	68e1      	ldr	r1, [r4, #12]
 8004204:	4b06      	ldr	r3, [pc, #24]	@ (8004220 <cleanup_stdio+0x3c>)
 8004206:	4299      	cmp	r1, r3
 8004208:	d004      	beq.n	8004214 <cleanup_stdio+0x30>
 800420a:	4620      	mov	r0, r4
 800420c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004210:	f000 be6e 	b.w	8004ef0 <_fflush_r>
 8004214:	bd10      	pop	{r4, pc}
 8004216:	bf00      	nop
 8004218:	20000378 	.word	0x20000378
 800421c:	200003e0 	.word	0x200003e0
 8004220:	20000448 	.word	0x20000448

08004224 <global_stdio_init.part.0>:
 8004224:	b510      	push	{r4, lr}
 8004226:	4b0b      	ldr	r3, [pc, #44]	@ (8004254 <global_stdio_init.part.0+0x30>)
 8004228:	4c0b      	ldr	r4, [pc, #44]	@ (8004258 <global_stdio_init.part.0+0x34>)
 800422a:	4a0c      	ldr	r2, [pc, #48]	@ (800425c <global_stdio_init.part.0+0x38>)
 800422c:	601a      	str	r2, [r3, #0]
 800422e:	4620      	mov	r0, r4
 8004230:	2200      	movs	r2, #0
 8004232:	2104      	movs	r1, #4
 8004234:	f7ff ff94 	bl	8004160 <std>
 8004238:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800423c:	2201      	movs	r2, #1
 800423e:	2109      	movs	r1, #9
 8004240:	f7ff ff8e 	bl	8004160 <std>
 8004244:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004248:	2202      	movs	r2, #2
 800424a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800424e:	2112      	movs	r1, #18
 8004250:	f7ff bf86 	b.w	8004160 <std>
 8004254:	200004b0 	.word	0x200004b0
 8004258:	20000378 	.word	0x20000378
 800425c:	080041cd 	.word	0x080041cd

08004260 <__sfp_lock_acquire>:
 8004260:	4801      	ldr	r0, [pc, #4]	@ (8004268 <__sfp_lock_acquire+0x8>)
 8004262:	f000 b93e 	b.w	80044e2 <__retarget_lock_acquire_recursive>
 8004266:	bf00      	nop
 8004268:	200004b9 	.word	0x200004b9

0800426c <__sfp_lock_release>:
 800426c:	4801      	ldr	r0, [pc, #4]	@ (8004274 <__sfp_lock_release+0x8>)
 800426e:	f000 b939 	b.w	80044e4 <__retarget_lock_release_recursive>
 8004272:	bf00      	nop
 8004274:	200004b9 	.word	0x200004b9

08004278 <__sinit>:
 8004278:	b510      	push	{r4, lr}
 800427a:	4604      	mov	r4, r0
 800427c:	f7ff fff0 	bl	8004260 <__sfp_lock_acquire>
 8004280:	6a23      	ldr	r3, [r4, #32]
 8004282:	b11b      	cbz	r3, 800428c <__sinit+0x14>
 8004284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004288:	f7ff bff0 	b.w	800426c <__sfp_lock_release>
 800428c:	4b04      	ldr	r3, [pc, #16]	@ (80042a0 <__sinit+0x28>)
 800428e:	6223      	str	r3, [r4, #32]
 8004290:	4b04      	ldr	r3, [pc, #16]	@ (80042a4 <__sinit+0x2c>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1f5      	bne.n	8004284 <__sinit+0xc>
 8004298:	f7ff ffc4 	bl	8004224 <global_stdio_init.part.0>
 800429c:	e7f2      	b.n	8004284 <__sinit+0xc>
 800429e:	bf00      	nop
 80042a0:	080041e5 	.word	0x080041e5
 80042a4:	200004b0 	.word	0x200004b0

080042a8 <_fwalk_sglue>:
 80042a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042ac:	4607      	mov	r7, r0
 80042ae:	4688      	mov	r8, r1
 80042b0:	4614      	mov	r4, r2
 80042b2:	2600      	movs	r6, #0
 80042b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80042b8:	f1b9 0901 	subs.w	r9, r9, #1
 80042bc:	d505      	bpl.n	80042ca <_fwalk_sglue+0x22>
 80042be:	6824      	ldr	r4, [r4, #0]
 80042c0:	2c00      	cmp	r4, #0
 80042c2:	d1f7      	bne.n	80042b4 <_fwalk_sglue+0xc>
 80042c4:	4630      	mov	r0, r6
 80042c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042ca:	89ab      	ldrh	r3, [r5, #12]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d907      	bls.n	80042e0 <_fwalk_sglue+0x38>
 80042d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80042d4:	3301      	adds	r3, #1
 80042d6:	d003      	beq.n	80042e0 <_fwalk_sglue+0x38>
 80042d8:	4629      	mov	r1, r5
 80042da:	4638      	mov	r0, r7
 80042dc:	47c0      	blx	r8
 80042de:	4306      	orrs	r6, r0
 80042e0:	3568      	adds	r5, #104	@ 0x68
 80042e2:	e7e9      	b.n	80042b8 <_fwalk_sglue+0x10>

080042e4 <iprintf>:
 80042e4:	b40f      	push	{r0, r1, r2, r3}
 80042e6:	b507      	push	{r0, r1, r2, lr}
 80042e8:	4906      	ldr	r1, [pc, #24]	@ (8004304 <iprintf+0x20>)
 80042ea:	ab04      	add	r3, sp, #16
 80042ec:	6808      	ldr	r0, [r1, #0]
 80042ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80042f2:	6881      	ldr	r1, [r0, #8]
 80042f4:	9301      	str	r3, [sp, #4]
 80042f6:	f000 fad1 	bl	800489c <_vfiprintf_r>
 80042fa:	b003      	add	sp, #12
 80042fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004300:	b004      	add	sp, #16
 8004302:	4770      	bx	lr
 8004304:	20000160 	.word	0x20000160

08004308 <siprintf>:
 8004308:	b40e      	push	{r1, r2, r3}
 800430a:	b500      	push	{lr}
 800430c:	b09c      	sub	sp, #112	@ 0x70
 800430e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004310:	9002      	str	r0, [sp, #8]
 8004312:	9006      	str	r0, [sp, #24]
 8004314:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004318:	4809      	ldr	r0, [pc, #36]	@ (8004340 <siprintf+0x38>)
 800431a:	9107      	str	r1, [sp, #28]
 800431c:	9104      	str	r1, [sp, #16]
 800431e:	4909      	ldr	r1, [pc, #36]	@ (8004344 <siprintf+0x3c>)
 8004320:	f853 2b04 	ldr.w	r2, [r3], #4
 8004324:	9105      	str	r1, [sp, #20]
 8004326:	6800      	ldr	r0, [r0, #0]
 8004328:	9301      	str	r3, [sp, #4]
 800432a:	a902      	add	r1, sp, #8
 800432c:	f000 f990 	bl	8004650 <_svfiprintf_r>
 8004330:	9b02      	ldr	r3, [sp, #8]
 8004332:	2200      	movs	r2, #0
 8004334:	701a      	strb	r2, [r3, #0]
 8004336:	b01c      	add	sp, #112	@ 0x70
 8004338:	f85d eb04 	ldr.w	lr, [sp], #4
 800433c:	b003      	add	sp, #12
 800433e:	4770      	bx	lr
 8004340:	20000160 	.word	0x20000160
 8004344:	ffff0208 	.word	0xffff0208

08004348 <__sread>:
 8004348:	b510      	push	{r4, lr}
 800434a:	460c      	mov	r4, r1
 800434c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004350:	f000 f868 	bl	8004424 <_read_r>
 8004354:	2800      	cmp	r0, #0
 8004356:	bfab      	itete	ge
 8004358:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800435a:	89a3      	ldrhlt	r3, [r4, #12]
 800435c:	181b      	addge	r3, r3, r0
 800435e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004362:	bfac      	ite	ge
 8004364:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004366:	81a3      	strhlt	r3, [r4, #12]
 8004368:	bd10      	pop	{r4, pc}

0800436a <__swrite>:
 800436a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800436e:	461f      	mov	r7, r3
 8004370:	898b      	ldrh	r3, [r1, #12]
 8004372:	05db      	lsls	r3, r3, #23
 8004374:	4605      	mov	r5, r0
 8004376:	460c      	mov	r4, r1
 8004378:	4616      	mov	r6, r2
 800437a:	d505      	bpl.n	8004388 <__swrite+0x1e>
 800437c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004380:	2302      	movs	r3, #2
 8004382:	2200      	movs	r2, #0
 8004384:	f000 f83c 	bl	8004400 <_lseek_r>
 8004388:	89a3      	ldrh	r3, [r4, #12]
 800438a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800438e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004392:	81a3      	strh	r3, [r4, #12]
 8004394:	4632      	mov	r2, r6
 8004396:	463b      	mov	r3, r7
 8004398:	4628      	mov	r0, r5
 800439a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800439e:	f000 b863 	b.w	8004468 <_write_r>

080043a2 <__sseek>:
 80043a2:	b510      	push	{r4, lr}
 80043a4:	460c      	mov	r4, r1
 80043a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043aa:	f000 f829 	bl	8004400 <_lseek_r>
 80043ae:	1c43      	adds	r3, r0, #1
 80043b0:	89a3      	ldrh	r3, [r4, #12]
 80043b2:	bf15      	itete	ne
 80043b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80043b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80043ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80043be:	81a3      	strheq	r3, [r4, #12]
 80043c0:	bf18      	it	ne
 80043c2:	81a3      	strhne	r3, [r4, #12]
 80043c4:	bd10      	pop	{r4, pc}

080043c6 <__sclose>:
 80043c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043ca:	f000 b809 	b.w	80043e0 <_close_r>

080043ce <memset>:
 80043ce:	4402      	add	r2, r0
 80043d0:	4603      	mov	r3, r0
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d100      	bne.n	80043d8 <memset+0xa>
 80043d6:	4770      	bx	lr
 80043d8:	f803 1b01 	strb.w	r1, [r3], #1
 80043dc:	e7f9      	b.n	80043d2 <memset+0x4>
	...

080043e0 <_close_r>:
 80043e0:	b538      	push	{r3, r4, r5, lr}
 80043e2:	4d06      	ldr	r5, [pc, #24]	@ (80043fc <_close_r+0x1c>)
 80043e4:	2300      	movs	r3, #0
 80043e6:	4604      	mov	r4, r0
 80043e8:	4608      	mov	r0, r1
 80043ea:	602b      	str	r3, [r5, #0]
 80043ec:	f7fd fd26 	bl	8001e3c <_close>
 80043f0:	1c43      	adds	r3, r0, #1
 80043f2:	d102      	bne.n	80043fa <_close_r+0x1a>
 80043f4:	682b      	ldr	r3, [r5, #0]
 80043f6:	b103      	cbz	r3, 80043fa <_close_r+0x1a>
 80043f8:	6023      	str	r3, [r4, #0]
 80043fa:	bd38      	pop	{r3, r4, r5, pc}
 80043fc:	200004b4 	.word	0x200004b4

08004400 <_lseek_r>:
 8004400:	b538      	push	{r3, r4, r5, lr}
 8004402:	4d07      	ldr	r5, [pc, #28]	@ (8004420 <_lseek_r+0x20>)
 8004404:	4604      	mov	r4, r0
 8004406:	4608      	mov	r0, r1
 8004408:	4611      	mov	r1, r2
 800440a:	2200      	movs	r2, #0
 800440c:	602a      	str	r2, [r5, #0]
 800440e:	461a      	mov	r2, r3
 8004410:	f7fd fd3b 	bl	8001e8a <_lseek>
 8004414:	1c43      	adds	r3, r0, #1
 8004416:	d102      	bne.n	800441e <_lseek_r+0x1e>
 8004418:	682b      	ldr	r3, [r5, #0]
 800441a:	b103      	cbz	r3, 800441e <_lseek_r+0x1e>
 800441c:	6023      	str	r3, [r4, #0]
 800441e:	bd38      	pop	{r3, r4, r5, pc}
 8004420:	200004b4 	.word	0x200004b4

08004424 <_read_r>:
 8004424:	b538      	push	{r3, r4, r5, lr}
 8004426:	4d07      	ldr	r5, [pc, #28]	@ (8004444 <_read_r+0x20>)
 8004428:	4604      	mov	r4, r0
 800442a:	4608      	mov	r0, r1
 800442c:	4611      	mov	r1, r2
 800442e:	2200      	movs	r2, #0
 8004430:	602a      	str	r2, [r5, #0]
 8004432:	461a      	mov	r2, r3
 8004434:	f7fd fcb8 	bl	8001da8 <_read>
 8004438:	1c43      	adds	r3, r0, #1
 800443a:	d102      	bne.n	8004442 <_read_r+0x1e>
 800443c:	682b      	ldr	r3, [r5, #0]
 800443e:	b103      	cbz	r3, 8004442 <_read_r+0x1e>
 8004440:	6023      	str	r3, [r4, #0]
 8004442:	bd38      	pop	{r3, r4, r5, pc}
 8004444:	200004b4 	.word	0x200004b4

08004448 <_sbrk_r>:
 8004448:	b538      	push	{r3, r4, r5, lr}
 800444a:	4d06      	ldr	r5, [pc, #24]	@ (8004464 <_sbrk_r+0x1c>)
 800444c:	2300      	movs	r3, #0
 800444e:	4604      	mov	r4, r0
 8004450:	4608      	mov	r0, r1
 8004452:	602b      	str	r3, [r5, #0]
 8004454:	f7fd fcc6 	bl	8001de4 <_sbrk>
 8004458:	1c43      	adds	r3, r0, #1
 800445a:	d102      	bne.n	8004462 <_sbrk_r+0x1a>
 800445c:	682b      	ldr	r3, [r5, #0]
 800445e:	b103      	cbz	r3, 8004462 <_sbrk_r+0x1a>
 8004460:	6023      	str	r3, [r4, #0]
 8004462:	bd38      	pop	{r3, r4, r5, pc}
 8004464:	200004b4 	.word	0x200004b4

08004468 <_write_r>:
 8004468:	b538      	push	{r3, r4, r5, lr}
 800446a:	4d07      	ldr	r5, [pc, #28]	@ (8004488 <_write_r+0x20>)
 800446c:	4604      	mov	r4, r0
 800446e:	4608      	mov	r0, r1
 8004470:	4611      	mov	r1, r2
 8004472:	2200      	movs	r2, #0
 8004474:	602a      	str	r2, [r5, #0]
 8004476:	461a      	mov	r2, r3
 8004478:	f7fd f9ee 	bl	8001858 <_write>
 800447c:	1c43      	adds	r3, r0, #1
 800447e:	d102      	bne.n	8004486 <_write_r+0x1e>
 8004480:	682b      	ldr	r3, [r5, #0]
 8004482:	b103      	cbz	r3, 8004486 <_write_r+0x1e>
 8004484:	6023      	str	r3, [r4, #0]
 8004486:	bd38      	pop	{r3, r4, r5, pc}
 8004488:	200004b4 	.word	0x200004b4

0800448c <__errno>:
 800448c:	4b01      	ldr	r3, [pc, #4]	@ (8004494 <__errno+0x8>)
 800448e:	6818      	ldr	r0, [r3, #0]
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	20000160 	.word	0x20000160

08004498 <__libc_init_array>:
 8004498:	b570      	push	{r4, r5, r6, lr}
 800449a:	4d0d      	ldr	r5, [pc, #52]	@ (80044d0 <__libc_init_array+0x38>)
 800449c:	4c0d      	ldr	r4, [pc, #52]	@ (80044d4 <__libc_init_array+0x3c>)
 800449e:	1b64      	subs	r4, r4, r5
 80044a0:	10a4      	asrs	r4, r4, #2
 80044a2:	2600      	movs	r6, #0
 80044a4:	42a6      	cmp	r6, r4
 80044a6:	d109      	bne.n	80044bc <__libc_init_array+0x24>
 80044a8:	4d0b      	ldr	r5, [pc, #44]	@ (80044d8 <__libc_init_array+0x40>)
 80044aa:	4c0c      	ldr	r4, [pc, #48]	@ (80044dc <__libc_init_array+0x44>)
 80044ac:	f000 feb0 	bl	8005210 <_init>
 80044b0:	1b64      	subs	r4, r4, r5
 80044b2:	10a4      	asrs	r4, r4, #2
 80044b4:	2600      	movs	r6, #0
 80044b6:	42a6      	cmp	r6, r4
 80044b8:	d105      	bne.n	80044c6 <__libc_init_array+0x2e>
 80044ba:	bd70      	pop	{r4, r5, r6, pc}
 80044bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80044c0:	4798      	blx	r3
 80044c2:	3601      	adds	r6, #1
 80044c4:	e7ee      	b.n	80044a4 <__libc_init_array+0xc>
 80044c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ca:	4798      	blx	r3
 80044cc:	3601      	adds	r6, #1
 80044ce:	e7f2      	b.n	80044b6 <__libc_init_array+0x1e>
 80044d0:	080052fc 	.word	0x080052fc
 80044d4:	080052fc 	.word	0x080052fc
 80044d8:	080052fc 	.word	0x080052fc
 80044dc:	08005300 	.word	0x08005300

080044e0 <__retarget_lock_init_recursive>:
 80044e0:	4770      	bx	lr

080044e2 <__retarget_lock_acquire_recursive>:
 80044e2:	4770      	bx	lr

080044e4 <__retarget_lock_release_recursive>:
 80044e4:	4770      	bx	lr

080044e6 <memcpy>:
 80044e6:	440a      	add	r2, r1
 80044e8:	4291      	cmp	r1, r2
 80044ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80044ee:	d100      	bne.n	80044f2 <memcpy+0xc>
 80044f0:	4770      	bx	lr
 80044f2:	b510      	push	{r4, lr}
 80044f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044fc:	4291      	cmp	r1, r2
 80044fe:	d1f9      	bne.n	80044f4 <memcpy+0xe>
 8004500:	bd10      	pop	{r4, pc}
	...

08004504 <_free_r>:
 8004504:	b538      	push	{r3, r4, r5, lr}
 8004506:	4605      	mov	r5, r0
 8004508:	2900      	cmp	r1, #0
 800450a:	d041      	beq.n	8004590 <_free_r+0x8c>
 800450c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004510:	1f0c      	subs	r4, r1, #4
 8004512:	2b00      	cmp	r3, #0
 8004514:	bfb8      	it	lt
 8004516:	18e4      	addlt	r4, r4, r3
 8004518:	f7ff fe16 	bl	8004148 <__malloc_lock>
 800451c:	4a1d      	ldr	r2, [pc, #116]	@ (8004594 <_free_r+0x90>)
 800451e:	6813      	ldr	r3, [r2, #0]
 8004520:	b933      	cbnz	r3, 8004530 <_free_r+0x2c>
 8004522:	6063      	str	r3, [r4, #4]
 8004524:	6014      	str	r4, [r2, #0]
 8004526:	4628      	mov	r0, r5
 8004528:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800452c:	f7ff be12 	b.w	8004154 <__malloc_unlock>
 8004530:	42a3      	cmp	r3, r4
 8004532:	d908      	bls.n	8004546 <_free_r+0x42>
 8004534:	6820      	ldr	r0, [r4, #0]
 8004536:	1821      	adds	r1, r4, r0
 8004538:	428b      	cmp	r3, r1
 800453a:	bf01      	itttt	eq
 800453c:	6819      	ldreq	r1, [r3, #0]
 800453e:	685b      	ldreq	r3, [r3, #4]
 8004540:	1809      	addeq	r1, r1, r0
 8004542:	6021      	streq	r1, [r4, #0]
 8004544:	e7ed      	b.n	8004522 <_free_r+0x1e>
 8004546:	461a      	mov	r2, r3
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	b10b      	cbz	r3, 8004550 <_free_r+0x4c>
 800454c:	42a3      	cmp	r3, r4
 800454e:	d9fa      	bls.n	8004546 <_free_r+0x42>
 8004550:	6811      	ldr	r1, [r2, #0]
 8004552:	1850      	adds	r0, r2, r1
 8004554:	42a0      	cmp	r0, r4
 8004556:	d10b      	bne.n	8004570 <_free_r+0x6c>
 8004558:	6820      	ldr	r0, [r4, #0]
 800455a:	4401      	add	r1, r0
 800455c:	1850      	adds	r0, r2, r1
 800455e:	4283      	cmp	r3, r0
 8004560:	6011      	str	r1, [r2, #0]
 8004562:	d1e0      	bne.n	8004526 <_free_r+0x22>
 8004564:	6818      	ldr	r0, [r3, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	6053      	str	r3, [r2, #4]
 800456a:	4408      	add	r0, r1
 800456c:	6010      	str	r0, [r2, #0]
 800456e:	e7da      	b.n	8004526 <_free_r+0x22>
 8004570:	d902      	bls.n	8004578 <_free_r+0x74>
 8004572:	230c      	movs	r3, #12
 8004574:	602b      	str	r3, [r5, #0]
 8004576:	e7d6      	b.n	8004526 <_free_r+0x22>
 8004578:	6820      	ldr	r0, [r4, #0]
 800457a:	1821      	adds	r1, r4, r0
 800457c:	428b      	cmp	r3, r1
 800457e:	bf04      	itt	eq
 8004580:	6819      	ldreq	r1, [r3, #0]
 8004582:	685b      	ldreq	r3, [r3, #4]
 8004584:	6063      	str	r3, [r4, #4]
 8004586:	bf04      	itt	eq
 8004588:	1809      	addeq	r1, r1, r0
 800458a:	6021      	streq	r1, [r4, #0]
 800458c:	6054      	str	r4, [r2, #4]
 800458e:	e7ca      	b.n	8004526 <_free_r+0x22>
 8004590:	bd38      	pop	{r3, r4, r5, pc}
 8004592:	bf00      	nop
 8004594:	20000374 	.word	0x20000374

08004598 <__ssputs_r>:
 8004598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800459c:	688e      	ldr	r6, [r1, #8]
 800459e:	461f      	mov	r7, r3
 80045a0:	42be      	cmp	r6, r7
 80045a2:	680b      	ldr	r3, [r1, #0]
 80045a4:	4682      	mov	sl, r0
 80045a6:	460c      	mov	r4, r1
 80045a8:	4690      	mov	r8, r2
 80045aa:	d82d      	bhi.n	8004608 <__ssputs_r+0x70>
 80045ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80045b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80045b4:	d026      	beq.n	8004604 <__ssputs_r+0x6c>
 80045b6:	6965      	ldr	r5, [r4, #20]
 80045b8:	6909      	ldr	r1, [r1, #16]
 80045ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80045be:	eba3 0901 	sub.w	r9, r3, r1
 80045c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80045c6:	1c7b      	adds	r3, r7, #1
 80045c8:	444b      	add	r3, r9
 80045ca:	106d      	asrs	r5, r5, #1
 80045cc:	429d      	cmp	r5, r3
 80045ce:	bf38      	it	cc
 80045d0:	461d      	movcc	r5, r3
 80045d2:	0553      	lsls	r3, r2, #21
 80045d4:	d527      	bpl.n	8004626 <__ssputs_r+0x8e>
 80045d6:	4629      	mov	r1, r5
 80045d8:	f7ff fd36 	bl	8004048 <_malloc_r>
 80045dc:	4606      	mov	r6, r0
 80045de:	b360      	cbz	r0, 800463a <__ssputs_r+0xa2>
 80045e0:	6921      	ldr	r1, [r4, #16]
 80045e2:	464a      	mov	r2, r9
 80045e4:	f7ff ff7f 	bl	80044e6 <memcpy>
 80045e8:	89a3      	ldrh	r3, [r4, #12]
 80045ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80045ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045f2:	81a3      	strh	r3, [r4, #12]
 80045f4:	6126      	str	r6, [r4, #16]
 80045f6:	6165      	str	r5, [r4, #20]
 80045f8:	444e      	add	r6, r9
 80045fa:	eba5 0509 	sub.w	r5, r5, r9
 80045fe:	6026      	str	r6, [r4, #0]
 8004600:	60a5      	str	r5, [r4, #8]
 8004602:	463e      	mov	r6, r7
 8004604:	42be      	cmp	r6, r7
 8004606:	d900      	bls.n	800460a <__ssputs_r+0x72>
 8004608:	463e      	mov	r6, r7
 800460a:	6820      	ldr	r0, [r4, #0]
 800460c:	4632      	mov	r2, r6
 800460e:	4641      	mov	r1, r8
 8004610:	f000 fd2a 	bl	8005068 <memmove>
 8004614:	68a3      	ldr	r3, [r4, #8]
 8004616:	1b9b      	subs	r3, r3, r6
 8004618:	60a3      	str	r3, [r4, #8]
 800461a:	6823      	ldr	r3, [r4, #0]
 800461c:	4433      	add	r3, r6
 800461e:	6023      	str	r3, [r4, #0]
 8004620:	2000      	movs	r0, #0
 8004622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004626:	462a      	mov	r2, r5
 8004628:	f000 fd38 	bl	800509c <_realloc_r>
 800462c:	4606      	mov	r6, r0
 800462e:	2800      	cmp	r0, #0
 8004630:	d1e0      	bne.n	80045f4 <__ssputs_r+0x5c>
 8004632:	6921      	ldr	r1, [r4, #16]
 8004634:	4650      	mov	r0, sl
 8004636:	f7ff ff65 	bl	8004504 <_free_r>
 800463a:	230c      	movs	r3, #12
 800463c:	f8ca 3000 	str.w	r3, [sl]
 8004640:	89a3      	ldrh	r3, [r4, #12]
 8004642:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004646:	81a3      	strh	r3, [r4, #12]
 8004648:	f04f 30ff 	mov.w	r0, #4294967295
 800464c:	e7e9      	b.n	8004622 <__ssputs_r+0x8a>
	...

08004650 <_svfiprintf_r>:
 8004650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004654:	4698      	mov	r8, r3
 8004656:	898b      	ldrh	r3, [r1, #12]
 8004658:	061b      	lsls	r3, r3, #24
 800465a:	b09d      	sub	sp, #116	@ 0x74
 800465c:	4607      	mov	r7, r0
 800465e:	460d      	mov	r5, r1
 8004660:	4614      	mov	r4, r2
 8004662:	d510      	bpl.n	8004686 <_svfiprintf_r+0x36>
 8004664:	690b      	ldr	r3, [r1, #16]
 8004666:	b973      	cbnz	r3, 8004686 <_svfiprintf_r+0x36>
 8004668:	2140      	movs	r1, #64	@ 0x40
 800466a:	f7ff fced 	bl	8004048 <_malloc_r>
 800466e:	6028      	str	r0, [r5, #0]
 8004670:	6128      	str	r0, [r5, #16]
 8004672:	b930      	cbnz	r0, 8004682 <_svfiprintf_r+0x32>
 8004674:	230c      	movs	r3, #12
 8004676:	603b      	str	r3, [r7, #0]
 8004678:	f04f 30ff 	mov.w	r0, #4294967295
 800467c:	b01d      	add	sp, #116	@ 0x74
 800467e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004682:	2340      	movs	r3, #64	@ 0x40
 8004684:	616b      	str	r3, [r5, #20]
 8004686:	2300      	movs	r3, #0
 8004688:	9309      	str	r3, [sp, #36]	@ 0x24
 800468a:	2320      	movs	r3, #32
 800468c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004690:	f8cd 800c 	str.w	r8, [sp, #12]
 8004694:	2330      	movs	r3, #48	@ 0x30
 8004696:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004834 <_svfiprintf_r+0x1e4>
 800469a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800469e:	f04f 0901 	mov.w	r9, #1
 80046a2:	4623      	mov	r3, r4
 80046a4:	469a      	mov	sl, r3
 80046a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046aa:	b10a      	cbz	r2, 80046b0 <_svfiprintf_r+0x60>
 80046ac:	2a25      	cmp	r2, #37	@ 0x25
 80046ae:	d1f9      	bne.n	80046a4 <_svfiprintf_r+0x54>
 80046b0:	ebba 0b04 	subs.w	fp, sl, r4
 80046b4:	d00b      	beq.n	80046ce <_svfiprintf_r+0x7e>
 80046b6:	465b      	mov	r3, fp
 80046b8:	4622      	mov	r2, r4
 80046ba:	4629      	mov	r1, r5
 80046bc:	4638      	mov	r0, r7
 80046be:	f7ff ff6b 	bl	8004598 <__ssputs_r>
 80046c2:	3001      	adds	r0, #1
 80046c4:	f000 80a7 	beq.w	8004816 <_svfiprintf_r+0x1c6>
 80046c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80046ca:	445a      	add	r2, fp
 80046cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80046ce:	f89a 3000 	ldrb.w	r3, [sl]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 809f 	beq.w	8004816 <_svfiprintf_r+0x1c6>
 80046d8:	2300      	movs	r3, #0
 80046da:	f04f 32ff 	mov.w	r2, #4294967295
 80046de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046e2:	f10a 0a01 	add.w	sl, sl, #1
 80046e6:	9304      	str	r3, [sp, #16]
 80046e8:	9307      	str	r3, [sp, #28]
 80046ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80046ee:	931a      	str	r3, [sp, #104]	@ 0x68
 80046f0:	4654      	mov	r4, sl
 80046f2:	2205      	movs	r2, #5
 80046f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046f8:	484e      	ldr	r0, [pc, #312]	@ (8004834 <_svfiprintf_r+0x1e4>)
 80046fa:	f7fb fd71 	bl	80001e0 <memchr>
 80046fe:	9a04      	ldr	r2, [sp, #16]
 8004700:	b9d8      	cbnz	r0, 800473a <_svfiprintf_r+0xea>
 8004702:	06d0      	lsls	r0, r2, #27
 8004704:	bf44      	itt	mi
 8004706:	2320      	movmi	r3, #32
 8004708:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800470c:	0711      	lsls	r1, r2, #28
 800470e:	bf44      	itt	mi
 8004710:	232b      	movmi	r3, #43	@ 0x2b
 8004712:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004716:	f89a 3000 	ldrb.w	r3, [sl]
 800471a:	2b2a      	cmp	r3, #42	@ 0x2a
 800471c:	d015      	beq.n	800474a <_svfiprintf_r+0xfa>
 800471e:	9a07      	ldr	r2, [sp, #28]
 8004720:	4654      	mov	r4, sl
 8004722:	2000      	movs	r0, #0
 8004724:	f04f 0c0a 	mov.w	ip, #10
 8004728:	4621      	mov	r1, r4
 800472a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800472e:	3b30      	subs	r3, #48	@ 0x30
 8004730:	2b09      	cmp	r3, #9
 8004732:	d94b      	bls.n	80047cc <_svfiprintf_r+0x17c>
 8004734:	b1b0      	cbz	r0, 8004764 <_svfiprintf_r+0x114>
 8004736:	9207      	str	r2, [sp, #28]
 8004738:	e014      	b.n	8004764 <_svfiprintf_r+0x114>
 800473a:	eba0 0308 	sub.w	r3, r0, r8
 800473e:	fa09 f303 	lsl.w	r3, r9, r3
 8004742:	4313      	orrs	r3, r2
 8004744:	9304      	str	r3, [sp, #16]
 8004746:	46a2      	mov	sl, r4
 8004748:	e7d2      	b.n	80046f0 <_svfiprintf_r+0xa0>
 800474a:	9b03      	ldr	r3, [sp, #12]
 800474c:	1d19      	adds	r1, r3, #4
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	9103      	str	r1, [sp, #12]
 8004752:	2b00      	cmp	r3, #0
 8004754:	bfbb      	ittet	lt
 8004756:	425b      	neglt	r3, r3
 8004758:	f042 0202 	orrlt.w	r2, r2, #2
 800475c:	9307      	strge	r3, [sp, #28]
 800475e:	9307      	strlt	r3, [sp, #28]
 8004760:	bfb8      	it	lt
 8004762:	9204      	strlt	r2, [sp, #16]
 8004764:	7823      	ldrb	r3, [r4, #0]
 8004766:	2b2e      	cmp	r3, #46	@ 0x2e
 8004768:	d10a      	bne.n	8004780 <_svfiprintf_r+0x130>
 800476a:	7863      	ldrb	r3, [r4, #1]
 800476c:	2b2a      	cmp	r3, #42	@ 0x2a
 800476e:	d132      	bne.n	80047d6 <_svfiprintf_r+0x186>
 8004770:	9b03      	ldr	r3, [sp, #12]
 8004772:	1d1a      	adds	r2, r3, #4
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	9203      	str	r2, [sp, #12]
 8004778:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800477c:	3402      	adds	r4, #2
 800477e:	9305      	str	r3, [sp, #20]
 8004780:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004844 <_svfiprintf_r+0x1f4>
 8004784:	7821      	ldrb	r1, [r4, #0]
 8004786:	2203      	movs	r2, #3
 8004788:	4650      	mov	r0, sl
 800478a:	f7fb fd29 	bl	80001e0 <memchr>
 800478e:	b138      	cbz	r0, 80047a0 <_svfiprintf_r+0x150>
 8004790:	9b04      	ldr	r3, [sp, #16]
 8004792:	eba0 000a 	sub.w	r0, r0, sl
 8004796:	2240      	movs	r2, #64	@ 0x40
 8004798:	4082      	lsls	r2, r0
 800479a:	4313      	orrs	r3, r2
 800479c:	3401      	adds	r4, #1
 800479e:	9304      	str	r3, [sp, #16]
 80047a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047a4:	4824      	ldr	r0, [pc, #144]	@ (8004838 <_svfiprintf_r+0x1e8>)
 80047a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80047aa:	2206      	movs	r2, #6
 80047ac:	f7fb fd18 	bl	80001e0 <memchr>
 80047b0:	2800      	cmp	r0, #0
 80047b2:	d036      	beq.n	8004822 <_svfiprintf_r+0x1d2>
 80047b4:	4b21      	ldr	r3, [pc, #132]	@ (800483c <_svfiprintf_r+0x1ec>)
 80047b6:	bb1b      	cbnz	r3, 8004800 <_svfiprintf_r+0x1b0>
 80047b8:	9b03      	ldr	r3, [sp, #12]
 80047ba:	3307      	adds	r3, #7
 80047bc:	f023 0307 	bic.w	r3, r3, #7
 80047c0:	3308      	adds	r3, #8
 80047c2:	9303      	str	r3, [sp, #12]
 80047c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047c6:	4433      	add	r3, r6
 80047c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80047ca:	e76a      	b.n	80046a2 <_svfiprintf_r+0x52>
 80047cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80047d0:	460c      	mov	r4, r1
 80047d2:	2001      	movs	r0, #1
 80047d4:	e7a8      	b.n	8004728 <_svfiprintf_r+0xd8>
 80047d6:	2300      	movs	r3, #0
 80047d8:	3401      	adds	r4, #1
 80047da:	9305      	str	r3, [sp, #20]
 80047dc:	4619      	mov	r1, r3
 80047de:	f04f 0c0a 	mov.w	ip, #10
 80047e2:	4620      	mov	r0, r4
 80047e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047e8:	3a30      	subs	r2, #48	@ 0x30
 80047ea:	2a09      	cmp	r2, #9
 80047ec:	d903      	bls.n	80047f6 <_svfiprintf_r+0x1a6>
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d0c6      	beq.n	8004780 <_svfiprintf_r+0x130>
 80047f2:	9105      	str	r1, [sp, #20]
 80047f4:	e7c4      	b.n	8004780 <_svfiprintf_r+0x130>
 80047f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80047fa:	4604      	mov	r4, r0
 80047fc:	2301      	movs	r3, #1
 80047fe:	e7f0      	b.n	80047e2 <_svfiprintf_r+0x192>
 8004800:	ab03      	add	r3, sp, #12
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	462a      	mov	r2, r5
 8004806:	4b0e      	ldr	r3, [pc, #56]	@ (8004840 <_svfiprintf_r+0x1f0>)
 8004808:	a904      	add	r1, sp, #16
 800480a:	4638      	mov	r0, r7
 800480c:	f3af 8000 	nop.w
 8004810:	1c42      	adds	r2, r0, #1
 8004812:	4606      	mov	r6, r0
 8004814:	d1d6      	bne.n	80047c4 <_svfiprintf_r+0x174>
 8004816:	89ab      	ldrh	r3, [r5, #12]
 8004818:	065b      	lsls	r3, r3, #25
 800481a:	f53f af2d 	bmi.w	8004678 <_svfiprintf_r+0x28>
 800481e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004820:	e72c      	b.n	800467c <_svfiprintf_r+0x2c>
 8004822:	ab03      	add	r3, sp, #12
 8004824:	9300      	str	r3, [sp, #0]
 8004826:	462a      	mov	r2, r5
 8004828:	4b05      	ldr	r3, [pc, #20]	@ (8004840 <_svfiprintf_r+0x1f0>)
 800482a:	a904      	add	r1, sp, #16
 800482c:	4638      	mov	r0, r7
 800482e:	f000 f9bb 	bl	8004ba8 <_printf_i>
 8004832:	e7ed      	b.n	8004810 <_svfiprintf_r+0x1c0>
 8004834:	080052c0 	.word	0x080052c0
 8004838:	080052ca 	.word	0x080052ca
 800483c:	00000000 	.word	0x00000000
 8004840:	08004599 	.word	0x08004599
 8004844:	080052c6 	.word	0x080052c6

08004848 <__sfputc_r>:
 8004848:	6893      	ldr	r3, [r2, #8]
 800484a:	3b01      	subs	r3, #1
 800484c:	2b00      	cmp	r3, #0
 800484e:	b410      	push	{r4}
 8004850:	6093      	str	r3, [r2, #8]
 8004852:	da08      	bge.n	8004866 <__sfputc_r+0x1e>
 8004854:	6994      	ldr	r4, [r2, #24]
 8004856:	42a3      	cmp	r3, r4
 8004858:	db01      	blt.n	800485e <__sfputc_r+0x16>
 800485a:	290a      	cmp	r1, #10
 800485c:	d103      	bne.n	8004866 <__sfputc_r+0x1e>
 800485e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004862:	f000 bb6d 	b.w	8004f40 <__swbuf_r>
 8004866:	6813      	ldr	r3, [r2, #0]
 8004868:	1c58      	adds	r0, r3, #1
 800486a:	6010      	str	r0, [r2, #0]
 800486c:	7019      	strb	r1, [r3, #0]
 800486e:	4608      	mov	r0, r1
 8004870:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004874:	4770      	bx	lr

08004876 <__sfputs_r>:
 8004876:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004878:	4606      	mov	r6, r0
 800487a:	460f      	mov	r7, r1
 800487c:	4614      	mov	r4, r2
 800487e:	18d5      	adds	r5, r2, r3
 8004880:	42ac      	cmp	r4, r5
 8004882:	d101      	bne.n	8004888 <__sfputs_r+0x12>
 8004884:	2000      	movs	r0, #0
 8004886:	e007      	b.n	8004898 <__sfputs_r+0x22>
 8004888:	f814 1b01 	ldrb.w	r1, [r4], #1
 800488c:	463a      	mov	r2, r7
 800488e:	4630      	mov	r0, r6
 8004890:	f7ff ffda 	bl	8004848 <__sfputc_r>
 8004894:	1c43      	adds	r3, r0, #1
 8004896:	d1f3      	bne.n	8004880 <__sfputs_r+0xa>
 8004898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800489c <_vfiprintf_r>:
 800489c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048a0:	460d      	mov	r5, r1
 80048a2:	b09d      	sub	sp, #116	@ 0x74
 80048a4:	4614      	mov	r4, r2
 80048a6:	4698      	mov	r8, r3
 80048a8:	4606      	mov	r6, r0
 80048aa:	b118      	cbz	r0, 80048b4 <_vfiprintf_r+0x18>
 80048ac:	6a03      	ldr	r3, [r0, #32]
 80048ae:	b90b      	cbnz	r3, 80048b4 <_vfiprintf_r+0x18>
 80048b0:	f7ff fce2 	bl	8004278 <__sinit>
 80048b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80048b6:	07d9      	lsls	r1, r3, #31
 80048b8:	d405      	bmi.n	80048c6 <_vfiprintf_r+0x2a>
 80048ba:	89ab      	ldrh	r3, [r5, #12]
 80048bc:	059a      	lsls	r2, r3, #22
 80048be:	d402      	bmi.n	80048c6 <_vfiprintf_r+0x2a>
 80048c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80048c2:	f7ff fe0e 	bl	80044e2 <__retarget_lock_acquire_recursive>
 80048c6:	89ab      	ldrh	r3, [r5, #12]
 80048c8:	071b      	lsls	r3, r3, #28
 80048ca:	d501      	bpl.n	80048d0 <_vfiprintf_r+0x34>
 80048cc:	692b      	ldr	r3, [r5, #16]
 80048ce:	b99b      	cbnz	r3, 80048f8 <_vfiprintf_r+0x5c>
 80048d0:	4629      	mov	r1, r5
 80048d2:	4630      	mov	r0, r6
 80048d4:	f000 fb72 	bl	8004fbc <__swsetup_r>
 80048d8:	b170      	cbz	r0, 80048f8 <_vfiprintf_r+0x5c>
 80048da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80048dc:	07dc      	lsls	r4, r3, #31
 80048de:	d504      	bpl.n	80048ea <_vfiprintf_r+0x4e>
 80048e0:	f04f 30ff 	mov.w	r0, #4294967295
 80048e4:	b01d      	add	sp, #116	@ 0x74
 80048e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048ea:	89ab      	ldrh	r3, [r5, #12]
 80048ec:	0598      	lsls	r0, r3, #22
 80048ee:	d4f7      	bmi.n	80048e0 <_vfiprintf_r+0x44>
 80048f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80048f2:	f7ff fdf7 	bl	80044e4 <__retarget_lock_release_recursive>
 80048f6:	e7f3      	b.n	80048e0 <_vfiprintf_r+0x44>
 80048f8:	2300      	movs	r3, #0
 80048fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80048fc:	2320      	movs	r3, #32
 80048fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004902:	f8cd 800c 	str.w	r8, [sp, #12]
 8004906:	2330      	movs	r3, #48	@ 0x30
 8004908:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004ab8 <_vfiprintf_r+0x21c>
 800490c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004910:	f04f 0901 	mov.w	r9, #1
 8004914:	4623      	mov	r3, r4
 8004916:	469a      	mov	sl, r3
 8004918:	f813 2b01 	ldrb.w	r2, [r3], #1
 800491c:	b10a      	cbz	r2, 8004922 <_vfiprintf_r+0x86>
 800491e:	2a25      	cmp	r2, #37	@ 0x25
 8004920:	d1f9      	bne.n	8004916 <_vfiprintf_r+0x7a>
 8004922:	ebba 0b04 	subs.w	fp, sl, r4
 8004926:	d00b      	beq.n	8004940 <_vfiprintf_r+0xa4>
 8004928:	465b      	mov	r3, fp
 800492a:	4622      	mov	r2, r4
 800492c:	4629      	mov	r1, r5
 800492e:	4630      	mov	r0, r6
 8004930:	f7ff ffa1 	bl	8004876 <__sfputs_r>
 8004934:	3001      	adds	r0, #1
 8004936:	f000 80a7 	beq.w	8004a88 <_vfiprintf_r+0x1ec>
 800493a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800493c:	445a      	add	r2, fp
 800493e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004940:	f89a 3000 	ldrb.w	r3, [sl]
 8004944:	2b00      	cmp	r3, #0
 8004946:	f000 809f 	beq.w	8004a88 <_vfiprintf_r+0x1ec>
 800494a:	2300      	movs	r3, #0
 800494c:	f04f 32ff 	mov.w	r2, #4294967295
 8004950:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004954:	f10a 0a01 	add.w	sl, sl, #1
 8004958:	9304      	str	r3, [sp, #16]
 800495a:	9307      	str	r3, [sp, #28]
 800495c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004960:	931a      	str	r3, [sp, #104]	@ 0x68
 8004962:	4654      	mov	r4, sl
 8004964:	2205      	movs	r2, #5
 8004966:	f814 1b01 	ldrb.w	r1, [r4], #1
 800496a:	4853      	ldr	r0, [pc, #332]	@ (8004ab8 <_vfiprintf_r+0x21c>)
 800496c:	f7fb fc38 	bl	80001e0 <memchr>
 8004970:	9a04      	ldr	r2, [sp, #16]
 8004972:	b9d8      	cbnz	r0, 80049ac <_vfiprintf_r+0x110>
 8004974:	06d1      	lsls	r1, r2, #27
 8004976:	bf44      	itt	mi
 8004978:	2320      	movmi	r3, #32
 800497a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800497e:	0713      	lsls	r3, r2, #28
 8004980:	bf44      	itt	mi
 8004982:	232b      	movmi	r3, #43	@ 0x2b
 8004984:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004988:	f89a 3000 	ldrb.w	r3, [sl]
 800498c:	2b2a      	cmp	r3, #42	@ 0x2a
 800498e:	d015      	beq.n	80049bc <_vfiprintf_r+0x120>
 8004990:	9a07      	ldr	r2, [sp, #28]
 8004992:	4654      	mov	r4, sl
 8004994:	2000      	movs	r0, #0
 8004996:	f04f 0c0a 	mov.w	ip, #10
 800499a:	4621      	mov	r1, r4
 800499c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049a0:	3b30      	subs	r3, #48	@ 0x30
 80049a2:	2b09      	cmp	r3, #9
 80049a4:	d94b      	bls.n	8004a3e <_vfiprintf_r+0x1a2>
 80049a6:	b1b0      	cbz	r0, 80049d6 <_vfiprintf_r+0x13a>
 80049a8:	9207      	str	r2, [sp, #28]
 80049aa:	e014      	b.n	80049d6 <_vfiprintf_r+0x13a>
 80049ac:	eba0 0308 	sub.w	r3, r0, r8
 80049b0:	fa09 f303 	lsl.w	r3, r9, r3
 80049b4:	4313      	orrs	r3, r2
 80049b6:	9304      	str	r3, [sp, #16]
 80049b8:	46a2      	mov	sl, r4
 80049ba:	e7d2      	b.n	8004962 <_vfiprintf_r+0xc6>
 80049bc:	9b03      	ldr	r3, [sp, #12]
 80049be:	1d19      	adds	r1, r3, #4
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	9103      	str	r1, [sp, #12]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	bfbb      	ittet	lt
 80049c8:	425b      	neglt	r3, r3
 80049ca:	f042 0202 	orrlt.w	r2, r2, #2
 80049ce:	9307      	strge	r3, [sp, #28]
 80049d0:	9307      	strlt	r3, [sp, #28]
 80049d2:	bfb8      	it	lt
 80049d4:	9204      	strlt	r2, [sp, #16]
 80049d6:	7823      	ldrb	r3, [r4, #0]
 80049d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80049da:	d10a      	bne.n	80049f2 <_vfiprintf_r+0x156>
 80049dc:	7863      	ldrb	r3, [r4, #1]
 80049de:	2b2a      	cmp	r3, #42	@ 0x2a
 80049e0:	d132      	bne.n	8004a48 <_vfiprintf_r+0x1ac>
 80049e2:	9b03      	ldr	r3, [sp, #12]
 80049e4:	1d1a      	adds	r2, r3, #4
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	9203      	str	r2, [sp, #12]
 80049ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80049ee:	3402      	adds	r4, #2
 80049f0:	9305      	str	r3, [sp, #20]
 80049f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004ac8 <_vfiprintf_r+0x22c>
 80049f6:	7821      	ldrb	r1, [r4, #0]
 80049f8:	2203      	movs	r2, #3
 80049fa:	4650      	mov	r0, sl
 80049fc:	f7fb fbf0 	bl	80001e0 <memchr>
 8004a00:	b138      	cbz	r0, 8004a12 <_vfiprintf_r+0x176>
 8004a02:	9b04      	ldr	r3, [sp, #16]
 8004a04:	eba0 000a 	sub.w	r0, r0, sl
 8004a08:	2240      	movs	r2, #64	@ 0x40
 8004a0a:	4082      	lsls	r2, r0
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	3401      	adds	r4, #1
 8004a10:	9304      	str	r3, [sp, #16]
 8004a12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a16:	4829      	ldr	r0, [pc, #164]	@ (8004abc <_vfiprintf_r+0x220>)
 8004a18:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004a1c:	2206      	movs	r2, #6
 8004a1e:	f7fb fbdf 	bl	80001e0 <memchr>
 8004a22:	2800      	cmp	r0, #0
 8004a24:	d03f      	beq.n	8004aa6 <_vfiprintf_r+0x20a>
 8004a26:	4b26      	ldr	r3, [pc, #152]	@ (8004ac0 <_vfiprintf_r+0x224>)
 8004a28:	bb1b      	cbnz	r3, 8004a72 <_vfiprintf_r+0x1d6>
 8004a2a:	9b03      	ldr	r3, [sp, #12]
 8004a2c:	3307      	adds	r3, #7
 8004a2e:	f023 0307 	bic.w	r3, r3, #7
 8004a32:	3308      	adds	r3, #8
 8004a34:	9303      	str	r3, [sp, #12]
 8004a36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a38:	443b      	add	r3, r7
 8004a3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a3c:	e76a      	b.n	8004914 <_vfiprintf_r+0x78>
 8004a3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a42:	460c      	mov	r4, r1
 8004a44:	2001      	movs	r0, #1
 8004a46:	e7a8      	b.n	800499a <_vfiprintf_r+0xfe>
 8004a48:	2300      	movs	r3, #0
 8004a4a:	3401      	adds	r4, #1
 8004a4c:	9305      	str	r3, [sp, #20]
 8004a4e:	4619      	mov	r1, r3
 8004a50:	f04f 0c0a 	mov.w	ip, #10
 8004a54:	4620      	mov	r0, r4
 8004a56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a5a:	3a30      	subs	r2, #48	@ 0x30
 8004a5c:	2a09      	cmp	r2, #9
 8004a5e:	d903      	bls.n	8004a68 <_vfiprintf_r+0x1cc>
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d0c6      	beq.n	80049f2 <_vfiprintf_r+0x156>
 8004a64:	9105      	str	r1, [sp, #20]
 8004a66:	e7c4      	b.n	80049f2 <_vfiprintf_r+0x156>
 8004a68:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a6c:	4604      	mov	r4, r0
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e7f0      	b.n	8004a54 <_vfiprintf_r+0x1b8>
 8004a72:	ab03      	add	r3, sp, #12
 8004a74:	9300      	str	r3, [sp, #0]
 8004a76:	462a      	mov	r2, r5
 8004a78:	4b12      	ldr	r3, [pc, #72]	@ (8004ac4 <_vfiprintf_r+0x228>)
 8004a7a:	a904      	add	r1, sp, #16
 8004a7c:	4630      	mov	r0, r6
 8004a7e:	f3af 8000 	nop.w
 8004a82:	4607      	mov	r7, r0
 8004a84:	1c78      	adds	r0, r7, #1
 8004a86:	d1d6      	bne.n	8004a36 <_vfiprintf_r+0x19a>
 8004a88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004a8a:	07d9      	lsls	r1, r3, #31
 8004a8c:	d405      	bmi.n	8004a9a <_vfiprintf_r+0x1fe>
 8004a8e:	89ab      	ldrh	r3, [r5, #12]
 8004a90:	059a      	lsls	r2, r3, #22
 8004a92:	d402      	bmi.n	8004a9a <_vfiprintf_r+0x1fe>
 8004a94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004a96:	f7ff fd25 	bl	80044e4 <__retarget_lock_release_recursive>
 8004a9a:	89ab      	ldrh	r3, [r5, #12]
 8004a9c:	065b      	lsls	r3, r3, #25
 8004a9e:	f53f af1f 	bmi.w	80048e0 <_vfiprintf_r+0x44>
 8004aa2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004aa4:	e71e      	b.n	80048e4 <_vfiprintf_r+0x48>
 8004aa6:	ab03      	add	r3, sp, #12
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	462a      	mov	r2, r5
 8004aac:	4b05      	ldr	r3, [pc, #20]	@ (8004ac4 <_vfiprintf_r+0x228>)
 8004aae:	a904      	add	r1, sp, #16
 8004ab0:	4630      	mov	r0, r6
 8004ab2:	f000 f879 	bl	8004ba8 <_printf_i>
 8004ab6:	e7e4      	b.n	8004a82 <_vfiprintf_r+0x1e6>
 8004ab8:	080052c0 	.word	0x080052c0
 8004abc:	080052ca 	.word	0x080052ca
 8004ac0:	00000000 	.word	0x00000000
 8004ac4:	08004877 	.word	0x08004877
 8004ac8:	080052c6 	.word	0x080052c6

08004acc <_printf_common>:
 8004acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ad0:	4616      	mov	r6, r2
 8004ad2:	4698      	mov	r8, r3
 8004ad4:	688a      	ldr	r2, [r1, #8]
 8004ad6:	690b      	ldr	r3, [r1, #16]
 8004ad8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004adc:	4293      	cmp	r3, r2
 8004ade:	bfb8      	it	lt
 8004ae0:	4613      	movlt	r3, r2
 8004ae2:	6033      	str	r3, [r6, #0]
 8004ae4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004ae8:	4607      	mov	r7, r0
 8004aea:	460c      	mov	r4, r1
 8004aec:	b10a      	cbz	r2, 8004af2 <_printf_common+0x26>
 8004aee:	3301      	adds	r3, #1
 8004af0:	6033      	str	r3, [r6, #0]
 8004af2:	6823      	ldr	r3, [r4, #0]
 8004af4:	0699      	lsls	r1, r3, #26
 8004af6:	bf42      	ittt	mi
 8004af8:	6833      	ldrmi	r3, [r6, #0]
 8004afa:	3302      	addmi	r3, #2
 8004afc:	6033      	strmi	r3, [r6, #0]
 8004afe:	6825      	ldr	r5, [r4, #0]
 8004b00:	f015 0506 	ands.w	r5, r5, #6
 8004b04:	d106      	bne.n	8004b14 <_printf_common+0x48>
 8004b06:	f104 0a19 	add.w	sl, r4, #25
 8004b0a:	68e3      	ldr	r3, [r4, #12]
 8004b0c:	6832      	ldr	r2, [r6, #0]
 8004b0e:	1a9b      	subs	r3, r3, r2
 8004b10:	42ab      	cmp	r3, r5
 8004b12:	dc26      	bgt.n	8004b62 <_printf_common+0x96>
 8004b14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004b18:	6822      	ldr	r2, [r4, #0]
 8004b1a:	3b00      	subs	r3, #0
 8004b1c:	bf18      	it	ne
 8004b1e:	2301      	movne	r3, #1
 8004b20:	0692      	lsls	r2, r2, #26
 8004b22:	d42b      	bmi.n	8004b7c <_printf_common+0xb0>
 8004b24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004b28:	4641      	mov	r1, r8
 8004b2a:	4638      	mov	r0, r7
 8004b2c:	47c8      	blx	r9
 8004b2e:	3001      	adds	r0, #1
 8004b30:	d01e      	beq.n	8004b70 <_printf_common+0xa4>
 8004b32:	6823      	ldr	r3, [r4, #0]
 8004b34:	6922      	ldr	r2, [r4, #16]
 8004b36:	f003 0306 	and.w	r3, r3, #6
 8004b3a:	2b04      	cmp	r3, #4
 8004b3c:	bf02      	ittt	eq
 8004b3e:	68e5      	ldreq	r5, [r4, #12]
 8004b40:	6833      	ldreq	r3, [r6, #0]
 8004b42:	1aed      	subeq	r5, r5, r3
 8004b44:	68a3      	ldr	r3, [r4, #8]
 8004b46:	bf0c      	ite	eq
 8004b48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b4c:	2500      	movne	r5, #0
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	bfc4      	itt	gt
 8004b52:	1a9b      	subgt	r3, r3, r2
 8004b54:	18ed      	addgt	r5, r5, r3
 8004b56:	2600      	movs	r6, #0
 8004b58:	341a      	adds	r4, #26
 8004b5a:	42b5      	cmp	r5, r6
 8004b5c:	d11a      	bne.n	8004b94 <_printf_common+0xc8>
 8004b5e:	2000      	movs	r0, #0
 8004b60:	e008      	b.n	8004b74 <_printf_common+0xa8>
 8004b62:	2301      	movs	r3, #1
 8004b64:	4652      	mov	r2, sl
 8004b66:	4641      	mov	r1, r8
 8004b68:	4638      	mov	r0, r7
 8004b6a:	47c8      	blx	r9
 8004b6c:	3001      	adds	r0, #1
 8004b6e:	d103      	bne.n	8004b78 <_printf_common+0xac>
 8004b70:	f04f 30ff 	mov.w	r0, #4294967295
 8004b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b78:	3501      	adds	r5, #1
 8004b7a:	e7c6      	b.n	8004b0a <_printf_common+0x3e>
 8004b7c:	18e1      	adds	r1, r4, r3
 8004b7e:	1c5a      	adds	r2, r3, #1
 8004b80:	2030      	movs	r0, #48	@ 0x30
 8004b82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004b86:	4422      	add	r2, r4
 8004b88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004b8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004b90:	3302      	adds	r3, #2
 8004b92:	e7c7      	b.n	8004b24 <_printf_common+0x58>
 8004b94:	2301      	movs	r3, #1
 8004b96:	4622      	mov	r2, r4
 8004b98:	4641      	mov	r1, r8
 8004b9a:	4638      	mov	r0, r7
 8004b9c:	47c8      	blx	r9
 8004b9e:	3001      	adds	r0, #1
 8004ba0:	d0e6      	beq.n	8004b70 <_printf_common+0xa4>
 8004ba2:	3601      	adds	r6, #1
 8004ba4:	e7d9      	b.n	8004b5a <_printf_common+0x8e>
	...

08004ba8 <_printf_i>:
 8004ba8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bac:	7e0f      	ldrb	r7, [r1, #24]
 8004bae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004bb0:	2f78      	cmp	r7, #120	@ 0x78
 8004bb2:	4691      	mov	r9, r2
 8004bb4:	4680      	mov	r8, r0
 8004bb6:	460c      	mov	r4, r1
 8004bb8:	469a      	mov	sl, r3
 8004bba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004bbe:	d807      	bhi.n	8004bd0 <_printf_i+0x28>
 8004bc0:	2f62      	cmp	r7, #98	@ 0x62
 8004bc2:	d80a      	bhi.n	8004bda <_printf_i+0x32>
 8004bc4:	2f00      	cmp	r7, #0
 8004bc6:	f000 80d2 	beq.w	8004d6e <_printf_i+0x1c6>
 8004bca:	2f58      	cmp	r7, #88	@ 0x58
 8004bcc:	f000 80b9 	beq.w	8004d42 <_printf_i+0x19a>
 8004bd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004bd4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004bd8:	e03a      	b.n	8004c50 <_printf_i+0xa8>
 8004bda:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004bde:	2b15      	cmp	r3, #21
 8004be0:	d8f6      	bhi.n	8004bd0 <_printf_i+0x28>
 8004be2:	a101      	add	r1, pc, #4	@ (adr r1, 8004be8 <_printf_i+0x40>)
 8004be4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004be8:	08004c41 	.word	0x08004c41
 8004bec:	08004c55 	.word	0x08004c55
 8004bf0:	08004bd1 	.word	0x08004bd1
 8004bf4:	08004bd1 	.word	0x08004bd1
 8004bf8:	08004bd1 	.word	0x08004bd1
 8004bfc:	08004bd1 	.word	0x08004bd1
 8004c00:	08004c55 	.word	0x08004c55
 8004c04:	08004bd1 	.word	0x08004bd1
 8004c08:	08004bd1 	.word	0x08004bd1
 8004c0c:	08004bd1 	.word	0x08004bd1
 8004c10:	08004bd1 	.word	0x08004bd1
 8004c14:	08004d55 	.word	0x08004d55
 8004c18:	08004c7f 	.word	0x08004c7f
 8004c1c:	08004d0f 	.word	0x08004d0f
 8004c20:	08004bd1 	.word	0x08004bd1
 8004c24:	08004bd1 	.word	0x08004bd1
 8004c28:	08004d77 	.word	0x08004d77
 8004c2c:	08004bd1 	.word	0x08004bd1
 8004c30:	08004c7f 	.word	0x08004c7f
 8004c34:	08004bd1 	.word	0x08004bd1
 8004c38:	08004bd1 	.word	0x08004bd1
 8004c3c:	08004d17 	.word	0x08004d17
 8004c40:	6833      	ldr	r3, [r6, #0]
 8004c42:	1d1a      	adds	r2, r3, #4
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	6032      	str	r2, [r6, #0]
 8004c48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004c50:	2301      	movs	r3, #1
 8004c52:	e09d      	b.n	8004d90 <_printf_i+0x1e8>
 8004c54:	6833      	ldr	r3, [r6, #0]
 8004c56:	6820      	ldr	r0, [r4, #0]
 8004c58:	1d19      	adds	r1, r3, #4
 8004c5a:	6031      	str	r1, [r6, #0]
 8004c5c:	0606      	lsls	r6, r0, #24
 8004c5e:	d501      	bpl.n	8004c64 <_printf_i+0xbc>
 8004c60:	681d      	ldr	r5, [r3, #0]
 8004c62:	e003      	b.n	8004c6c <_printf_i+0xc4>
 8004c64:	0645      	lsls	r5, r0, #25
 8004c66:	d5fb      	bpl.n	8004c60 <_printf_i+0xb8>
 8004c68:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c6c:	2d00      	cmp	r5, #0
 8004c6e:	da03      	bge.n	8004c78 <_printf_i+0xd0>
 8004c70:	232d      	movs	r3, #45	@ 0x2d
 8004c72:	426d      	negs	r5, r5
 8004c74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c78:	4859      	ldr	r0, [pc, #356]	@ (8004de0 <_printf_i+0x238>)
 8004c7a:	230a      	movs	r3, #10
 8004c7c:	e011      	b.n	8004ca2 <_printf_i+0xfa>
 8004c7e:	6821      	ldr	r1, [r4, #0]
 8004c80:	6833      	ldr	r3, [r6, #0]
 8004c82:	0608      	lsls	r0, r1, #24
 8004c84:	f853 5b04 	ldr.w	r5, [r3], #4
 8004c88:	d402      	bmi.n	8004c90 <_printf_i+0xe8>
 8004c8a:	0649      	lsls	r1, r1, #25
 8004c8c:	bf48      	it	mi
 8004c8e:	b2ad      	uxthmi	r5, r5
 8004c90:	2f6f      	cmp	r7, #111	@ 0x6f
 8004c92:	4853      	ldr	r0, [pc, #332]	@ (8004de0 <_printf_i+0x238>)
 8004c94:	6033      	str	r3, [r6, #0]
 8004c96:	bf14      	ite	ne
 8004c98:	230a      	movne	r3, #10
 8004c9a:	2308      	moveq	r3, #8
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004ca2:	6866      	ldr	r6, [r4, #4]
 8004ca4:	60a6      	str	r6, [r4, #8]
 8004ca6:	2e00      	cmp	r6, #0
 8004ca8:	bfa2      	ittt	ge
 8004caa:	6821      	ldrge	r1, [r4, #0]
 8004cac:	f021 0104 	bicge.w	r1, r1, #4
 8004cb0:	6021      	strge	r1, [r4, #0]
 8004cb2:	b90d      	cbnz	r5, 8004cb8 <_printf_i+0x110>
 8004cb4:	2e00      	cmp	r6, #0
 8004cb6:	d04b      	beq.n	8004d50 <_printf_i+0x1a8>
 8004cb8:	4616      	mov	r6, r2
 8004cba:	fbb5 f1f3 	udiv	r1, r5, r3
 8004cbe:	fb03 5711 	mls	r7, r3, r1, r5
 8004cc2:	5dc7      	ldrb	r7, [r0, r7]
 8004cc4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004cc8:	462f      	mov	r7, r5
 8004cca:	42bb      	cmp	r3, r7
 8004ccc:	460d      	mov	r5, r1
 8004cce:	d9f4      	bls.n	8004cba <_printf_i+0x112>
 8004cd0:	2b08      	cmp	r3, #8
 8004cd2:	d10b      	bne.n	8004cec <_printf_i+0x144>
 8004cd4:	6823      	ldr	r3, [r4, #0]
 8004cd6:	07df      	lsls	r7, r3, #31
 8004cd8:	d508      	bpl.n	8004cec <_printf_i+0x144>
 8004cda:	6923      	ldr	r3, [r4, #16]
 8004cdc:	6861      	ldr	r1, [r4, #4]
 8004cde:	4299      	cmp	r1, r3
 8004ce0:	bfde      	ittt	le
 8004ce2:	2330      	movle	r3, #48	@ 0x30
 8004ce4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ce8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004cec:	1b92      	subs	r2, r2, r6
 8004cee:	6122      	str	r2, [r4, #16]
 8004cf0:	f8cd a000 	str.w	sl, [sp]
 8004cf4:	464b      	mov	r3, r9
 8004cf6:	aa03      	add	r2, sp, #12
 8004cf8:	4621      	mov	r1, r4
 8004cfa:	4640      	mov	r0, r8
 8004cfc:	f7ff fee6 	bl	8004acc <_printf_common>
 8004d00:	3001      	adds	r0, #1
 8004d02:	d14a      	bne.n	8004d9a <_printf_i+0x1f2>
 8004d04:	f04f 30ff 	mov.w	r0, #4294967295
 8004d08:	b004      	add	sp, #16
 8004d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d0e:	6823      	ldr	r3, [r4, #0]
 8004d10:	f043 0320 	orr.w	r3, r3, #32
 8004d14:	6023      	str	r3, [r4, #0]
 8004d16:	4833      	ldr	r0, [pc, #204]	@ (8004de4 <_printf_i+0x23c>)
 8004d18:	2778      	movs	r7, #120	@ 0x78
 8004d1a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004d1e:	6823      	ldr	r3, [r4, #0]
 8004d20:	6831      	ldr	r1, [r6, #0]
 8004d22:	061f      	lsls	r7, r3, #24
 8004d24:	f851 5b04 	ldr.w	r5, [r1], #4
 8004d28:	d402      	bmi.n	8004d30 <_printf_i+0x188>
 8004d2a:	065f      	lsls	r7, r3, #25
 8004d2c:	bf48      	it	mi
 8004d2e:	b2ad      	uxthmi	r5, r5
 8004d30:	6031      	str	r1, [r6, #0]
 8004d32:	07d9      	lsls	r1, r3, #31
 8004d34:	bf44      	itt	mi
 8004d36:	f043 0320 	orrmi.w	r3, r3, #32
 8004d3a:	6023      	strmi	r3, [r4, #0]
 8004d3c:	b11d      	cbz	r5, 8004d46 <_printf_i+0x19e>
 8004d3e:	2310      	movs	r3, #16
 8004d40:	e7ac      	b.n	8004c9c <_printf_i+0xf4>
 8004d42:	4827      	ldr	r0, [pc, #156]	@ (8004de0 <_printf_i+0x238>)
 8004d44:	e7e9      	b.n	8004d1a <_printf_i+0x172>
 8004d46:	6823      	ldr	r3, [r4, #0]
 8004d48:	f023 0320 	bic.w	r3, r3, #32
 8004d4c:	6023      	str	r3, [r4, #0]
 8004d4e:	e7f6      	b.n	8004d3e <_printf_i+0x196>
 8004d50:	4616      	mov	r6, r2
 8004d52:	e7bd      	b.n	8004cd0 <_printf_i+0x128>
 8004d54:	6833      	ldr	r3, [r6, #0]
 8004d56:	6825      	ldr	r5, [r4, #0]
 8004d58:	6961      	ldr	r1, [r4, #20]
 8004d5a:	1d18      	adds	r0, r3, #4
 8004d5c:	6030      	str	r0, [r6, #0]
 8004d5e:	062e      	lsls	r6, r5, #24
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	d501      	bpl.n	8004d68 <_printf_i+0x1c0>
 8004d64:	6019      	str	r1, [r3, #0]
 8004d66:	e002      	b.n	8004d6e <_printf_i+0x1c6>
 8004d68:	0668      	lsls	r0, r5, #25
 8004d6a:	d5fb      	bpl.n	8004d64 <_printf_i+0x1bc>
 8004d6c:	8019      	strh	r1, [r3, #0]
 8004d6e:	2300      	movs	r3, #0
 8004d70:	6123      	str	r3, [r4, #16]
 8004d72:	4616      	mov	r6, r2
 8004d74:	e7bc      	b.n	8004cf0 <_printf_i+0x148>
 8004d76:	6833      	ldr	r3, [r6, #0]
 8004d78:	1d1a      	adds	r2, r3, #4
 8004d7a:	6032      	str	r2, [r6, #0]
 8004d7c:	681e      	ldr	r6, [r3, #0]
 8004d7e:	6862      	ldr	r2, [r4, #4]
 8004d80:	2100      	movs	r1, #0
 8004d82:	4630      	mov	r0, r6
 8004d84:	f7fb fa2c 	bl	80001e0 <memchr>
 8004d88:	b108      	cbz	r0, 8004d8e <_printf_i+0x1e6>
 8004d8a:	1b80      	subs	r0, r0, r6
 8004d8c:	6060      	str	r0, [r4, #4]
 8004d8e:	6863      	ldr	r3, [r4, #4]
 8004d90:	6123      	str	r3, [r4, #16]
 8004d92:	2300      	movs	r3, #0
 8004d94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d98:	e7aa      	b.n	8004cf0 <_printf_i+0x148>
 8004d9a:	6923      	ldr	r3, [r4, #16]
 8004d9c:	4632      	mov	r2, r6
 8004d9e:	4649      	mov	r1, r9
 8004da0:	4640      	mov	r0, r8
 8004da2:	47d0      	blx	sl
 8004da4:	3001      	adds	r0, #1
 8004da6:	d0ad      	beq.n	8004d04 <_printf_i+0x15c>
 8004da8:	6823      	ldr	r3, [r4, #0]
 8004daa:	079b      	lsls	r3, r3, #30
 8004dac:	d413      	bmi.n	8004dd6 <_printf_i+0x22e>
 8004dae:	68e0      	ldr	r0, [r4, #12]
 8004db0:	9b03      	ldr	r3, [sp, #12]
 8004db2:	4298      	cmp	r0, r3
 8004db4:	bfb8      	it	lt
 8004db6:	4618      	movlt	r0, r3
 8004db8:	e7a6      	b.n	8004d08 <_printf_i+0x160>
 8004dba:	2301      	movs	r3, #1
 8004dbc:	4632      	mov	r2, r6
 8004dbe:	4649      	mov	r1, r9
 8004dc0:	4640      	mov	r0, r8
 8004dc2:	47d0      	blx	sl
 8004dc4:	3001      	adds	r0, #1
 8004dc6:	d09d      	beq.n	8004d04 <_printf_i+0x15c>
 8004dc8:	3501      	adds	r5, #1
 8004dca:	68e3      	ldr	r3, [r4, #12]
 8004dcc:	9903      	ldr	r1, [sp, #12]
 8004dce:	1a5b      	subs	r3, r3, r1
 8004dd0:	42ab      	cmp	r3, r5
 8004dd2:	dcf2      	bgt.n	8004dba <_printf_i+0x212>
 8004dd4:	e7eb      	b.n	8004dae <_printf_i+0x206>
 8004dd6:	2500      	movs	r5, #0
 8004dd8:	f104 0619 	add.w	r6, r4, #25
 8004ddc:	e7f5      	b.n	8004dca <_printf_i+0x222>
 8004dde:	bf00      	nop
 8004de0:	080052d1 	.word	0x080052d1
 8004de4:	080052e2 	.word	0x080052e2

08004de8 <__sflush_r>:
 8004de8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004df0:	0716      	lsls	r6, r2, #28
 8004df2:	4605      	mov	r5, r0
 8004df4:	460c      	mov	r4, r1
 8004df6:	d454      	bmi.n	8004ea2 <__sflush_r+0xba>
 8004df8:	684b      	ldr	r3, [r1, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	dc02      	bgt.n	8004e04 <__sflush_r+0x1c>
 8004dfe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	dd48      	ble.n	8004e96 <__sflush_r+0xae>
 8004e04:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004e06:	2e00      	cmp	r6, #0
 8004e08:	d045      	beq.n	8004e96 <__sflush_r+0xae>
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004e10:	682f      	ldr	r7, [r5, #0]
 8004e12:	6a21      	ldr	r1, [r4, #32]
 8004e14:	602b      	str	r3, [r5, #0]
 8004e16:	d030      	beq.n	8004e7a <__sflush_r+0x92>
 8004e18:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004e1a:	89a3      	ldrh	r3, [r4, #12]
 8004e1c:	0759      	lsls	r1, r3, #29
 8004e1e:	d505      	bpl.n	8004e2c <__sflush_r+0x44>
 8004e20:	6863      	ldr	r3, [r4, #4]
 8004e22:	1ad2      	subs	r2, r2, r3
 8004e24:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004e26:	b10b      	cbz	r3, 8004e2c <__sflush_r+0x44>
 8004e28:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004e2a:	1ad2      	subs	r2, r2, r3
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004e30:	6a21      	ldr	r1, [r4, #32]
 8004e32:	4628      	mov	r0, r5
 8004e34:	47b0      	blx	r6
 8004e36:	1c43      	adds	r3, r0, #1
 8004e38:	89a3      	ldrh	r3, [r4, #12]
 8004e3a:	d106      	bne.n	8004e4a <__sflush_r+0x62>
 8004e3c:	6829      	ldr	r1, [r5, #0]
 8004e3e:	291d      	cmp	r1, #29
 8004e40:	d82b      	bhi.n	8004e9a <__sflush_r+0xb2>
 8004e42:	4a2a      	ldr	r2, [pc, #168]	@ (8004eec <__sflush_r+0x104>)
 8004e44:	410a      	asrs	r2, r1
 8004e46:	07d6      	lsls	r6, r2, #31
 8004e48:	d427      	bmi.n	8004e9a <__sflush_r+0xb2>
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	6062      	str	r2, [r4, #4]
 8004e4e:	04d9      	lsls	r1, r3, #19
 8004e50:	6922      	ldr	r2, [r4, #16]
 8004e52:	6022      	str	r2, [r4, #0]
 8004e54:	d504      	bpl.n	8004e60 <__sflush_r+0x78>
 8004e56:	1c42      	adds	r2, r0, #1
 8004e58:	d101      	bne.n	8004e5e <__sflush_r+0x76>
 8004e5a:	682b      	ldr	r3, [r5, #0]
 8004e5c:	b903      	cbnz	r3, 8004e60 <__sflush_r+0x78>
 8004e5e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004e60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004e62:	602f      	str	r7, [r5, #0]
 8004e64:	b1b9      	cbz	r1, 8004e96 <__sflush_r+0xae>
 8004e66:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004e6a:	4299      	cmp	r1, r3
 8004e6c:	d002      	beq.n	8004e74 <__sflush_r+0x8c>
 8004e6e:	4628      	mov	r0, r5
 8004e70:	f7ff fb48 	bl	8004504 <_free_r>
 8004e74:	2300      	movs	r3, #0
 8004e76:	6363      	str	r3, [r4, #52]	@ 0x34
 8004e78:	e00d      	b.n	8004e96 <__sflush_r+0xae>
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	4628      	mov	r0, r5
 8004e7e:	47b0      	blx	r6
 8004e80:	4602      	mov	r2, r0
 8004e82:	1c50      	adds	r0, r2, #1
 8004e84:	d1c9      	bne.n	8004e1a <__sflush_r+0x32>
 8004e86:	682b      	ldr	r3, [r5, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d0c6      	beq.n	8004e1a <__sflush_r+0x32>
 8004e8c:	2b1d      	cmp	r3, #29
 8004e8e:	d001      	beq.n	8004e94 <__sflush_r+0xac>
 8004e90:	2b16      	cmp	r3, #22
 8004e92:	d11e      	bne.n	8004ed2 <__sflush_r+0xea>
 8004e94:	602f      	str	r7, [r5, #0]
 8004e96:	2000      	movs	r0, #0
 8004e98:	e022      	b.n	8004ee0 <__sflush_r+0xf8>
 8004e9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e9e:	b21b      	sxth	r3, r3
 8004ea0:	e01b      	b.n	8004eda <__sflush_r+0xf2>
 8004ea2:	690f      	ldr	r7, [r1, #16]
 8004ea4:	2f00      	cmp	r7, #0
 8004ea6:	d0f6      	beq.n	8004e96 <__sflush_r+0xae>
 8004ea8:	0793      	lsls	r3, r2, #30
 8004eaa:	680e      	ldr	r6, [r1, #0]
 8004eac:	bf08      	it	eq
 8004eae:	694b      	ldreq	r3, [r1, #20]
 8004eb0:	600f      	str	r7, [r1, #0]
 8004eb2:	bf18      	it	ne
 8004eb4:	2300      	movne	r3, #0
 8004eb6:	eba6 0807 	sub.w	r8, r6, r7
 8004eba:	608b      	str	r3, [r1, #8]
 8004ebc:	f1b8 0f00 	cmp.w	r8, #0
 8004ec0:	dde9      	ble.n	8004e96 <__sflush_r+0xae>
 8004ec2:	6a21      	ldr	r1, [r4, #32]
 8004ec4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004ec6:	4643      	mov	r3, r8
 8004ec8:	463a      	mov	r2, r7
 8004eca:	4628      	mov	r0, r5
 8004ecc:	47b0      	blx	r6
 8004ece:	2800      	cmp	r0, #0
 8004ed0:	dc08      	bgt.n	8004ee4 <__sflush_r+0xfc>
 8004ed2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ed6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004eda:	81a3      	strh	r3, [r4, #12]
 8004edc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ee4:	4407      	add	r7, r0
 8004ee6:	eba8 0800 	sub.w	r8, r8, r0
 8004eea:	e7e7      	b.n	8004ebc <__sflush_r+0xd4>
 8004eec:	dfbffffe 	.word	0xdfbffffe

08004ef0 <_fflush_r>:
 8004ef0:	b538      	push	{r3, r4, r5, lr}
 8004ef2:	690b      	ldr	r3, [r1, #16]
 8004ef4:	4605      	mov	r5, r0
 8004ef6:	460c      	mov	r4, r1
 8004ef8:	b913      	cbnz	r3, 8004f00 <_fflush_r+0x10>
 8004efa:	2500      	movs	r5, #0
 8004efc:	4628      	mov	r0, r5
 8004efe:	bd38      	pop	{r3, r4, r5, pc}
 8004f00:	b118      	cbz	r0, 8004f0a <_fflush_r+0x1a>
 8004f02:	6a03      	ldr	r3, [r0, #32]
 8004f04:	b90b      	cbnz	r3, 8004f0a <_fflush_r+0x1a>
 8004f06:	f7ff f9b7 	bl	8004278 <__sinit>
 8004f0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d0f3      	beq.n	8004efa <_fflush_r+0xa>
 8004f12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004f14:	07d0      	lsls	r0, r2, #31
 8004f16:	d404      	bmi.n	8004f22 <_fflush_r+0x32>
 8004f18:	0599      	lsls	r1, r3, #22
 8004f1a:	d402      	bmi.n	8004f22 <_fflush_r+0x32>
 8004f1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f1e:	f7ff fae0 	bl	80044e2 <__retarget_lock_acquire_recursive>
 8004f22:	4628      	mov	r0, r5
 8004f24:	4621      	mov	r1, r4
 8004f26:	f7ff ff5f 	bl	8004de8 <__sflush_r>
 8004f2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f2c:	07da      	lsls	r2, r3, #31
 8004f2e:	4605      	mov	r5, r0
 8004f30:	d4e4      	bmi.n	8004efc <_fflush_r+0xc>
 8004f32:	89a3      	ldrh	r3, [r4, #12]
 8004f34:	059b      	lsls	r3, r3, #22
 8004f36:	d4e1      	bmi.n	8004efc <_fflush_r+0xc>
 8004f38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f3a:	f7ff fad3 	bl	80044e4 <__retarget_lock_release_recursive>
 8004f3e:	e7dd      	b.n	8004efc <_fflush_r+0xc>

08004f40 <__swbuf_r>:
 8004f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f42:	460e      	mov	r6, r1
 8004f44:	4614      	mov	r4, r2
 8004f46:	4605      	mov	r5, r0
 8004f48:	b118      	cbz	r0, 8004f52 <__swbuf_r+0x12>
 8004f4a:	6a03      	ldr	r3, [r0, #32]
 8004f4c:	b90b      	cbnz	r3, 8004f52 <__swbuf_r+0x12>
 8004f4e:	f7ff f993 	bl	8004278 <__sinit>
 8004f52:	69a3      	ldr	r3, [r4, #24]
 8004f54:	60a3      	str	r3, [r4, #8]
 8004f56:	89a3      	ldrh	r3, [r4, #12]
 8004f58:	071a      	lsls	r2, r3, #28
 8004f5a:	d501      	bpl.n	8004f60 <__swbuf_r+0x20>
 8004f5c:	6923      	ldr	r3, [r4, #16]
 8004f5e:	b943      	cbnz	r3, 8004f72 <__swbuf_r+0x32>
 8004f60:	4621      	mov	r1, r4
 8004f62:	4628      	mov	r0, r5
 8004f64:	f000 f82a 	bl	8004fbc <__swsetup_r>
 8004f68:	b118      	cbz	r0, 8004f72 <__swbuf_r+0x32>
 8004f6a:	f04f 37ff 	mov.w	r7, #4294967295
 8004f6e:	4638      	mov	r0, r7
 8004f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f72:	6823      	ldr	r3, [r4, #0]
 8004f74:	6922      	ldr	r2, [r4, #16]
 8004f76:	1a98      	subs	r0, r3, r2
 8004f78:	6963      	ldr	r3, [r4, #20]
 8004f7a:	b2f6      	uxtb	r6, r6
 8004f7c:	4283      	cmp	r3, r0
 8004f7e:	4637      	mov	r7, r6
 8004f80:	dc05      	bgt.n	8004f8e <__swbuf_r+0x4e>
 8004f82:	4621      	mov	r1, r4
 8004f84:	4628      	mov	r0, r5
 8004f86:	f7ff ffb3 	bl	8004ef0 <_fflush_r>
 8004f8a:	2800      	cmp	r0, #0
 8004f8c:	d1ed      	bne.n	8004f6a <__swbuf_r+0x2a>
 8004f8e:	68a3      	ldr	r3, [r4, #8]
 8004f90:	3b01      	subs	r3, #1
 8004f92:	60a3      	str	r3, [r4, #8]
 8004f94:	6823      	ldr	r3, [r4, #0]
 8004f96:	1c5a      	adds	r2, r3, #1
 8004f98:	6022      	str	r2, [r4, #0]
 8004f9a:	701e      	strb	r6, [r3, #0]
 8004f9c:	6962      	ldr	r2, [r4, #20]
 8004f9e:	1c43      	adds	r3, r0, #1
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d004      	beq.n	8004fae <__swbuf_r+0x6e>
 8004fa4:	89a3      	ldrh	r3, [r4, #12]
 8004fa6:	07db      	lsls	r3, r3, #31
 8004fa8:	d5e1      	bpl.n	8004f6e <__swbuf_r+0x2e>
 8004faa:	2e0a      	cmp	r6, #10
 8004fac:	d1df      	bne.n	8004f6e <__swbuf_r+0x2e>
 8004fae:	4621      	mov	r1, r4
 8004fb0:	4628      	mov	r0, r5
 8004fb2:	f7ff ff9d 	bl	8004ef0 <_fflush_r>
 8004fb6:	2800      	cmp	r0, #0
 8004fb8:	d0d9      	beq.n	8004f6e <__swbuf_r+0x2e>
 8004fba:	e7d6      	b.n	8004f6a <__swbuf_r+0x2a>

08004fbc <__swsetup_r>:
 8004fbc:	b538      	push	{r3, r4, r5, lr}
 8004fbe:	4b29      	ldr	r3, [pc, #164]	@ (8005064 <__swsetup_r+0xa8>)
 8004fc0:	4605      	mov	r5, r0
 8004fc2:	6818      	ldr	r0, [r3, #0]
 8004fc4:	460c      	mov	r4, r1
 8004fc6:	b118      	cbz	r0, 8004fd0 <__swsetup_r+0x14>
 8004fc8:	6a03      	ldr	r3, [r0, #32]
 8004fca:	b90b      	cbnz	r3, 8004fd0 <__swsetup_r+0x14>
 8004fcc:	f7ff f954 	bl	8004278 <__sinit>
 8004fd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fd4:	0719      	lsls	r1, r3, #28
 8004fd6:	d422      	bmi.n	800501e <__swsetup_r+0x62>
 8004fd8:	06da      	lsls	r2, r3, #27
 8004fda:	d407      	bmi.n	8004fec <__swsetup_r+0x30>
 8004fdc:	2209      	movs	r2, #9
 8004fde:	602a      	str	r2, [r5, #0]
 8004fe0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004fe4:	81a3      	strh	r3, [r4, #12]
 8004fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8004fea:	e033      	b.n	8005054 <__swsetup_r+0x98>
 8004fec:	0758      	lsls	r0, r3, #29
 8004fee:	d512      	bpl.n	8005016 <__swsetup_r+0x5a>
 8004ff0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004ff2:	b141      	cbz	r1, 8005006 <__swsetup_r+0x4a>
 8004ff4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004ff8:	4299      	cmp	r1, r3
 8004ffa:	d002      	beq.n	8005002 <__swsetup_r+0x46>
 8004ffc:	4628      	mov	r0, r5
 8004ffe:	f7ff fa81 	bl	8004504 <_free_r>
 8005002:	2300      	movs	r3, #0
 8005004:	6363      	str	r3, [r4, #52]	@ 0x34
 8005006:	89a3      	ldrh	r3, [r4, #12]
 8005008:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800500c:	81a3      	strh	r3, [r4, #12]
 800500e:	2300      	movs	r3, #0
 8005010:	6063      	str	r3, [r4, #4]
 8005012:	6923      	ldr	r3, [r4, #16]
 8005014:	6023      	str	r3, [r4, #0]
 8005016:	89a3      	ldrh	r3, [r4, #12]
 8005018:	f043 0308 	orr.w	r3, r3, #8
 800501c:	81a3      	strh	r3, [r4, #12]
 800501e:	6923      	ldr	r3, [r4, #16]
 8005020:	b94b      	cbnz	r3, 8005036 <__swsetup_r+0x7a>
 8005022:	89a3      	ldrh	r3, [r4, #12]
 8005024:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005028:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800502c:	d003      	beq.n	8005036 <__swsetup_r+0x7a>
 800502e:	4621      	mov	r1, r4
 8005030:	4628      	mov	r0, r5
 8005032:	f000 f887 	bl	8005144 <__smakebuf_r>
 8005036:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800503a:	f013 0201 	ands.w	r2, r3, #1
 800503e:	d00a      	beq.n	8005056 <__swsetup_r+0x9a>
 8005040:	2200      	movs	r2, #0
 8005042:	60a2      	str	r2, [r4, #8]
 8005044:	6962      	ldr	r2, [r4, #20]
 8005046:	4252      	negs	r2, r2
 8005048:	61a2      	str	r2, [r4, #24]
 800504a:	6922      	ldr	r2, [r4, #16]
 800504c:	b942      	cbnz	r2, 8005060 <__swsetup_r+0xa4>
 800504e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005052:	d1c5      	bne.n	8004fe0 <__swsetup_r+0x24>
 8005054:	bd38      	pop	{r3, r4, r5, pc}
 8005056:	0799      	lsls	r1, r3, #30
 8005058:	bf58      	it	pl
 800505a:	6962      	ldrpl	r2, [r4, #20]
 800505c:	60a2      	str	r2, [r4, #8]
 800505e:	e7f4      	b.n	800504a <__swsetup_r+0x8e>
 8005060:	2000      	movs	r0, #0
 8005062:	e7f7      	b.n	8005054 <__swsetup_r+0x98>
 8005064:	20000160 	.word	0x20000160

08005068 <memmove>:
 8005068:	4288      	cmp	r0, r1
 800506a:	b510      	push	{r4, lr}
 800506c:	eb01 0402 	add.w	r4, r1, r2
 8005070:	d902      	bls.n	8005078 <memmove+0x10>
 8005072:	4284      	cmp	r4, r0
 8005074:	4623      	mov	r3, r4
 8005076:	d807      	bhi.n	8005088 <memmove+0x20>
 8005078:	1e43      	subs	r3, r0, #1
 800507a:	42a1      	cmp	r1, r4
 800507c:	d008      	beq.n	8005090 <memmove+0x28>
 800507e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005082:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005086:	e7f8      	b.n	800507a <memmove+0x12>
 8005088:	4402      	add	r2, r0
 800508a:	4601      	mov	r1, r0
 800508c:	428a      	cmp	r2, r1
 800508e:	d100      	bne.n	8005092 <memmove+0x2a>
 8005090:	bd10      	pop	{r4, pc}
 8005092:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005096:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800509a:	e7f7      	b.n	800508c <memmove+0x24>

0800509c <_realloc_r>:
 800509c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050a0:	4680      	mov	r8, r0
 80050a2:	4615      	mov	r5, r2
 80050a4:	460c      	mov	r4, r1
 80050a6:	b921      	cbnz	r1, 80050b2 <_realloc_r+0x16>
 80050a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050ac:	4611      	mov	r1, r2
 80050ae:	f7fe bfcb 	b.w	8004048 <_malloc_r>
 80050b2:	b92a      	cbnz	r2, 80050c0 <_realloc_r+0x24>
 80050b4:	f7ff fa26 	bl	8004504 <_free_r>
 80050b8:	2400      	movs	r4, #0
 80050ba:	4620      	mov	r0, r4
 80050bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050c0:	f000 f89e 	bl	8005200 <_malloc_usable_size_r>
 80050c4:	4285      	cmp	r5, r0
 80050c6:	4606      	mov	r6, r0
 80050c8:	d802      	bhi.n	80050d0 <_realloc_r+0x34>
 80050ca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80050ce:	d8f4      	bhi.n	80050ba <_realloc_r+0x1e>
 80050d0:	4629      	mov	r1, r5
 80050d2:	4640      	mov	r0, r8
 80050d4:	f7fe ffb8 	bl	8004048 <_malloc_r>
 80050d8:	4607      	mov	r7, r0
 80050da:	2800      	cmp	r0, #0
 80050dc:	d0ec      	beq.n	80050b8 <_realloc_r+0x1c>
 80050de:	42b5      	cmp	r5, r6
 80050e0:	462a      	mov	r2, r5
 80050e2:	4621      	mov	r1, r4
 80050e4:	bf28      	it	cs
 80050e6:	4632      	movcs	r2, r6
 80050e8:	f7ff f9fd 	bl	80044e6 <memcpy>
 80050ec:	4621      	mov	r1, r4
 80050ee:	4640      	mov	r0, r8
 80050f0:	f7ff fa08 	bl	8004504 <_free_r>
 80050f4:	463c      	mov	r4, r7
 80050f6:	e7e0      	b.n	80050ba <_realloc_r+0x1e>

080050f8 <__swhatbuf_r>:
 80050f8:	b570      	push	{r4, r5, r6, lr}
 80050fa:	460c      	mov	r4, r1
 80050fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005100:	2900      	cmp	r1, #0
 8005102:	b096      	sub	sp, #88	@ 0x58
 8005104:	4615      	mov	r5, r2
 8005106:	461e      	mov	r6, r3
 8005108:	da0d      	bge.n	8005126 <__swhatbuf_r+0x2e>
 800510a:	89a3      	ldrh	r3, [r4, #12]
 800510c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005110:	f04f 0100 	mov.w	r1, #0
 8005114:	bf14      	ite	ne
 8005116:	2340      	movne	r3, #64	@ 0x40
 8005118:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800511c:	2000      	movs	r0, #0
 800511e:	6031      	str	r1, [r6, #0]
 8005120:	602b      	str	r3, [r5, #0]
 8005122:	b016      	add	sp, #88	@ 0x58
 8005124:	bd70      	pop	{r4, r5, r6, pc}
 8005126:	466a      	mov	r2, sp
 8005128:	f000 f848 	bl	80051bc <_fstat_r>
 800512c:	2800      	cmp	r0, #0
 800512e:	dbec      	blt.n	800510a <__swhatbuf_r+0x12>
 8005130:	9901      	ldr	r1, [sp, #4]
 8005132:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005136:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800513a:	4259      	negs	r1, r3
 800513c:	4159      	adcs	r1, r3
 800513e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005142:	e7eb      	b.n	800511c <__swhatbuf_r+0x24>

08005144 <__smakebuf_r>:
 8005144:	898b      	ldrh	r3, [r1, #12]
 8005146:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005148:	079d      	lsls	r5, r3, #30
 800514a:	4606      	mov	r6, r0
 800514c:	460c      	mov	r4, r1
 800514e:	d507      	bpl.n	8005160 <__smakebuf_r+0x1c>
 8005150:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005154:	6023      	str	r3, [r4, #0]
 8005156:	6123      	str	r3, [r4, #16]
 8005158:	2301      	movs	r3, #1
 800515a:	6163      	str	r3, [r4, #20]
 800515c:	b003      	add	sp, #12
 800515e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005160:	ab01      	add	r3, sp, #4
 8005162:	466a      	mov	r2, sp
 8005164:	f7ff ffc8 	bl	80050f8 <__swhatbuf_r>
 8005168:	9f00      	ldr	r7, [sp, #0]
 800516a:	4605      	mov	r5, r0
 800516c:	4639      	mov	r1, r7
 800516e:	4630      	mov	r0, r6
 8005170:	f7fe ff6a 	bl	8004048 <_malloc_r>
 8005174:	b948      	cbnz	r0, 800518a <__smakebuf_r+0x46>
 8005176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800517a:	059a      	lsls	r2, r3, #22
 800517c:	d4ee      	bmi.n	800515c <__smakebuf_r+0x18>
 800517e:	f023 0303 	bic.w	r3, r3, #3
 8005182:	f043 0302 	orr.w	r3, r3, #2
 8005186:	81a3      	strh	r3, [r4, #12]
 8005188:	e7e2      	b.n	8005150 <__smakebuf_r+0xc>
 800518a:	89a3      	ldrh	r3, [r4, #12]
 800518c:	6020      	str	r0, [r4, #0]
 800518e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005192:	81a3      	strh	r3, [r4, #12]
 8005194:	9b01      	ldr	r3, [sp, #4]
 8005196:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800519a:	b15b      	cbz	r3, 80051b4 <__smakebuf_r+0x70>
 800519c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051a0:	4630      	mov	r0, r6
 80051a2:	f000 f81d 	bl	80051e0 <_isatty_r>
 80051a6:	b128      	cbz	r0, 80051b4 <__smakebuf_r+0x70>
 80051a8:	89a3      	ldrh	r3, [r4, #12]
 80051aa:	f023 0303 	bic.w	r3, r3, #3
 80051ae:	f043 0301 	orr.w	r3, r3, #1
 80051b2:	81a3      	strh	r3, [r4, #12]
 80051b4:	89a3      	ldrh	r3, [r4, #12]
 80051b6:	431d      	orrs	r5, r3
 80051b8:	81a5      	strh	r5, [r4, #12]
 80051ba:	e7cf      	b.n	800515c <__smakebuf_r+0x18>

080051bc <_fstat_r>:
 80051bc:	b538      	push	{r3, r4, r5, lr}
 80051be:	4d07      	ldr	r5, [pc, #28]	@ (80051dc <_fstat_r+0x20>)
 80051c0:	2300      	movs	r3, #0
 80051c2:	4604      	mov	r4, r0
 80051c4:	4608      	mov	r0, r1
 80051c6:	4611      	mov	r1, r2
 80051c8:	602b      	str	r3, [r5, #0]
 80051ca:	f7fc fe43 	bl	8001e54 <_fstat>
 80051ce:	1c43      	adds	r3, r0, #1
 80051d0:	d102      	bne.n	80051d8 <_fstat_r+0x1c>
 80051d2:	682b      	ldr	r3, [r5, #0]
 80051d4:	b103      	cbz	r3, 80051d8 <_fstat_r+0x1c>
 80051d6:	6023      	str	r3, [r4, #0]
 80051d8:	bd38      	pop	{r3, r4, r5, pc}
 80051da:	bf00      	nop
 80051dc:	200004b4 	.word	0x200004b4

080051e0 <_isatty_r>:
 80051e0:	b538      	push	{r3, r4, r5, lr}
 80051e2:	4d06      	ldr	r5, [pc, #24]	@ (80051fc <_isatty_r+0x1c>)
 80051e4:	2300      	movs	r3, #0
 80051e6:	4604      	mov	r4, r0
 80051e8:	4608      	mov	r0, r1
 80051ea:	602b      	str	r3, [r5, #0]
 80051ec:	f7fc fe42 	bl	8001e74 <_isatty>
 80051f0:	1c43      	adds	r3, r0, #1
 80051f2:	d102      	bne.n	80051fa <_isatty_r+0x1a>
 80051f4:	682b      	ldr	r3, [r5, #0]
 80051f6:	b103      	cbz	r3, 80051fa <_isatty_r+0x1a>
 80051f8:	6023      	str	r3, [r4, #0]
 80051fa:	bd38      	pop	{r3, r4, r5, pc}
 80051fc:	200004b4 	.word	0x200004b4

08005200 <_malloc_usable_size_r>:
 8005200:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005204:	1f18      	subs	r0, r3, #4
 8005206:	2b00      	cmp	r3, #0
 8005208:	bfbc      	itt	lt
 800520a:	580b      	ldrlt	r3, [r1, r0]
 800520c:	18c0      	addlt	r0, r0, r3
 800520e:	4770      	bx	lr

08005210 <_init>:
 8005210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005212:	bf00      	nop
 8005214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005216:	bc08      	pop	{r3}
 8005218:	469e      	mov	lr, r3
 800521a:	4770      	bx	lr

0800521c <_fini>:
 800521c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800521e:	bf00      	nop
 8005220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005222:	bc08      	pop	{r3}
 8005224:	469e      	mov	lr, r3
 8005226:	4770      	bx	lr
